
EEG_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013cec  0800bcb0  0800bcb0  0000ccb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f99c  0801f99c  00021218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f99c  0801f99c  0002099c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f9a4  0801f9a4  00021218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f9a4  0801f9a4  000209a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f9a8  0801f9a8  000209a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0801f9ac  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d90  20000218  0801fbc4  00021218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fa8  0801fbc4  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eec  00000000  00000000  00021248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  00037134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  0003b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b7d  00000000  00000000  0003c711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019895  00000000  00000000  0006328e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4fed  00000000  00000000  0007cb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed4  00000000  00000000  00161b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00167a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc98 	.word	0x0800bc98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800bc98 	.word	0x0800bc98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <arm_biquad_cascade_df2T_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b095      	sub	sp, #84	@ 0x54
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        float32_t *pOut = pDst;                        /* Destination pointer */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pState = S->pState;                 /* State pointer */
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30

  do
  {
     /* Reading the coefficients */
     b0 = pCoeffs[0];
 8000fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
     b1 = pCoeffs[1];
 8000fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
     b2 = pCoeffs[2];
 8000fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fec:	3308      	adds	r3, #8
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
     a1 = pCoeffs[3];
 8000ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	623b      	str	r3, [r7, #32]
     a2 = pCoeffs[4];
 8000ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61fb      	str	r3, [r7, #28]

     /* Reading the state values */
     d1 = pState[0];
 8001002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
     d2 = pState[1];
 8001008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	63bb      	str	r3, [r7, #56]	@ 0x38

     pCoeffs += 5U;
 800100e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001010:	3314      	adds	r3, #20
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
      sample = blockSize & 0xFU;

#else

      /* Initialize blkCnt with number of samples */
      sample = blockSize;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 8001018:	e044      	b.n	80010a4 <arm_biquad_cascade_df2T_f32+0xf0>
        Xn1 = *pIn++;
 800101a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800101c:	1d1a      	adds	r2, r3, #4
 800101e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	61bb      	str	r3, [r7, #24]

        acc1 = b0 * Xn1 + d1;
 8001024:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001028:	edd7 7a06 	vldr	s15, [r7, #24]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	edc7 7a05 	vstr	s15, [r7, #20]

        d1 = b1 * Xn1 + d2;
 800103c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001040:	edd7 7a06 	vldr	s15, [r7, #24]
 8001044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001048:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        d1 += a1 * acc1;
 8001054:	ed97 7a08 	vldr	s14, [r7, #32]
 8001058:	edd7 7a05 	vldr	s15, [r7, #20]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        d2 = b2 * Xn1;
 800106c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001070:	edd7 7a06 	vldr	s15, [r7, #24]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        d2 += a2 * acc1;
 800107c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001080:	edd7 7a05 	vldr	s15, [r7, #20]
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        *pOut++ = acc1;
 8001094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001096:	1d1a      	adds	r2, r3, #4
 8001098:	64ba      	str	r2, [r7, #72]	@ 0x48
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]

        /* decrement loop counter */
        sample--;
 800109e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a0:	3b01      	subs	r3, #1
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
      while (sample > 0U) {
 80010a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1b7      	bne.n	800101a <arm_biquad_cascade_df2T_f32+0x66>
      }

      /* Store the updated state variables back into the state array */
      pState[0] = d1;
 80010aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010ae:	601a      	str	r2, [r3, #0]
      pState[1] = d2;
 80010b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010b2:	3304      	adds	r3, #4
 80010b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010b6:	601a      	str	r2, [r3, #0]

      pState += 2U;
 80010b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ba:	3308      	adds	r3, #8
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44

      /* The current stage output is given as the input to the next stage */
      pIn = pDst;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Reset the output working pointer */
      pOut = pDst;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* decrement loop counter */
      stage--;
 80010c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c8:	3b01      	subs	r3, #1
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30

   } while (stage > 0U);
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d184      	bne.n	8000fdc <arm_biquad_cascade_df2T_f32+0x28>

}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3754      	adds	r7, #84	@ 0x54
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <arm_biquad_cascade_df2T_init_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	460b      	mov	r3, r1
 80010ee:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	7afa      	ldrb	r2, [r7, #11]
 80010f4:	701a      	strb	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	461a      	mov	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f008 f8bf 	bl	8009288 <memset>

  /* Assign state pointer */
  S->pState = pState;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	605a      	str	r2, [r3, #4]
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	460b      	mov	r3, r1
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e043      	b.n	80011b4 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	b29b      	uxth	r3, r3
 800113a:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	3301      	adds	r3, #1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	b29b      	uxth	r3, r3
 800114c:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	441a      	add	r2, r3
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	440b      	add	r3, r1
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	3301      	adds	r3, #1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	441a      	add	r2, r3
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	3301      	adds	r3, #1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	440b      	add	r3, r1
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]

    i += 2;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3302      	adds	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3b7      	bcc.n	800112c <arm_bitreversal_32+0x14>
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b0a0      	sub	sp, #128	@ 0x80
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80011da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 80011ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011f0:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 80011f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80011f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8001202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001208:	4413      	add	r3, r2
 800120a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800120c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001212:	e1b6      	b.n	8001582 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 800122c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8001232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8001238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 800123e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8001244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800124a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001250:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8001256:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 800125c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8001262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800126e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001274:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001278:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	1d1a      	adds	r2, r3, #4
 8001280:	603a      	str	r2, [r7, #0]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800128a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800128e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	1d1a      	adds	r2, r3, #4
 8001296:	603a      	str	r2, [r7, #0]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80012a0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80012a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	1d1a      	adds	r2, r3, #4
 80012ac:	603a      	str	r2, [r7, #0]
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80012b6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80012ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	603a      	str	r2, [r7, #0]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80012cc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80012d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 80012dc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80012e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80012ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80012f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80012fc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001300:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001308:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 800130c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001310:	edd7 7a02 	vldr	s15, [r7, #8]
 8001314:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001316:	1d1a      	adds	r2, r3, #4
 8001318:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8001322:	ed97 7a07 	vldr	s14, [r7, #28]
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800132c:	1d1a      	adds	r2, r3, #4
 800132e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001334:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001338:	ed97 7a08 	vldr	s14, [r7, #32]
 800133c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001342:	1d1a      	adds	r2, r3, #4
 8001344:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800134e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001352:	edd7 7a05 	vldr	s15, [r7, #20]
 8001356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001364:	ed97 7a02 	vldr	s14, [r7, #8]
 8001368:	edd7 7a06 	vldr	s15, [r7, #24]
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001374:	ed97 7a03 	vldr	s14, [r7, #12]
 8001378:	edd7 7a07 	vldr	s15, [r7, #28]
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001384:	ed97 7a04 	vldr	s14, [r7, #16]
 8001388:	edd7 7a08 	vldr	s15, [r7, #32]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001394:	ed97 7a05 	vldr	s14, [r7, #20]
 8001398:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80013a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a6:	1d1a      	adds	r2, r3, #4
 80013a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80013ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b0:	1d1a      	adds	r2, r3, #4
 80013b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80013b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013bc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 80013c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013cc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 80013d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013dc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 80013e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013ec:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80013f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80013f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013fa:	1d1a      	adds	r2, r3, #4
 80013fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80013fe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001402:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800140e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001410:	1d1a      	adds	r2, r3, #4
 8001412:	677a      	str	r2, [r7, #116]	@ 0x74
 8001414:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001418:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8001434:	edd7 7a03 	vldr	s15, [r7, #12]
 8001438:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8001454:	edd7 7a02 	vldr	s15, [r7, #8]
 8001458:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	67ba      	str	r2, [r7, #120]	@ 0x78
 800146a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800146e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800147a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800147c:	1d1a      	adds	r2, r3, #4
 800147e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001480:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001484:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001490:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001492:	1d1a      	adds	r2, r3, #4
 8001494:	673a      	str	r2, [r7, #112]	@ 0x70
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 800149a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800149c:	1d1a      	adds	r2, r3, #4
 800149e:	673a      	str	r2, [r7, #112]	@ 0x70
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 80014a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014a8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 80014b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014b8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 80014c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014c8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 80014d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014d8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 80014e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80014ea:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80014ee:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80014fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014fc:	1d1a      	adds	r2, r3, #4
 80014fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8001500:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001504:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8001520:	edd7 7a05 	vldr	s15, [r7, #20]
 8001524:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8001530:	edd7 7a05 	vldr	s15, [r7, #20]
 8001534:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8001540:	edd7 7a04 	vldr	s15, [r7, #16]
 8001544:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001552:	1d1a      	adds	r2, r3, #4
 8001554:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001556:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800155a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800155e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001562:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001568:	1d1a      	adds	r2, r3, #4
 800156a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800156c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001570:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800157c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800157e:	3b01      	subs	r3, #1
 8001580:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001584:	2b00      	cmp	r3, #0
 8001586:	f47f ae45 	bne.w	8001214 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800158a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800158c:	b299      	uxth	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	2302      	movs	r3, #2
 8001594:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001596:	f001 f80f 	bl	80025b8 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800159a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800159c:	b299      	uxth	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	2302      	movs	r3, #2
 80015a4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80015a6:	f001 f807 	bl	80025b8 <arm_radix8_butterfly_f32>
}
 80015aa:	bf00      	nop
 80015ac:	3780      	adds	r7, #128	@ 0x80
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b0ac      	sub	sp, #176	@ 0xb0
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80015c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 80015d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80015e0:	4413      	add	r3, r2
 80015e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 80015e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80015f0:	4413      	add	r3, r2
 80015f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80015fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8001600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001604:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8001606:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800160a:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800160c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001610:	3b04      	subs	r3, #4
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8001616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800161a:	3b04      	subs	r3, #4
 800161c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8001620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001624:	3b04      	subs	r3, #4
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 800162a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001634:	4413      	add	r3, r2
 8001636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001646:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800164a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800164e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8001652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800165c:	2302      	movs	r3, #2
 800165e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8001664:	2306      	movs	r3, #6
 8001666:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001690:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3304      	adds	r3, #4
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016a0:	3304      	adds	r3, #4
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3304      	adds	r3, #4
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ba:	3304      	adds	r3, #4
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80016c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016cc:	3304      	adds	r3, #4
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80016d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016de:	3304      	adds	r3, #4
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800170c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001728:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800172c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001730:	3304      	adds	r3, #4
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800173a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800173e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001742:	3304      	adds	r3, #4
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001750:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001754:	3304      	adds	r3, #4
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001790:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001794:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	1d1a      	adds	r2, r3, #4
 80017b0:	603a      	str	r2, [r7, #0]
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80017ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017be:	3304      	adds	r3, #4
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017d0:	3304      	adds	r3, #4
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	1d1a      	adds	r2, r3, #4
 80017da:	603a      	str	r2, [r7, #0]
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80017e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017e8:	1d1a      	adds	r2, r3, #4
 80017ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80017ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f0:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80017f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017f6:	1d1a      	adds	r2, r3, #4
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80017fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fe:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001804:	1d1a      	adds	r2, r3, #4
 8001806:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800180e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001812:	1d1a      	adds	r2, r3, #4
 8001814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800181c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800182a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800182e:	1d1a      	adds	r2, r3, #4
 8001830:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001840:	4413      	add	r3, r2
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8001846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800184e:	4413      	add	r3, r2
 8001850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8001854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800185c:	4413      	add	r3, r2
 800185e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8001862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001866:	3b02      	subs	r3, #2
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800186e:	e31c      	b.n	8001eaa <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001898:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3304      	adds	r3, #4
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018a8:	3304      	adds	r3, #4
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3304      	adds	r3, #4
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018c2:	3304      	adds	r3, #4
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018cc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80018d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018d4:	3304      	adds	r3, #4
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80018de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018e6:	3304      	adds	r3, #4
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80018f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001910:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001920:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001934:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001938:	3304      	adds	r3, #4
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001942:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001946:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800194a:	3304      	adds	r3, #4
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001954:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001958:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800195c:	3304      	adds	r3, #4
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800196e:	3304      	adds	r3, #4
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800197c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800198c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001998:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800199c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	1d1a      	adds	r2, r3, #4
 80019b8:	603a      	str	r2, [r7, #0]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80019c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019c6:	3304      	adds	r3, #4
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80019d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019d8:	3304      	adds	r3, #4
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	1d1a      	adds	r2, r3, #4
 80019e2:	603a      	str	r2, [r7, #0]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80019ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019f0:	3b04      	subs	r3, #4
 80019f2:	ed93 7a00 	vldr	s14, [r3]
 80019f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019fa:	3b04      	subs	r3, #4
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a0c:	3b04      	subs	r3, #4
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a16:	3b04      	subs	r3, #4
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8001a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8001a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a8c:	3b04      	subs	r3, #4
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aac:	3b04      	subs	r3, #4
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001acc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8001aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b00:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b10:	3b04      	subs	r3, #4
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b24:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8001b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b4c:	1f1a      	subs	r2, r3, #4
 8001b4e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b70:	3b04      	subs	r3, #4
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b7a:	1f1a      	subs	r2, r3, #4
 8001b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b8c:	1d1a      	adds	r2, r3, #4
 8001b8e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8001b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b9a:	1d1a      	adds	r2, r3, #4
 8001b9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8001ba4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8001bb4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bb8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8001bc4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bc8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8001bd4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bd8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8001be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001be8:	1d1a      	adds	r2, r3, #4
 8001bea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001bee:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001bf2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8001bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c02:	1d1a      	adds	r2, r3, #4
 8001c04:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001c08:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001c0c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8001c18:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c1c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c24:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8001c28:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c2c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8001c38:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c3c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c44:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8001c48:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c4c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8001c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c5c:	1f1a      	subs	r2, r3, #4
 8001c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001c62:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001c66:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c76:	1f1a      	subs	r2, r3, #4
 8001c78:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001c7c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001c80:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8001c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8001c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001cac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8001cbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8001ccc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cd0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8001cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8001cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cf0:	1d1a      	adds	r2, r3, #4
 8001cf2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cf6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001cfa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d0a:	1d1a      	adds	r2, r3, #4
 8001d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d10:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001d14:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001d20:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d24:	eef1 7a67 	vneg.f32	s15, s15
 8001d28:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8001d34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d38:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8001d44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d48:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8001d54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d58:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8001d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d68:	1f1a      	subs	r2, r3, #4
 8001d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001d6e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001d72:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d82:	1f1a      	subs	r2, r3, #4
 8001d84:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001d88:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001d8c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d94:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8001da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8001daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001db2:	4413      	add	r3, r2
 8001db4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8001dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dcc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8001dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ddc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8001de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8001df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dfc:	1d1a      	adds	r2, r3, #4
 8001dfe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e02:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001e06:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e16:	1d1a      	adds	r2, r3, #4
 8001e18:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e1c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e20:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001e2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e30:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8001e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e40:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e48:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8001e4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e50:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e58:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8001e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e60:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8001e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e70:	1f1a      	subs	r2, r3, #4
 8001e72:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001e76:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001e7a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e8a:	1f1a      	subs	r2, r3, #4
 8001e8c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001e90:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e94:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f47f acde 	bne.w	8001870 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	ed93 7a00 	vldr	s14, [r3]
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eec:	3304      	adds	r3, #4
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3304      	adds	r3, #4
 8001efe:	ed93 7a00 	vldr	s14, [r3]
 8001f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f06:	3304      	adds	r3, #4
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f18:	3304      	adds	r3, #4
 8001f1a:	ed93 7a00 	vldr	s14, [r3]
 8001f1e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f34:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f74:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f8e:	3304      	adds	r3, #4
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f98:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fc4:	ed93 7a00 	vldr	s14, [r3]
 8001fc8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fdc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fe4:	ed93 7a00 	vldr	s14, [r3]
 8001fe8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	1d1a      	adds	r2, r3, #4
 8001ffc:	603a      	str	r2, [r7, #0]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800200a:	3304      	adds	r3, #4
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800201c:	3304      	adds	r3, #4
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	1d1a      	adds	r2, r3, #4
 8002026:	603a      	str	r2, [r7, #0]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8002030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8002038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800203c:	3304      	adds	r3, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8002042:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002046:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8002052:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002056:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8002062:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002066:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8002072:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002076:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8002082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002086:	1d1a      	adds	r2, r3, #4
 8002088:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800208c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002090:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800209c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020a0:	1d1a      	adds	r2, r3, #4
 80020a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80020a6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80020aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80020b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 80020be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 80020c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020cc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 80020d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80020dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 80020e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 80020f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020fc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8002108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800210c:	1d1a      	adds	r2, r3, #4
 800210e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002112:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002116:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800212c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002130:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800213c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8002144:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 800214e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002152:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 800215e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002162:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 800216e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002172:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 800217e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002182:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 800218e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002198:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800219c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ac:	1d1a      	adds	r2, r3, #4
 80021ae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80021b2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80021b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80021c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021c6:	b299      	uxth	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	2304      	movs	r3, #4
 80021ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80021d0:	f000 f9f2 	bl	80025b8 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80021d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d8:	b299      	uxth	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	2304      	movs	r3, #4
 80021e0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80021e2:	f000 f9e9 	bl	80025b8 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80021e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ea:	b299      	uxth	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	2304      	movs	r3, #4
 80021f2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80021f4:	f000 f9e0 	bl	80025b8 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80021f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021fc:	b299      	uxth	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	2304      	movs	r3, #4
 8002204:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002206:	f000 f9d7 	bl	80025b8 <arm_radix8_butterfly_f32>
}
 800220a:	bf00      	nop
 800220c:	37b0      	adds	r7, #176	@ 0xb0
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	4611      	mov	r1, r2
 800221e:	461a      	mov	r2, r3
 8002220:	460b      	mov	r3, r1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	4613      	mov	r3, r2
 8002226:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d117      	bne.n	8002264 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3304      	adds	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e00d      	b.n	800225c <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eef1 7a67 	vneg.f32	s15, s15
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3308      	adds	r3, #8
 8002254:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3ed      	bcc.n	8002240 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800226a:	d040      	beq.n	80022ee <arm_cfft_f32+0xdc>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002272:	d845      	bhi.n	8002300 <arm_cfft_f32+0xee>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800227a:	d033      	beq.n	80022e4 <arm_cfft_f32+0xd2>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002282:	d83d      	bhi.n	8002300 <arm_cfft_f32+0xee>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228a:	d026      	beq.n	80022da <arm_cfft_f32+0xc8>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002292:	d835      	bhi.n	8002300 <arm_cfft_f32+0xee>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800229a:	d028      	beq.n	80022ee <arm_cfft_f32+0xdc>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a2:	d82d      	bhi.n	8002300 <arm_cfft_f32+0xee>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022aa:	d01b      	beq.n	80022e4 <arm_cfft_f32+0xd2>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b2:	d825      	bhi.n	8002300 <arm_cfft_f32+0xee>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b80      	cmp	r3, #128	@ 0x80
 80022b8:	d00f      	beq.n	80022da <arm_cfft_f32+0xc8>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b80      	cmp	r3, #128	@ 0x80
 80022be:	d81f      	bhi.n	8002300 <arm_cfft_f32+0xee>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b40      	cmp	r3, #64	@ 0x40
 80022c4:	d013      	beq.n	80022ee <arm_cfft_f32+0xdc>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b40      	cmp	r3, #64	@ 0x40
 80022ca:	d819      	bhi.n	8002300 <arm_cfft_f32+0xee>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d003      	beq.n	80022da <arm_cfft_f32+0xc8>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d005      	beq.n	80022e4 <arm_cfft_f32+0xd2>
 80022d8:	e012      	b.n	8002300 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7fe ff74 	bl	80011ca <arm_cfft_radix8by2_f32>
    break;
 80022e2:	e00d      	b.n	8002300 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff f963 	bl	80015b2 <arm_cfft_radix8by4_f32>
    break;
 80022ec:	e008      	b.n	8002300 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	b299      	uxth	r1, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	2301      	movs	r3, #1
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f000 f95d 	bl	80025b8 <arm_radix8_butterfly_f32>
    break;
 80022fe:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8999      	ldrh	r1, [r3, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	461a      	mov	r2, r3
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7fe ff01 	bl	8001118 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d130      	bne.n	800237e <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800232a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800232e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e01c      	b.n	8002376 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1d1a      	adds	r2, r3, #4
 8002340:	61ba      	str	r2, [r7, #24]
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	edd7 7a04 	vldr	s15, [r7, #16]
 800234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234e:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	eeb1 7a67 	vneg.f32	s14, s15
 800235c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3304      	adds	r3, #4
 800236e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3de      	bcc.n	800233c <arm_cfft_f32+0x12a>
    }
  }
}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <arm_cfft_init_2048_f32+0x44>)
 80023a4:	899a      	ldrh	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	819a      	strh	r2, [r3, #12]
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <arm_cfft_init_2048_f32+0x44>)
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <arm_cfft_init_2048_f32+0x44>)
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	0801f224 	.word	0x0801f224

080023d0 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <arm_cfft_init_1024_f32+0x44>)
 80023ec:	899a      	ldrh	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	819a      	strh	r2, [r3, #12]
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <arm_cfft_init_1024_f32+0x44>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <arm_cfft_init_1024_f32+0x44>)
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	0801f214 	.word	0x0801f214

08002418 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <arm_cfft_init_512_f32+0x44>)
 8002434:	899a      	ldrh	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	819a      	strh	r2, [r3, #12]
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <arm_cfft_init_512_f32+0x44>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <arm_cfft_init_512_f32+0x44>)
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	0801f204 	.word	0x0801f204

08002460 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <arm_cfft_init_256_f32+0x44>)
 800247c:	899a      	ldrh	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	819a      	strh	r2, [r3, #12]
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <arm_cfft_init_256_f32+0x44>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <arm_cfft_init_256_f32+0x44>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	0801f1f4 	.word	0x0801f1f4

080024a8 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <arm_cfft_init_128_f32+0x40>)
 80024c2:	899a      	ldrh	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	819a      	strh	r2, [r3, #12]
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <arm_cfft_init_128_f32+0x40>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <arm_cfft_init_128_f32+0x40>)
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	0801f1e4 	.word	0x0801f1e4

080024ec <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2240      	movs	r2, #64	@ 0x40
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <arm_cfft_init_64_f32+0x40>)
 8002506:	899a      	ldrh	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	819a      	strh	r2, [r3, #12]
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <arm_cfft_init_64_f32+0x40>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <arm_cfft_init_64_f32+0x40>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	0801f1d4 	.word	0x0801f1d4

08002530 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <arm_cfft_init_32_f32+0x40>)
 800254a:	899a      	ldrh	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	819a      	strh	r2, [r3, #12]
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <arm_cfft_init_32_f32+0x40>)
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <arm_cfft_init_32_f32+0x40>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	0801f1c4 	.word	0x0801f1c4

08002574 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2210      	movs	r2, #16
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <arm_cfft_init_16_f32+0x40>)
 800258e:	899a      	ldrh	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	819a      	strh	r2, [r3, #12]
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <arm_cfft_init_16_f32+0x40>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <arm_cfft_init_16_f32+0x40>)
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	0801f1b4 	.word	0x0801f1b4

080025b8 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b0bd      	sub	sp, #244	@ 0xf4
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
 80025c8:	4613      	mov	r3, r2
 80025ca:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <arm_radix8_butterfly_f32+0x3c>)
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 80025d2:	897b      	ldrh	r3, [r7, #10]
 80025d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 80025e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025f0:	e002      	b.n	80025f8 <arm_radix8_butterfly_f32+0x40>
 80025f2:	bf00      	nop
 80025f4:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80025f8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80025fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002600:	4413      	add	r3, r2
 8002602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8002606:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800260e:	4413      	add	r3, r2
 8002610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8002614:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800261c:	4413      	add	r3, r2
 800261e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8002622:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262a:	4413      	add	r3, r2
 800262c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8002630:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002638:	4413      	add	r3, r2
 800263a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 800263e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002646:	4413      	add	r3, r2
 8002648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 800264c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002654:	4413      	add	r3, r2
 8002656:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800265a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	ed93 7a00 	vldr	s14, [r3]
 8002668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800267e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	ed93 7a00 	vldr	s14, [r3]
 800268c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80026a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	ed93 7a00 	vldr	s14, [r3]
 80026b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80026c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	ed93 7a00 	vldr	s14, [r3]
 80026d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80026ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	ed93 7a00 	vldr	s14, [r3]
 80026f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800270e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	ed93 7a00 	vldr	s14, [r3]
 800271c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	ed93 7a00 	vldr	s14, [r3]
 8002740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002776:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 800277a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800277e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002786:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 800278a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800278e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 800279a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800279e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 80027aa:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80027ae:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 80027ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80027c8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80027cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80027d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80027e2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80027ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	3304      	adds	r3, #4
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	3304      	adds	r3, #4
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4413      	add	r3, r2
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002812:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	3304      	adds	r3, #4
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	ed93 7a00 	vldr	s14, [r3]
 8002826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	3304      	adds	r3, #4
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3304      	adds	r3, #4
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	ed93 7a00 	vldr	s14, [r3]
 800284e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	3304      	adds	r3, #4
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	3304      	adds	r3, #4
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	ed93 7a00 	vldr	s14, [r3]
 8002876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3304      	adds	r3, #4
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800288e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3304      	adds	r3, #4
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	3304      	adds	r3, #4
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80028b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	3304      	adds	r3, #4
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	ed93 7a00 	vldr	s14, [r3]
 80028c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	3304      	adds	r3, #4
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028da:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80028de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	3304      	adds	r3, #4
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	ed93 7a00 	vldr	s14, [r3]
 80028ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3304      	adds	r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	3304      	adds	r3, #4
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	ed93 7a00 	vldr	s14, [r3]
 8002916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 800292e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002932:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 800293e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002942:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 800294e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002952:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 800295e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002962:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800296e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3304      	adds	r3, #4
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800297e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800298a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3304      	adds	r3, #4
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800299a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80029a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80029b4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80029ce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80029da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	3304      	adds	r3, #4
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80029ea:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80029f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	3304      	adds	r3, #4
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002a06:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002a12:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002a16:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8002a2a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002a2e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a36:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8002a42:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002a46:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8002a5a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002a5e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a66:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8002a72:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002a76:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8002a82:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002a86:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8002a92:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002a96:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8002aa2:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002aa6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aae:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8002ab2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002ab6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8002ac2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002ac6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8002ad2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002ad6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8002ae2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002ae6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aee:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002b00:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002b1a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002b34:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002b4e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3304      	adds	r3, #4
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002b6a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002b86:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002b92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002ba2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002baa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002bae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002bbe:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002bca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002bde:	429a      	cmp	r2, r3
 8002be0:	f4ff ad0a 	bcc.w	80025f8 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	f240 84e3 	bls.w	80035b4 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002c00:	4413      	add	r3, r2
 8002c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8002c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8002c0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002c0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c10:	4413      	add	r3, r2
 8002c12:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8002c14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c18:	4413      	add	r3, r2
 8002c1a:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8002c1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c20:	4413      	add	r3, r2
 8002c22:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8002c24:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c28:	4413      	add	r3, r2
 8002c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8002c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c30:	4413      	add	r3, r2
 8002c32:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8002c34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c38:	4413      	add	r3, r2
 8002c3a:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8002c3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8002c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8002c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8002c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8002c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8002c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8002c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002c92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	3304      	adds	r3, #4
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	3304      	adds	r3, #4
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	3304      	adds	r3, #4
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8002cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002cfe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d06:	4413      	add	r3, r2
 8002d08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8002d0c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d14:	4413      	add	r3, r2
 8002d16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8002d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d22:	4413      	add	r3, r2
 8002d24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8002d28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d30:	4413      	add	r3, r2
 8002d32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8002d36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	4413      	add	r3, r2
 8002d40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8002d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8002d52:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d80:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002d84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	ed93 7a00 	vldr	s14, [r3]
 8002d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	ed93 7a00 	vldr	s14, [r3]
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dec:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002df0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	ed93 7a00 	vldr	s14, [r3]
 8002dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	ed93 7a00 	vldr	s14, [r3]
 8002e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e34:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8002e80:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002e84:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8002e90:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002e94:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8002ea0:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002ea4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eac:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8002eb0:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002eb4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebc:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002ece:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002eda:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002ede:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	3304      	adds	r3, #4
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002f12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	3304      	adds	r3, #4
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	3304      	adds	r3, #4
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3304      	adds	r3, #4
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	3304      	adds	r3, #4
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3304      	adds	r3, #4
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	ed93 7a00 	vldr	s14, [r3]
 8002f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3304      	adds	r3, #4
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002f8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3304      	adds	r3, #4
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	3304      	adds	r3, #4
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	ed93 7a00 	vldr	s14, [r3]
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	3304      	adds	r3, #4
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	ed93 7a00 	vldr	s14, [r3]
 8002fea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003002:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	3304      	adds	r3, #4
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	ed93 7a00 	vldr	s14, [r3]
 8003012:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3304      	adds	r3, #4
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003026:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 800302a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800302e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 800303a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800303e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 800304a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800304e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003056:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 800305a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800305e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003066:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 800306a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800306e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 800307a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800307e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800308a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3304      	adds	r3, #4
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800309a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80030a6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 80030b6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80030ba:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 80030c6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80030ca:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80030ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 80030d6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80030da:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80030e6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80030ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80030f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80030fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003106:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800310a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	ed97 7a07 	vldr	s14, [r7, #28]
 8003124:	edd7 7a06 	vldr	s15, [r7, #24]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	3304      	adds	r3, #4
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003140:	edd7 7a04 	vldr	s15, [r7, #16]
 8003144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003148:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800314c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003150:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003158:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800315c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003160:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003168:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800316c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003170:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003178:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800317c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003180:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003188:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800318c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	ed97 7a07 	vldr	s14, [r7, #28]
 800319a:	edd7 7a06 	vldr	s15, [r7, #24]
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80031a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	3304      	adds	r3, #4
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80031b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80031c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80031c6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80031d2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80031d6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80031e2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80031e6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80031f2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80031f6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003210:	edd7 7a06 	vldr	s15, [r7, #24]
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800321c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	3304      	adds	r3, #4
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	ed97 7a05 	vldr	s14, [r7, #20]
 800322c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003234:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003238:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800323c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003244:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 8003250:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003254:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003264:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8003268:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800326c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8003280:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003284:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8003298:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800329c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80032a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 80032a8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80032ac:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 80032b8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80032bc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80032c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 80032c8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80032cc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80032d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 80032d8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80032dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 80032e8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80032ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 80032f8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80032fc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003304:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8003308:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800330c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8003318:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800331c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003324:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8003328:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800332c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8003338:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800333c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 8003348:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800334c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003354:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 8003358:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800335c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8003368:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800336c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003374:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8003378:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800337c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8003388:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800338c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003394:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8003398:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800339c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80033a8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033ac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80033b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80033b8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80033bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80033c8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033cc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80033d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4413      	add	r3, r2
 80033e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80033e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80033f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	3304      	adds	r3, #4
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003402:	edd7 7a04 	vldr	s15, [r7, #16]
 8003406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800340e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003412:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800341e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003422:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800342e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003432:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800343e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003442:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800344e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	ed97 7a07 	vldr	s14, [r7, #28]
 800345c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	3304      	adds	r3, #4
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	ed97 7a05 	vldr	s14, [r7, #20]
 8003478:	edd7 7a04 	vldr	s15, [r7, #16]
 800347c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003480:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003484:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003488:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003494:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003498:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80034a4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80034a8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80034ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80034b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80034b8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80034d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80034d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80034de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	3304      	adds	r3, #4
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4413      	add	r3, r2
 80034ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80034ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80034fa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80034fe:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800350a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800350e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800351a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800351e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800352a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800352e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800353a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	ed97 7a07 	vldr	s14, [r7, #28]
 8003548:	edd7 7a06 	vldr	s15, [r7, #24]
 800354c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003550:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	3304      	adds	r3, #4
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	ed97 7a05 	vldr	s14, [r7, #20]
 8003564:	edd7 7a04 	vldr	s15, [r7, #16]
 8003568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003570:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003578:	4413      	add	r3, r2
 800357a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003584:	429a      	cmp	r2, r3
 8003586:	f4ff abba 	bcc.w	8002cfe <arm_radix8_butterfly_f32+0x746>

         j++;
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358e:	3301      	adds	r3, #1
 8003590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8003594:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	429a      	cmp	r2, r3
 800359e:	f4ff ab2c 	bcc.w	8002bfa <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80035a2:	893b      	ldrh	r3, [r7, #8]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ac:	2b07      	cmp	r3, #7
 80035ae:	f63f a813 	bhi.w	80025d8 <arm_radix8_butterfly_f32+0x20>
}
 80035b2:	e000      	b.n	80035b6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80035b4:	bf00      	nop
}
 80035b6:	bf00      	nop
 80035b8:	37f4      	adds	r7, #244	@ 0xf4
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <arm_cmplx_mag_squared_f32>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_squared_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80035d4:	e01b      	b.n	800360e <arm_cmplx_mag_squared_f32+0x4a>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1d1a      	adds	r2, r3, #4
 80035da:	60fa      	str	r2, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]
    imag = *pSrc++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	60fa      	str	r2, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]

    /* store result in destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 80035ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	60ba      	str	r2, [r7, #8]
 8003600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003604:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3b01      	subs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e0      	bne.n	80035d6 <arm_cmplx_mag_squared_f32+0x12>
  }

}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3724      	adds	r7, #36	@ 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003622:	b480      	push	{r7}
 8003624:	b095      	sub	sp, #84	@ 0x54
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8003644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 800364a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8003652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	3304      	adds	r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8003660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 800366a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800366c:	1d1a      	adds	r2, r3, #4
 800366e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8003674:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003678:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800367c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003680:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8003684:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003688:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8003694:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003698:	edd7 7a08 	vldr	s15, [r7, #32]
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ae:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80036b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80036b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80036ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036cc:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80036d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4413      	add	r3, r2
 80036d8:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 80036da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036dc:	3308      	adds	r3, #8
 80036de:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	3304      	adds	r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 80036e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 80036ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 80036f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f6:	3304      	adds	r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 80036fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8003706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8003710:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003714:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8003720:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003724:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372c:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003730:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003734:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373c:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003740:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003744:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374c:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003750:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003754:	edd7 7a08 	vldr	s15, [r7, #32]
 8003758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375c:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8003760:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003764:	edd7 7a08 	vldr	s15, [r7, #32]
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8003770:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003774:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800377c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003784:	edd7 7a04 	vldr	s15, [r7, #16]
 8003788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800379e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80037a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80037a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1d1a      	adds	r2, r3, #4
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c8:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80037cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ce:	3308      	adds	r3, #8
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80037d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d4:	3b08      	subs	r3, #8
 80037d6:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80037d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037da:	3b01      	subs	r3, #1
 80037dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 80037de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f73f af7d 	bgt.w	80036e0 <stage_rfft_f32+0xbe>
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	3754      	adds	r7, #84	@ 0x54
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b095      	sub	sp, #84	@ 0x54
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	3b01      	subs	r3, #1
 8003814:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800381c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381e:	3304      	adds	r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8003824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003826:	3308      	adds	r3, #8
 8003828:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800382a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800382e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1d1a      	adds	r2, r3, #4
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8003848:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800384c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800385e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003862:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8003866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	4413      	add	r3, r2
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 8003870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003872:	3308      	adds	r3, #8
 8003874:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 8003876:	e07e      	b.n	8003976 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8003878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387a:	3304      	adds	r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 8003880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 8003886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	3304      	adds	r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 8003894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	64ba      	str	r2, [r7, #72]	@ 0x48
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800389e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a0:	1d1a      	adds	r2, r3, #4
 80038a2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80038a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80038ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80038b8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80038bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80038c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80038d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80038dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80038e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80038e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80038ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80038f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003904:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003908:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800390c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003914:	edd7 7a07 	vldr	s15, [r7, #28]
 8003918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800391c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800392e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003932:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003936:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800393a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800393e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003942:	edd7 7a05 	vldr	s15, [r7, #20]
 8003946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800394a:	edd7 7a04 	vldr	s15, [r7, #16]
 800394e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800395c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003960:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	3308      	adds	r3, #8
 8003968:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	3b08      	subs	r3, #8
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8003970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003972:	3b01      	subs	r3, #1
 8003974:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 8003976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003978:	2b00      	cmp	r3, #0
 800397a:	f73f af7d 	bgt.w	8003878 <merge_rfft_f32+0x84>
   }

}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3754      	adds	r7, #84	@ 0x54
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff ff23 	bl	80037f4 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	2301      	movs	r3, #1
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f7fe fc2c 	bl	8002212 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80039ba:	e00a      	b.n	80039d2 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	2301      	movs	r3, #1
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7fe fc25 	bl	8002212 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fe28 	bl	8003622 <stage_rfft_f32>
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) 

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <arm_rfft_fast_init_32_f32+0x14>
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ee:	e013      	b.n	8003a18 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fdbe 	bl	8002574 <arm_cfft_init_16_f32>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80039fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a08:	e006      	b.n	8003a18 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a03      	ldr	r2, [pc, #12]	@ (8003a20 <arm_rfft_fast_init_32_f32+0x44>)
 8003a14:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	08017234 	.word	0x08017234

08003a24 <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <arm_rfft_fast_init_64_f32+0x14>
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a36:	e013      	b.n	8003a60 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fd78 	bl	8002530 <arm_cfft_init_32_f32>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8003a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a50:	e006      	b.n	8003a60 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	@ 0x40
 8003a56:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <arm_rfft_fast_init_64_f32+0x44>)
 8003a5c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	080172b4 	.word	0x080172b4

08003a6c <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <arm_rfft_fast_init_128_f32+0x14>
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a7e:	e013      	b.n	8003aa8 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fd32 	bl	80024ec <arm_cfft_init_64_f32>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a98:	e006      	b.n	8003aa8 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2280      	movs	r2, #128	@ 0x80
 8003a9e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a03      	ldr	r2, [pc, #12]	@ (8003ab0 <arm_rfft_fast_init_128_f32+0x44>)
 8003aa4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	080173b4 	.word	0x080173b4

08003ab4 <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <arm_rfft_fast_init_256_f32+0x14>
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ac6:	e014      	b.n	8003af2 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fcec 	bl	80024a8 <arm_cfft_init_128_f32>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae0:	e007      	b.n	8003af2 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ae8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a03      	ldr	r2, [pc, #12]	@ (8003afc <arm_rfft_fast_init_256_f32+0x48>)
 8003aee:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	080175b4 	.word	0x080175b4

08003b00 <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <arm_rfft_fast_init_512_f32+0x14>
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b12:	e014      	b.n	8003b3e <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fca2 	bl	8002460 <arm_cfft_init_256_f32>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2c:	e007      	b.n	8003b3e <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b34:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a03      	ldr	r2, [pc, #12]	@ (8003b48 <arm_rfft_fast_init_512_f32+0x48>)
 8003b3a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	080179b4 	.word	0x080179b4

08003b4c <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <arm_rfft_fast_init_1024_f32+0x14>
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b5e:	e014      	b.n	8003b8a <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fc58 	bl	8002418 <arm_cfft_init_512_f32>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8003b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b78:	e007      	b.n	8003b8a <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b80:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a03      	ldr	r2, [pc, #12]	@ (8003b94 <arm_rfft_fast_init_1024_f32+0x48>)
 8003b86:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	080181b4 	.word	0x080181b4

08003b98 <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <arm_rfft_fast_init_2048_f32+0x14>
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003baa:	e014      	b.n	8003bd6 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fc0e 	bl	80023d0 <arm_cfft_init_1024_f32>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8003bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc4:	e007      	b.n	8003bd6 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bcc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a03      	ldr	r2, [pc, #12]	@ (8003be0 <arm_rfft_fast_init_2048_f32+0x48>)
 8003bd2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	080191b4 	.word	0x080191b4

08003be4 <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <arm_rfft_fast_init_4096_f32+0x14>
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bf6:	e014      	b.n	8003c22 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fbc4 	bl	8002388 <arm_cfft_init_2048_f32>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c10:	e007      	b.n	8003c22 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c18:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a03      	ldr	r2, [pc, #12]	@ (8003c2c <arm_rfft_fast_init_4096_f32+0x48>)
 8003c1e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	0801b1b4 	.word	0x0801b1b4

08003c30 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d023      	beq.n	8003c8c <arm_rfft_fast_init_f32+0x5c>
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c48:	dc50      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c4e:	d023      	beq.n	8003c98 <arm_rfft_fast_init_f32+0x68>
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c54:	dc4a      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5a:	d023      	beq.n	8003ca4 <arm_rfft_fast_init_f32+0x74>
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c60:	dc44      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c66:	d023      	beq.n	8003cb0 <arm_rfft_fast_init_f32+0x80>
 8003c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c6c:	dc3e      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c72:	d023      	beq.n	8003cbc <arm_rfft_fast_init_f32+0x8c>
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c78:	dc38      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d024      	beq.n	8003cc8 <arm_rfft_fast_init_f32+0x98>
 8003c7e:	2b80      	cmp	r3, #128	@ 0x80
 8003c80:	dc34      	bgt.n	8003cec <arm_rfft_fast_init_f32+0xbc>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d02c      	beq.n	8003ce0 <arm_rfft_fast_init_f32+0xb0>
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d024      	beq.n	8003cd4 <arm_rfft_fast_init_f32+0xa4>
 8003c8a:	e02f      	b.n	8003cec <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ffa9 	bl	8003be4 <arm_rfft_fast_init_4096_f32>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]
    break;
 8003c96:	e02c      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff7d 	bl	8003b98 <arm_rfft_fast_init_2048_f32>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8003ca2:	e026      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff51 	bl	8003b4c <arm_rfft_fast_init_1024_f32>
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]
    break;
 8003cae:	e020      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff25 	bl	8003b00 <arm_rfft_fast_init_512_f32>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8003cba:	e01a      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fef9 	bl	8003ab4 <arm_rfft_fast_init_256_f32>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8003cc6:	e014      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fecf 	bl	8003a6c <arm_rfft_fast_init_128_f32>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8003cd2:	e00e      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fea5 	bl	8003a24 <arm_rfft_fast_init_64_f32>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8003cde:	e008      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fe7b 	bl	80039dc <arm_rfft_fast_init_32_f32>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8003cea:	e002      	b.n	8003cf2 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cf0:	e001      	b.n	8003cf6 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <stdio.h>
int __io_putchar(int ch) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  extern UART_HandleTypeDef huart2;
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8003d08:	1d39      	adds	r1, r7, #4
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4804      	ldr	r0, [pc, #16]	@ (8003d20 <__io_putchar+0x20>)
 8003d10:	f004 f976 	bl	8008000 <HAL_UART_Transmit>
  return ch;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000398 	.word	0x20000398

08003d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d2a:	f001 f993 	bl	8005054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d2e:	f000 f88d 	bl	8003e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d32:	f000 fa17 	bl	8004164 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d36:	f000 f9df 	bl	80040f8 <MX_DMA_Init>
  MX_ADC3_Init();
 8003d3a:	f000 f8e7 	bl	8003f0c <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8003d3e:	f000 f9b1 	bl	80040a4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8003d42:	f000 f935 	bl	8003fb0 <MX_DAC_Init>
  MX_TIM8_Init();
 8003d46:	f000 f95d 	bl	8004004 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buf, Buffer_Length);
 8003d4a:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <main+0xe8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	492f      	ldr	r1, [pc, #188]	@ (8003e10 <main+0xec>)
 8003d52:	4830      	ldr	r0, [pc, #192]	@ (8003e14 <main+0xf0>)
 8003d54:	f001 fb44 	bl	80053e0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	482f      	ldr	r0, [pc, #188]	@ (8003e18 <main+0xf4>)
 8003d5c:	f002 f855 	bl	8005e0a <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim8);
 8003d60:	482e      	ldr	r0, [pc, #184]	@ (8003e1c <main+0xf8>)
 8003d62:	f003 fe11 	bl	8007988 <HAL_TIM_Base_Start>
  arm_biquad_cascade_df2T_init_f32(&biquadS, NUM_STAGES,biquad_coeffs,biquad_state);
 8003d66:	4b2e      	ldr	r3, [pc, #184]	@ (8003e20 <main+0xfc>)
 8003d68:	4a2e      	ldr	r2, [pc, #184]	@ (8003e24 <main+0x100>)
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	482e      	ldr	r0, [pc, #184]	@ (8003e28 <main+0x104>)
 8003d6e:	f7fd f9b7 	bl	80010e0 <arm_biquad_cascade_df2T_init_f32>
  arm_rfft_fast_init_f32(&rfft, NFFT);   // Init FFT
 8003d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d76:	482d      	ldr	r0, [pc, #180]	@ (8003e2c <main+0x108>)
 8003d78:	f7ff ff5a 	bl	8003c30 <arm_rfft_fast_init_f32>
  init_hamming();
 8003d7c:	f000 fc9c 	bl	80046b8 <init_hamming>
  memset(psd_accum, 0, sizeof(psd_accum));
 8003d80:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003d84:	2100      	movs	r1, #0
 8003d86:	482a      	ldr	r0, [pc, #168]	@ (8003e30 <main+0x10c>)
 8003d88:	f005 fa7e 	bl	8009288 <memset>
  K = 0;
 8003d8c:	4b29      	ldr	r3, [pc, #164]	@ (8003e34 <main+0x110>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
//  init_hann_window();                       // Fill hann[] table /////// to go back to previous version uncomment
  printf("delta,theta,alpha,beta\n");
 8003d92:	4829      	ldr	r0, [pc, #164]	@ (8003e38 <main+0x114>)
 8003d94:	f005 fa70 	bl	8009278 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buffer_ready){
 8003d98:	4b28      	ldr	r3, [pc, #160]	@ (8003e3c <main+0x118>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0fa      	beq.n	8003d98 <main+0x74>
		  Dc_Removal(adc_buf, work_buf1, Buffer_Length); // the processing that we do
 8003da2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <main+0xe8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4925      	ldr	r1, [pc, #148]	@ (8003e40 <main+0x11c>)
 8003daa:	4819      	ldr	r0, [pc, #100]	@ (8003e10 <main+0xec>)
 8003dac:	f000 fa56 	bl	800425c <Dc_Removal>
		  process_block(work_buf1, out_buf,Buffer_Length);
 8003db0:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <main+0xe8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4923      	ldr	r1, [pc, #140]	@ (8003e44 <main+0x120>)
 8003db8:	4821      	ldr	r0, [pc, #132]	@ (8003e40 <main+0x11c>)
 8003dba:	f000 fad7 	bl	800436c <process_block>

//		  ADC_DAC_test(adc_buf, out_buf, Buffer_Length);
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4815      	ldr	r0, [pc, #84]	@ (8003e18 <main+0xf4>)
 8003dc2:	f002 f939 	bl	8006038 <HAL_DAC_Stop_DMA>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)out_buf, Buffer_Length, DAC_ALIGN_12B_R);
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <main+0xe8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	9200      	str	r2, [sp, #0]
 8003dce:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <main+0x120>)
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4811      	ldr	r0, [pc, #68]	@ (8003e18 <main+0xf4>)
 8003dd4:	f002 f870 	bl	8005eb8 <HAL_DAC_Start_DMA>
//		  //// uncomment for the previus fft block
//		  my_fft_block(out_buf,hann,k_max); //FFT function
//		  Bandpower(mag);
//		  EEG_OUT();

		  for (size_t i=0; i<Buffer_Length; i++){
 8003dd8:	2300      	movs	r3, #0
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	e00c      	b.n	8003df8 <main+0xd4>
		      welch_push_sample(out_f[i]);   // analyze filtered float stream
 8003dde:	4a1a      	ldr	r2, [pc, #104]	@ (8003e48 <main+0x124>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	eeb0 0a67 	vmov.f32	s0, s15
 8003dee:	f000 fc29 	bl	8004644 <welch_push_sample>
		  for (size_t i=0; i<Buffer_Length; i++){
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3301      	adds	r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <main+0xe8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3ed      	bcc.n	8003dde <main+0xba>
		  }



		  buffer_ready  = 0;
 8003e02:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <main+0x118>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
	  if (buffer_ready){
 8003e08:	e7c6      	b.n	8003d98 <main+0x74>
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	200003e0 	.word	0x200003e0
 8003e14:	20000234 	.word	0x20000234
 8003e18:	200002dc 	.word	0x200002dc
 8003e1c:	20000350 	.word	0x20000350
 8003e20:	20000fe4 	.word	0x20000fe4
 8003e24:	20000008 	.word	0x20000008
 8003e28:	20000ffc 	.word	0x20000ffc
 8003e2c:	2000282c 	.word	0x2000282c
 8003e30:	20003848 	.word	0x20003848
 8003e34:	20002828 	.word	0x20002828
 8003e38:	0800bcb0 	.word	0x0800bcb0
 8003e3c:	20000fe1 	.word	0x20000fe1
 8003e40:	200007e0 	.word	0x200007e0
 8003e44:	20000be0 	.word	0x20000be0
 8003e48:	20001808 	.word	0x20001808

08003e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b094      	sub	sp, #80	@ 0x50
 8003e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e52:	f107 031c 	add.w	r3, r7, #28
 8003e56:	2234      	movs	r2, #52	@ 0x34
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 fa14 	bl	8009288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <SystemClock_Config+0xb8>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	4a22      	ldr	r2, [pc, #136]	@ (8003f04 <SystemClock_Config+0xb8>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <SystemClock_Config+0xb8>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <SystemClock_Config+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003e98:	4a1b      	ldr	r2, [pc, #108]	@ (8003f08 <SystemClock_Config+0xbc>)
 8003e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <SystemClock_Config+0xbc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fa73 	bl	80073ac <HAL_RCC_OscConfig>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003ecc:	f000 fdde 	bl	8004a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ee4:	f107 0308 	add.w	r3, r7, #8
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 ff9a 	bl	8006e24 <HAL_RCC_ClockConfig>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003ef6:	f000 fdc9 	bl	8004a8c <Error_Handler>
  }
}
 8003efa:	bf00      	nop
 8003efc:	3750      	adds	r7, #80	@ 0x50
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000

08003f0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f12:	463b      	mov	r3, r7
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003f1e:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f20:	4a22      	ldr	r2, [pc, #136]	@ (8003fac <MX_ADC3_Init+0xa0>)
 8003f22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003f32:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003f46:	4b18      	ldr	r3, [pc, #96]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f50:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003f5c:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003f62:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003f70:	480d      	ldr	r0, [pc, #52]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f72:	f001 f8e1 	bl	8005138 <HAL_ADC_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8003f7c:	f000 fd86 	bl	8004a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003f80:	230d      	movs	r3, #13
 8003f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f88:	2307      	movs	r3, #7
 8003f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <MX_ADC3_Init+0x9c>)
 8003f92:	f001 fb4d 	bl	8005630 <HAL_ADC_ConfigChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8003f9c:	f000 fd76 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000234 	.word	0x20000234
 8003fac:	40012200 	.word	0x40012200

08003fb0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <MX_DAC_Init+0x4c>)
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8004000 <MX_DAC_Init+0x50>)
 8003fc2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003fc4:	480d      	ldr	r0, [pc, #52]	@ (8003ffc <MX_DAC_Init+0x4c>)
 8003fc6:	f001 fefe 	bl	8005dc6 <HAL_DAC_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003fd0:	f000 fd5c 	bl	8004a8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4806      	ldr	r0, [pc, #24]	@ (8003ffc <MX_DAC_Init+0x4c>)
 8003fe4:	f002 f893 	bl	800610e <HAL_DAC_ConfigChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003fee:	f000 fd4d 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200002dc 	.word	0x200002dc
 8004000:	40007400 	.word	0x40007400

08004004 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004018:	463b      	mov	r3, r7
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <MX_TIM8_Init+0x98>)
 8004022:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <MX_TIM8_Init+0x9c>)
 8004024:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15999;
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <MX_TIM8_Init+0x98>)
 8004028:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800402c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402e:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <MX_TIM8_Init+0x98>)
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8004034:	4b19      	ldr	r3, [pc, #100]	@ (800409c <MX_TIM8_Init+0x98>)
 8004036:	2201      	movs	r2, #1
 8004038:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <MX_TIM8_Init+0x98>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004040:	4b16      	ldr	r3, [pc, #88]	@ (800409c <MX_TIM8_Init+0x98>)
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <MX_TIM8_Init+0x98>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800404c:	4813      	ldr	r0, [pc, #76]	@ (800409c <MX_TIM8_Init+0x98>)
 800404e:	f003 fc4b 	bl	80078e8 <HAL_TIM_Base_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8004058:	f000 fd18 	bl	8004a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004062:	f107 0308 	add.w	r3, r7, #8
 8004066:	4619      	mov	r1, r3
 8004068:	480c      	ldr	r0, [pc, #48]	@ (800409c <MX_TIM8_Init+0x98>)
 800406a:	f003 fcf5 	bl	8007a58 <HAL_TIM_ConfigClockSource>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8004074:	f000 fd0a 	bl	8004a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004078:	2320      	movs	r3, #32
 800407a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004080:	463b      	mov	r3, r7
 8004082:	4619      	mov	r1, r3
 8004084:	4805      	ldr	r0, [pc, #20]	@ (800409c <MX_TIM8_Init+0x98>)
 8004086:	f003 feef 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8004090:	f000 fcfc 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000350 	.word	0x20000350
 80040a0:	40010400 	.word	0x40010400

080040a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <MX_USART2_UART_Init+0x50>)
 80040ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040ca:	220c      	movs	r2, #12
 80040cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ce:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d4:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040da:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040dc:	f003 ff40 	bl	8007f60 <HAL_UART_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040e6:	f000 fcd1 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000398 	.word	0x20000398
 80040f4:	40004400 	.word	0x40004400

080040f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	4b17      	ldr	r3, [pc, #92]	@ (8004160 <MX_DMA_Init+0x68>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <MX_DMA_Init+0x68>)
 8004108:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800410c:	6313      	str	r3, [r2, #48]	@ 0x30
 800410e:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <MX_DMA_Init+0x68>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <MX_DMA_Init+0x68>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <MX_DMA_Init+0x68>)
 8004124:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004128:	6313      	str	r3, [r2, #48]	@ 0x30
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <MX_DMA_Init+0x68>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2010      	movs	r0, #16
 800413c:	f001 fe0d 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004140:	2010      	movs	r0, #16
 8004142:	f001 fe26 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	2038      	movs	r0, #56	@ 0x38
 800414c:	f001 fe05 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004150:	2038      	movs	r0, #56	@ 0x38
 8004152:	f001 fe1e 	bl	8005d92 <HAL_NVIC_EnableIRQ>

}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416a:	f107 030c 	add.w	r3, r7, #12
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b18      	ldr	r3, [pc, #96]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	4a17      	ldr	r2, [pc, #92]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6313      	str	r3, [r2, #48]	@ 0x30
 800418a:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	4a10      	ldr	r2, [pc, #64]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a6:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <MX_GPIO_Init+0x7c>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2120      	movs	r1, #32
 80041b6:	480b      	ldr	r0, [pc, #44]	@ (80041e4 <MX_GPIO_Init+0x80>)
 80041b8:	f002 fe00 	bl	8006dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80041bc:	2320      	movs	r3, #32
 80041be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4619      	mov	r1, r3
 80041d2:	4804      	ldr	r0, [pc, #16]	@ (80041e4 <MX_GPIO_Init+0x80>)
 80041d4:	f002 fc5e 	bl	8006a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020000 	.word	0x40020000

080041e8 <HAL_ADC_ConvHalfCpltCallback>:
//    uint32_t mv  = (uint32_t)raw * 3300 / 4095;      // assume VDDA ≈ 3.3 V
//    printf("%u,%lu\r\n", raw, (unsigned long)mv);    // CSV to serial
//  }
//}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC3) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a06      	ldr	r2, [pc, #24]	@ (8004210 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d106      	bne.n	8004208 <HAL_ADC_ConvHalfCpltCallback+0x20>
    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80041fa:	2120      	movs	r1, #32
 80041fc:	4805      	ldr	r0, [pc, #20]	@ (8004214 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80041fe:	f002 fdf6 	bl	8006dee <HAL_GPIO_TogglePin>
    	which_half = 1;
 8004202:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]
    }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40012200 	.word	0x40012200
 8004214:	40020000 	.word	0x40020000
 8004218:	20000fe0 	.word	0x20000fe0

0800421c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC3) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_ADC_ConvCpltCallback+0x30>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d109      	bne.n	8004242 <HAL_ADC_ConvCpltCallback+0x26>
    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800422e:	2120      	movs	r1, #32
 8004230:	4807      	ldr	r0, [pc, #28]	@ (8004250 <HAL_ADC_ConvCpltCallback+0x34>)
 8004232:	f002 fddc 	bl	8006dee <HAL_GPIO_TogglePin>
    	which_half = 2;
 8004236:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <HAL_ADC_ConvCpltCallback+0x38>)
 8004238:	2202      	movs	r2, #2
 800423a:	701a      	strb	r2, [r3, #0]
    	buffer_ready = 1;
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_ADC_ConvCpltCallback+0x3c>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    }
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40012200 	.word	0x40012200
 8004250:	40020000 	.word	0x40020000
 8004254:	20000fe0 	.word	0x20000fe0
 8004258:	20000fe1 	.word	0x20000fe1

0800425c <Dc_Removal>:

static void Dc_Removal(const uint16_t *in, uint16_t *out, size_t n){
 800425c:	b480      	push	{r7}
 800425e:	b08d      	sub	sp, #52	@ 0x34
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
	uint32_t sum = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (size_t i=0; i<n;i++) {sum += in[i];} 						// here we take the sum of the buffer by looping through each element and accumulating
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004270:	e00b      	b.n	800428a <Dc_Removal+0x2e>
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	4413      	add	r3, r2
 8004282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	3301      	adds	r3, #1
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800428a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d3ef      	bcc.n	8004272 <Dc_Removal+0x16>
		uint32_t mean = sum/n; 										// here we take the average
 8004292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61fb      	str	r3, [r7, #28]

	for (size_t i=0; i<n;i++){
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a0:	e028      	b.n	80042f4 <Dc_Removal+0x98>
		int32_t v = (int32_t)in[i]-(int32_t)mean;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	61bb      	str	r3, [r7, #24]
		int32_t x = (int32_t)in[i];
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	617b      	str	r3, [r7, #20]
		int32_t y = v + 2048; 									 // we are shifting it to the mid scale so that DAC can write it
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c6:	623b      	str	r3, [r7, #32]
//		int32_t y = in;
//		int32_t y = v;
		if (y < 0) y = 0;										 // failsafe ifs to make our output bounded
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da01      	bge.n	80042d2 <Dc_Removal+0x76>
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
		if (y > 4095) y = 4095;
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d8:	db02      	blt.n	80042e0 <Dc_Removal+0x84>
 80042da:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80042de:	623b      	str	r3, [r7, #32]
		out[i] = (uint16_t)y;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	4413      	add	r3, r2
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	b292      	uxth	r2, r2
 80042ec:	801a      	strh	r2, [r3, #0]
	for (size_t i=0; i<n;i++){
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3d2      	bcc.n	80042a2 <Dc_Removal+0x46>
	}
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3734      	adds	r7, #52	@ 0x34
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <sat12f>:
			  print_stats(&adc_buf[256], 256);
			  which_half = 0;
		  }
}

static inline uint16_t sat12f(float v){ // making sure that our function is bounded
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	ed87 0a01 	vstr	s0, [r7, #4]
	if (v < 0.f) v = 0.f;
 8004316:	edd7 7a01 	vldr	s15, [r7, #4]
 800431a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	d502      	bpl.n	800432a <sat12f+0x1e>
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
	if (v > 4095.f) v = 4095.f;
 800432a:	edd7 7a01 	vldr	s15, [r7, #4]
 800432e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004364 <sat12f+0x58>
 8004332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	dd01      	ble.n	8004340 <sat12f+0x34>
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <sat12f+0x5c>)
 800433e:	607b      	str	r3, [r7, #4]
	return (uint16_t)(v+0.5f);
 8004340:	edd7 7a01 	vldr	s15, [r7, #4]
 8004344:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800434c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004350:	ee17 3a90 	vmov	r3, s15
 8004354:	b29b      	uxth	r3, r3
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	457ff000 	.word	0x457ff000
 8004368:	457ff000 	.word	0x457ff000

0800436c <process_block>:

static void process_block(uint16_t *in, uint16_t *out, size_t n){
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i<n; i++) {
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e019      	b.n	80043b2 <process_block+0x46>
		in_f[i] = ((float)in[i]-2048.0f)/2048; // i didn't understand why is this the case
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004390:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004424 <process_block+0xb8>
 8004394:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004398:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8004424 <process_block+0xb8>
 800439c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043a0:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <process_block+0xbc>)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i<n; i++) {
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3e1      	bcc.n	800437e <process_block+0x12>
	}
	arm_biquad_cascade_df2T_f32(&biquadS, in_f, out_f, n);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <process_block+0xc0>)
 80043be:	491a      	ldr	r1, [pc, #104]	@ (8004428 <process_block+0xbc>)
 80043c0:	481b      	ldr	r0, [pc, #108]	@ (8004430 <process_block+0xc4>)
 80043c2:	f7fc fdf7 	bl	8000fb4 <arm_biquad_cascade_df2T_f32>
	for (size_t i=0; i<n; i++){
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e021      	b.n	8004410 <process_block+0xa4>
		float v = (out_f[i]*dac_scale) * 2048.0f + 2048.0f;
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <process_block+0xc0>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	ed93 7a00 	vldr	s14, [r3]
 80043d8:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <process_block+0xc8>)
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004424 <process_block+0xb8>
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004424 <process_block+0xb8>
 80043ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043f2:	edc7 7a05 	vstr	s15, [r7, #20]
		out[i] = sat12f(v);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	18d4      	adds	r4, r2, r3
 80043fe:	ed97 0a05 	vldr	s0, [r7, #20]
 8004402:	f7ff ff83 	bl	800430c <sat12f>
 8004406:	4603      	mov	r3, r0
 8004408:	8023      	strh	r3, [r4, #0]
	for (size_t i=0; i<n; i++){
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	3301      	adds	r3, #1
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d3d9      	bcc.n	80043cc <process_block+0x60>
	}
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	@ 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}
 8004422:	bf00      	nop
 8004424:	45000000 	.word	0x45000000
 8004428:	20001008 	.word	0x20001008
 800442c:	20001808 	.word	0x20001808
 8004430:	20000ffc 	.word	0x20000ffc
 8004434:	20000004 	.word	0x20000004

08004438 <welch_process_segment>:

static void welch_process_segment(void){
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
	int start = (wr - SEG_LEN + SEG_LEN) % SEG_LEN;
 800443e:	4b70      	ldr	r3, [pc, #448]	@ (8004600 <welch_process_segment+0x1c8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	425a      	negs	r2, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	bf58      	it	pl
 800444a:	4253      	negpl	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i<SEG_LEN; i++) seg[i] = ring[start + i] * ham[i]; // apply the hammin window to our subsegment
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e018      	b.n	8004486 <welch_process_segment+0x4e>
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	4a6a      	ldr	r2, [pc, #424]	@ (8004604 <welch_process_segment+0x1cc>)
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	4a68      	ldr	r2, [pc, #416]	@ (8004608 <welch_process_segment+0x1d0>)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	edd3 7a00 	vldr	s15, [r3]
 8004470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004474:	4a65      	ldr	r2, [pc, #404]	@ (800460c <welch_process_segment+0x1d4>)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	edc3 7a00 	vstr	s15, [r3]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2bff      	cmp	r3, #255	@ 0xff
 800448a:	dde3      	ble.n	8004454 <welch_process_segment+0x1c>

	for (int i = 0; i<SEG_LEN; i++) fft_in[i] = seg[i]; // i fill my fft buffer with windowed subsegment
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	e00c      	b.n	80044ac <welch_process_segment+0x74>
 8004492:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <welch_process_segment+0x1d4>)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	495c      	ldr	r1, [pc, #368]	@ (8004610 <welch_process_segment+0x1d8>)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2bff      	cmp	r3, #255	@ 0xff
 80044b0:	ddef      	ble.n	8004492 <welch_process_segment+0x5a>

	for (int i = SEG_LEN; i<NFFT; i++) fft_in[i] = 0.0f; // if the rest of the buffer is not needed fill with zeros
 80044b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e009      	b.n	80044ce <welch_process_segment+0x96>
 80044ba:	4a55      	ldr	r2, [pc, #340]	@ (8004610 <welch_process_segment+0x1d8>)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2bff      	cmp	r3, #255	@ 0xff
 80044d2:	ddf2      	ble.n	80044ba <welch_process_segment+0x82>

	arm_rfft_fast_f32(&rfft, fft_in, fft_out, 0); // we take the fft of our subwindow/subsegment
 80044d4:	2300      	movs	r3, #0
 80044d6:	4a4f      	ldr	r2, [pc, #316]	@ (8004614 <welch_process_segment+0x1dc>)
 80044d8:	494d      	ldr	r1, [pc, #308]	@ (8004610 <welch_process_segment+0x1d8>)
 80044da:	484f      	ldr	r0, [pc, #316]	@ (8004618 <welch_process_segment+0x1e0>)
 80044dc:	f7ff fa56 	bl	800398c <arm_rfft_fast_f32>

	static float power[NFFT/2 + 1]; //this will be the power of buffer fft removes half the samples and makes from 1hz to 500 hz

	power[0] =  fft_out[0]*fft_out[0];   // DC
 80044e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004614 <welch_process_segment+0x1dc>)
 80044e2:	ed93 7a00 	vldr	s14, [r3]
 80044e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <welch_process_segment+0x1dc>)
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	4b4a      	ldr	r3, [pc, #296]	@ (800461c <welch_process_segment+0x1e4>)
 80044f2:	edc3 7a00 	vstr	s15, [r3]
	power[NFFT/2] = fft_out[1]*fft_out[1];   // Nyquist
 80044f6:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <welch_process_segment+0x1dc>)
 80044f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <welch_process_segment+0x1dc>)
 80044fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	4b45      	ldr	r3, [pc, #276]	@ (800461c <welch_process_segment+0x1e4>)
 8004508:	edc3 7a80 	vstr	s15, [r3, #512]	@ 0x200
	arm_cmplx_mag_squared_f32(&fft_out[2], &power[1], (NFFT/2 - 1)); // we here square and store
 800450c:	227f      	movs	r2, #127	@ 0x7f
 800450e:	4944      	ldr	r1, [pc, #272]	@ (8004620 <welch_process_segment+0x1e8>)
 8004510:	4844      	ldr	r0, [pc, #272]	@ (8004624 <welch_process_segment+0x1ec>)
 8004512:	f7ff f857 	bl	80035c4 <arm_cmplx_mag_squared_f32>

	for (int k = 0; k <= NFFT/2; k++) psd_accum[k] += power[k];
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e016      	b.n	800454a <welch_process_segment+0x112>
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <welch_process_segment+0x1f0>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	ed93 7a00 	vldr	s14, [r3]
 8004528:	4a3c      	ldr	r2, [pc, #240]	@ (800461c <welch_process_segment+0x1e4>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	edd3 7a00 	vldr	s15, [r3]
 8004534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004538:	4a3b      	ldr	r2, [pc, #236]	@ (8004628 <welch_process_segment+0x1f0>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	edc3 7a00 	vstr	s15, [r3]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3301      	adds	r3, #1
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b80      	cmp	r3, #128	@ 0x80
 800454e:	dde5      	ble.n	800451c <welch_process_segment+0xe4>

	if (++K >= K_TARGET){ // check if we reached 7 subsamples and if so:
 8004550:	4b36      	ldr	r3, [pc, #216]	@ (800462c <welch_process_segment+0x1f4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a35      	ldr	r2, [pc, #212]	@ (800462c <welch_process_segment+0x1f4>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b34      	ldr	r3, [pc, #208]	@ (800462c <welch_process_segment+0x1f4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b06      	cmp	r3, #6
 8004560:	dd49      	ble.n	80045f6 <welch_process_segment+0x1be>
		for (int k=0; k<=NFFT/2;k++){
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e033      	b.n	80045d0 <welch_process_segment+0x198>
			float two = (k==0 || k==NFFT/2) ? 1.0f : 2.0f; // if the frequencies are not nyquist or zero then w_i = w_i*2 because they represent both the -w_i and +w_i energies
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <welch_process_segment+0x13c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b80      	cmp	r3, #128	@ 0x80
 8004572:	d102      	bne.n	800457a <welch_process_segment+0x142>
 8004574:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004578:	e001      	b.n	800457e <welch_process_segment+0x146>
 800457a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800457e:	607b      	str	r3, [r7, #4]
			psd[k] = (two * psd_accum[k]) / ((float)K * (float)FS_HZ * (float)SEG_LEN * U);
 8004580:	4a29      	ldr	r2, [pc, #164]	@ (8004628 <welch_process_segment+0x1f0>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	ed93 7a00 	vldr	s14, [r3]
 800458c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004590:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004594:	4b25      	ldr	r3, [pc, #148]	@ (800462c <welch_process_segment+0x1f4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004630 <welch_process_segment+0x1f8>
 80045a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004634 <welch_process_segment+0x1fc>
 80045ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <welch_process_segment+0x200>)
 80045b2:	edd3 7a00 	vldr	s15, [r3]
 80045b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045be:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <welch_process_segment+0x204>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	edc3 7a00 	vstr	s15, [r3]
		for (int k=0; k<=NFFT/2;k++){
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b80      	cmp	r3, #128	@ 0x80
 80045d4:	ddc8      	ble.n	8004568 <welch_process_segment+0x130>
		}
		memset(psd_accum, 0, sizeof(psd_accum));
 80045d6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80045da:	2100      	movs	r1, #0
 80045dc:	4812      	ldr	r0, [pc, #72]	@ (8004628 <welch_process_segment+0x1f0>)
 80045de:	f004 fe53 	bl	8009288 <memset>
		K = 0;
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <welch_process_segment+0x1f4>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

		Bandpower_from_psd(psd, DF_HZ); // calculate the band power
 80045e8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8004640 <welch_process_segment+0x208>
 80045ec:	4813      	ldr	r0, [pc, #76]	@ (800463c <welch_process_segment+0x204>)
 80045ee:	f000 f8d5 	bl	800479c <Bandpower_from_psd>
		EEG_OUT2();
 80045f2:	f000 fa03 	bl	80049fc <EEG_OUT2>
	}
}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20002820 	.word	0x20002820
 8004604:	20002020 	.word	0x20002020
 8004608:	20002844 	.word	0x20002844
 800460c:	20002c48 	.word	0x20002c48
 8004610:	20003048 	.word	0x20003048
 8004614:	20003448 	.word	0x20003448
 8004618:	2000282c 	.word	0x2000282c
 800461c:	20003c50 	.word	0x20003c50
 8004620:	20003c54 	.word	0x20003c54
 8004624:	20003450 	.word	0x20003450
 8004628:	20003848 	.word	0x20003848
 800462c:	20002828 	.word	0x20002828
 8004630:	43fa0000 	.word	0x43fa0000
 8004634:	43800000 	.word	0x43800000
 8004638:	20002c44 	.word	0x20002c44
 800463c:	20003a4c 	.word	0x20003a4c
 8004640:	3ffa0000 	.word	0x3ffa0000

08004644 <welch_push_sample>:

static inline void welch_push_sample(float x){
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	ed87 0a01 	vstr	s0, [r7, #4]
	ring [wr] = x; ring[wr + SEG_LEN] = x; // mirror
 800464e:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <welch_push_sample+0x64>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a16      	ldr	r2, [pc, #88]	@ (80046ac <welch_push_sample+0x68>)
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <welch_push_sample+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004664:	4a11      	ldr	r2, [pc, #68]	@ (80046ac <welch_push_sample+0x68>)
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	601a      	str	r2, [r3, #0]
	wr = (wr + 1) % SEG_LEN;
 800466e:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <welch_push_sample+0x64>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	425a      	negs	r2, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	bf58      	it	pl
 800467c:	4253      	negpl	r3, r2
 800467e:	4a0a      	ldr	r2, [pc, #40]	@ (80046a8 <welch_push_sample+0x64>)
 8004680:	6013      	str	r3, [r2, #0]
	if(++newCount >= HOP){
 8004682:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <welch_push_sample+0x6c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <welch_push_sample+0x6c>)
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <welch_push_sample+0x6c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b7f      	cmp	r3, #127	@ 0x7f
 8004692:	dd04      	ble.n	800469e <welch_push_sample+0x5a>
		newCount = 0;
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <welch_push_sample+0x6c>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
		welch_process_segment();
 800469a:	f7ff fecd 	bl	8004438 <welch_process_segment>
	}
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20002820 	.word	0x20002820
 80046ac:	20002020 	.word	0x20002020
 80046b0:	20002824 	.word	0x20002824
 80046b4:	00000000 	.word	0x00000000

080046b8 <init_hamming>:
//    for (int i = 0; i < FFT_LEN; i++) {
//        hann[i] = 0.5f * (1.0f - cosf((2.0f * M_PI * i) / (FFT_LEN - 1)));
//    }
//}

static void init_hamming(void){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
	U = 0.0f;
 80046be:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <init_hamming+0xd0>)
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
	for (int n=0; n<SEG_LEN; n++){
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	e044      	b.n	8004756 <init_hamming+0x9e>
		ham[n] = 0.54f - 0.46f * cosf(2.0f * M_PI * n / (SEG_LEN - 1));
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fb ff49 	bl	8000564 <__aeabi_i2d>
 80046d2:	a329      	add	r3, pc, #164	@ (adr r3, 8004778 <init_hamming+0xc0>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb ffae 	bl	8000638 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	a326      	add	r3, pc, #152	@ (adr r3, 8004780 <init_hamming+0xc8>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f7fc f8cf 	bl	800088c <__aeabi_ddiv>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	f7fc fa77 	bl	8000be8 <__aeabi_d2f>
 80046fa:	4603      	mov	r3, r0
 80046fc:	ee00 3a10 	vmov	s0, r3
 8004700:	f006 fd2c 	bl	800b15c <cosf>
 8004704:	eef0 7a40 	vmov.f32	s15, s0
 8004708:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800478c <init_hamming+0xd4>
 800470c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004710:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004790 <init_hamming+0xd8>
 8004714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004718:	4a1e      	ldr	r2, [pc, #120]	@ (8004794 <init_hamming+0xdc>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	edc3 7a00 	vstr	s15, [r3]
		U += ham[n]*ham[n];
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <init_hamming+0xdc>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	ed93 7a00 	vldr	s14, [r3]
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <init_hamming+0xdc>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	edd3 7a00 	vldr	s15, [r3]
 800473c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004740:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <init_hamming+0xd0>)
 8004742:	edd3 7a00 	vldr	s15, [r3]
 8004746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800474a:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <init_hamming+0xd0>)
 800474c:	edc3 7a00 	vstr	s15, [r3]
	for (int n=0; n<SEG_LEN; n++){
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3301      	adds	r3, #1
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2bff      	cmp	r3, #255	@ 0xff
 800475a:	ddb7      	ble.n	80046cc <init_hamming+0x14>
	}
	U /= (float)SEG_LEN;
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <init_hamming+0xd0>)
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8004798 <init_hamming+0xe0>
 8004766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476a:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <init_hamming+0xd0>)
 800476c:	edc3 7a00 	vstr	s15, [r3]
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	54442d18 	.word	0x54442d18
 800477c:	401921fb 	.word	0x401921fb
 8004780:	00000000 	.word	0x00000000
 8004784:	406fe000 	.word	0x406fe000
 8004788:	20002c44 	.word	0x20002c44
 800478c:	3eeb851f 	.word	0x3eeb851f
 8004790:	3f0a3d71 	.word	0x3f0a3d71
 8004794:	20002844 	.word	0x20002844
 8004798:	43800000 	.word	0x43800000

0800479c <Bandpower_from_psd>:

static void Bandpower_from_psd(const float *Sxx, float df){
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b099      	sub	sp, #100	@ 0x64
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	ed87 0a00 	vstr	s0, [r7]
    // 0..3: classic bands
    const float lo[4] = {1.0f, 4.0f,  8.0f, 13.0f};
 80047a8:	4b8e      	ldr	r3, [pc, #568]	@ (80049e4 <Bandpower_from_psd+0x248>)
 80047aa:	f107 0418 	add.w	r4, r7, #24
 80047ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float hi[4] = {4.0f, 8.0f, 13.0f, 30.0f};
 80047b4:	4b8c      	ldr	r3, [pc, #560]	@ (80049e8 <Bandpower_from_psd+0x24c>)
 80047b6:	f107 0408 	add.w	r4, r7, #8
 80047ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i=0;i<6;i++) EEG_DATA[i]=0.0f;
 80047c0:	2300      	movs	r3, #0
 80047c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047c4:	e009      	b.n	80047da <Bandpower_from_psd+0x3e>
 80047c6:	4a89      	ldr	r2, [pc, #548]	@ (80049ec <Bandpower_from_psd+0x250>)
 80047c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d6:	3301      	adds	r3, #1
 80047d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047dc:	2b05      	cmp	r3, #5
 80047de:	ddf2      	ble.n	80047c6 <Bandpower_from_psd+0x2a>

    for (int b=0; b<4; b++){
 80047e0:	2300      	movs	r3, #0
 80047e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047e4:	e051      	b.n	800488a <Bandpower_from_psd+0xee>
        int k0 = (int)lroundf(lo[b]/df); if (k0<1) k0=1;
 80047e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	3360      	adds	r3, #96	@ 0x60
 80047ec:	443b      	add	r3, r7
 80047ee:	3b48      	subs	r3, #72	@ 0x48
 80047f0:	ed93 7a00 	vldr	s14, [r3]
 80047f4:	edd7 7a00 	vldr	s15, [r7]
 80047f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80047fc:	eeb0 0a66 	vmov.f32	s0, s13
 8004800:	f006 fd90 	bl	800b324 <lroundf>
 8004804:	6578      	str	r0, [r7, #84]	@ 0x54
 8004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004808:	2b00      	cmp	r3, #0
 800480a:	dc01      	bgt.n	8004810 <Bandpower_from_psd+0x74>
 800480c:	2301      	movs	r3, #1
 800480e:	657b      	str	r3, [r7, #84]	@ 0x54
        int k1 = (int)lroundf(hi[b]/df); if (k1>(NFFT/2)) k1=(NFFT/2);
 8004810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	3360      	adds	r3, #96	@ 0x60
 8004816:	443b      	add	r3, r7
 8004818:	3b58      	subs	r3, #88	@ 0x58
 800481a:	ed93 7a00 	vldr	s14, [r3]
 800481e:	edd7 7a00 	vldr	s15, [r7]
 8004822:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004826:	eeb0 0a66 	vmov.f32	s0, s13
 800482a:	f006 fd7b 	bl	800b324 <lroundf>
 800482e:	6538      	str	r0, [r7, #80]	@ 0x50
 8004830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	dd01      	ble.n	800483a <Bandpower_from_psd+0x9e>
 8004836:	2380      	movs	r3, #128	@ 0x80
 8004838:	653b      	str	r3, [r7, #80]	@ 0x50
        float sum=0.0f; for (int k=k0;k<=k1;k++) sum+=Sxx[k];
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004844:	e00e      	b.n	8004864 <Bandpower_from_psd+0xc8>
 8004846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800485e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004860:	3301      	adds	r3, #1
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004868:	429a      	cmp	r2, r3
 800486a:	ddec      	ble.n	8004846 <Bandpower_from_psd+0xaa>
        EEG_DATA[b] = sum * df;
 800486c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004870:	edd7 7a00 	vldr	s15, [r7]
 8004874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004878:	4a5c      	ldr	r2, [pc, #368]	@ (80049ec <Bandpower_from_psd+0x250>)
 800487a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	edc3 7a00 	vstr	s15, [r3]
    for (int b=0; b<4; b++){
 8004884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004886:	3301      	adds	r3, #1
 8004888:	65bb      	str	r3, [r7, #88]	@ 0x58
 800488a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800488c:	2b03      	cmp	r3, #3
 800488e:	ddaa      	ble.n	80047e6 <Bandpower_from_psd+0x4a>
    }
    // 4: 50 Hz line (single-bin approx)
    int k50 = (int)lroundf(50.0f/df); if (k50>(NFFT/2)) k50=(NFFT/2);
 8004890:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80049f0 <Bandpower_from_psd+0x254>
 8004894:	edd7 7a00 	vldr	s15, [r7]
 8004898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489c:	eeb0 0a47 	vmov.f32	s0, s14
 80048a0:	f006 fd40 	bl	800b324 <lroundf>
 80048a4:	6478      	str	r0, [r7, #68]	@ 0x44
 80048a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a8:	2b80      	cmp	r3, #128	@ 0x80
 80048aa:	dd01      	ble.n	80048b0 <Bandpower_from_psd+0x114>
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	647b      	str	r3, [r7, #68]	@ 0x44
    EEG_DATA[4] = Sxx[k50]*df;
 80048b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	ed93 7a00 	vldr	s14, [r3]
 80048bc:	edd7 7a00 	vldr	s15, [r7]
 80048c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c4:	4b49      	ldr	r3, [pc, #292]	@ (80049ec <Bandpower_from_psd+0x250>)
 80048c6:	edc3 7a04 	vstr	s15, [r3, #16]

    // 5: 12 Hz + 24 Hz narrow bands (±0.5 Hz)
    int k12a=(int)floorf((12.0f-0.5f)/df), k12b=(int)ceilf((12.0f+0.5f)/df);
 80048ca:	eef2 6a07 	vmov.f32	s13, #39	@ 0x41380000  11.5
 80048ce:	edd7 7a00 	vldr	s15, [r7]
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	eeb0 0a47 	vmov.f32	s0, s14
 80048da:	f006 fd93 	bl	800b404 <floorf>
 80048de:	eef0 7a40 	vmov.f32	s15, s0
 80048e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e6:	ee17 3a90 	vmov	r3, s15
 80048ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ec:	eef2 6a09 	vmov.f32	s13, #41	@ 0x41480000  12.5
 80048f0:	edd7 7a00 	vldr	s15, [r7]
 80048f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f8:	eeb0 0a47 	vmov.f32	s0, s14
 80048fc:	f006 fd40 	bl	800b380 <ceilf>
 8004900:	eef0 7a40 	vmov.f32	s15, s0
 8004904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004908:	ee17 3a90 	vmov	r3, s15
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
    int k24a=(int)floorf((24.0f-0.5f)/df), k24b=(int)ceilf((24.0f+0.5f)/df);
 800490e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80049f4 <Bandpower_from_psd+0x258>
 8004912:	edd7 7a00 	vldr	s15, [r7]
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	eeb0 0a47 	vmov.f32	s0, s14
 800491e:	f006 fd71 	bl	800b404 <floorf>
 8004922:	eef0 7a40 	vmov.f32	s15, s0
 8004926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800492a:	ee17 3a90 	vmov	r3, s15
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004930:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80049f8 <Bandpower_from_psd+0x25c>
 8004934:	edd7 7a00 	vldr	s15, [r7]
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493c:	eeb0 0a47 	vmov.f32	s0, s14
 8004940:	f006 fd1e 	bl	800b380 <ceilf>
 8004944:	eef0 7a40 	vmov.f32	s15, s0
 8004948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494c:	ee17 3a90 	vmov	r3, s15
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
    float s=0.0f;
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
    for(int k=k12a;k<=k12b;k++) if(k>=1 && k<=NFFT/2) s+=Sxx[k];
 8004958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495c:	e014      	b.n	8004988 <Bandpower_from_psd+0x1ec>
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	dd0e      	ble.n	8004982 <Bandpower_from_psd+0x1e6>
 8004964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	dc0b      	bgt.n	8004982 <Bandpower_from_psd+0x1e6>
 800496a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	edd3 7a00 	vldr	s15, [r3]
 8004976:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800497a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8004982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004984:	3301      	adds	r3, #1
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004988:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	429a      	cmp	r2, r3
 800498e:	dde6      	ble.n	800495e <Bandpower_from_psd+0x1c2>
    for(int k=k24a;k<=k24b;k++) if(k>=1 && k<=NFFT/2) s+=Sxx[k];
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004994:	e014      	b.n	80049c0 <Bandpower_from_psd+0x224>
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	dd0e      	ble.n	80049ba <Bandpower_from_psd+0x21e>
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	2b80      	cmp	r3, #128	@ 0x80
 80049a0:	dc0b      	bgt.n	80049ba <Bandpower_from_psd+0x21e>
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80049b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049b6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80049ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049bc:	3301      	adds	r3, #1
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	429a      	cmp	r2, r3
 80049c6:	dde6      	ble.n	8004996 <Bandpower_from_psd+0x1fa>
    EEG_DATA[5]=s*df;
 80049c8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80049cc:	edd7 7a00 	vldr	s15, [r7]
 80049d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <Bandpower_from_psd+0x250>)
 80049d6:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3764      	adds	r7, #100	@ 0x64
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	0800bcdc 	.word	0x0800bcdc
 80049e8:	0800bcec 	.word	0x0800bcec
 80049ec:	20002008 	.word	0x20002008
 80049f0:	42480000 	.word	0x42480000
 80049f4:	41bc0000 	.word	0x41bc0000
 80049f8:	41c40000 	.word	0x41c40000

080049fc <EEG_OUT2>:

	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n",
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3]);
}

static void EEG_OUT2(void){
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b08e      	sub	sp, #56	@ 0x38
 8004a02:	af0a      	add	r7, sp, #40	@ 0x28

	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a04:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a06:	681b      	ldr	r3, [r3, #0]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fdbd 	bl	8000588 <__aeabi_f2d>
 8004a0e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a12:	4b1c      	ldr	r3, [pc, #112]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a14:	685b      	ldr	r3, [r3, #4]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fdb6 	bl	8000588 <__aeabi_f2d>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a20:	4b18      	ldr	r3, [pc, #96]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a22:	689b      	ldr	r3, [r3, #8]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fdaf 	bl	8000588 <__aeabi_f2d>
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	4689      	mov	r9, r1
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a30:	68db      	ldr	r3, [r3, #12]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fda8 	bl	8000588 <__aeabi_f2d>
 8004a38:	4682      	mov	sl, r0
 8004a3a:	468b      	mov	fp, r1
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a3c:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fb fda1 	bl	8000588 <__aeabi_f2d>
 8004a46:	e9c7 0100 	strd	r0, r1, [r7]
	           EEG_DATA[0], EEG_DATA[1], EEG_DATA[2], EEG_DATA[3], EEG_DATA[4], EEG_DATA[5]);
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a84 <EEG_OUT2+0x88>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
	printf("delta:%f,theta:%f,alpha:%f,beta:%f\n,50hz:%f\n,12+24hz:%f\n",
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fb fd9a 	bl	8000588 <__aeabi_f2d>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a5c:	ed97 7b00 	vldr	d7, [r7]
 8004a60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a64:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004a68:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004a6c:	e9cd 4500 	strd	r4, r5, [sp]
 8004a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a74:	4804      	ldr	r0, [pc, #16]	@ (8004a88 <EEG_OUT2+0x8c>)
 8004a76:	f004 fb97 	bl	80091a8 <iprintf>
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a84:	20002008 	.word	0x20002008
 8004a88:	0800bd20 	.word	0x0800bd20

08004a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a90:	b672      	cpsid	i
}
 8004a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <Error_Handler+0x8>

08004a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_MspInit+0x4c>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	@ (8004bd8 <HAL_ADC_MspInit+0xf0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d161      	bne.n	8004bce <HAL_ADC_MspInit+0xe6>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	4b33      	ldr	r3, [pc, #204]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	4a32      	ldr	r2, [pc, #200]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b1a:	4b30      	ldr	r3, [pc, #192]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b36:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <HAL_ADC_MspInit+0xf4>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004b42:	2308      	movs	r3, #8
 8004b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b46:	2303      	movs	r3, #3
 8004b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	4619      	mov	r1, r3
 8004b54:	4822      	ldr	r0, [pc, #136]	@ (8004be0 <HAL_ADC_MspInit+0xf8>)
 8004b56:	f001 ff9d 	bl	8006a94 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8004b5a:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b5c:	4a22      	ldr	r2, [pc, #136]	@ (8004be8 <HAL_ADC_MspInit+0x100>)
 8004b5e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8004b60:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004b66:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b7a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b82:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b84:	4b17      	ldr	r3, [pc, #92]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b8a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b92:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b9a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b9c:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004ba2:	4810      	ldr	r0, [pc, #64]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004ba4:	f001 fb96 	bl	80062d4 <HAL_DMA_Init>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8004bae:	f7ff ff6d 	bl	8004a8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004bb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <HAL_ADC_MspInit+0xfc>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2012      	movs	r0, #18
 8004bc4:	f001 f8c9 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004bc8:	2012      	movs	r0, #18
 8004bca:	f001 f8e2 	bl	8005d92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8004bce:	bf00      	nop
 8004bd0:	3728      	adds	r7, #40	@ 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40012200 	.word	0x40012200
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40020800 	.word	0x40020800
 8004be4:	2000027c 	.word	0x2000027c
 8004be8:	40026410 	.word	0x40026410

08004bec <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	@ 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	@ (8004ccc <HAL_DAC_MspInit+0xe0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d159      	bne.n	8004cc2 <HAL_DAC_MspInit+0xd6>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	4b28      	ldr	r3, [pc, #160]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	4a27      	ldr	r2, [pc, #156]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c3a:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_DAC_MspInit+0xe4>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c46:	2310      	movs	r3, #16
 8004c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4619      	mov	r1, r3
 8004c58:	481e      	ldr	r0, [pc, #120]	@ (8004cd4 <HAL_DAC_MspInit+0xe8>)
 8004c5a:	f001 ff1b 	bl	8006a94 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_DAC_MspInit+0xf0>)
 8004c62:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004c64:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c66:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8004c6a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c6e:	2240      	movs	r2, #64	@ 0x40
 8004c70:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c72:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004c78:	4b17      	ldr	r3, [pc, #92]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c7e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c80:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c86:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c88:	4b13      	ldr	r3, [pc, #76]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c8e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8004c90:	4b11      	ldr	r3, [pc, #68]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c96:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004c9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c9e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004ca6:	480c      	ldr	r0, [pc, #48]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004ca8:	f001 fb14 	bl	80062d4 <HAL_DMA_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8004cb2:	f7ff feeb 	bl	8004a8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a07      	ldr	r2, [pc, #28]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	4a06      	ldr	r2, [pc, #24]	@ (8004cd8 <HAL_DAC_MspInit+0xec>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8004cc2:	bf00      	nop
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40007400 	.word	0x40007400
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40020000 	.word	0x40020000
 8004cd8:	200002f0 	.word	0x200002f0
 8004cdc:	40026088 	.word	0x40026088

08004ce0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	@ (8004d1c <HAL_TIM_Base_MspInit+0x3c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10d      	bne.n	8004d0e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <HAL_TIM_Base_MspInit+0x40>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	4a09      	ldr	r2, [pc, #36]	@ (8004d20 <HAL_TIM_Base_MspInit+0x40>)
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_TIM_Base_MspInit+0x40>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010400 	.word	0x40010400
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	@ 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <HAL_UART_MspInit+0x84>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12b      	bne.n	8004d9e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	4b18      	ldr	r3, [pc, #96]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	4a17      	ldr	r2, [pc, #92]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	4a10      	ldr	r2, [pc, #64]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d72:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <HAL_UART_MspInit+0x88>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d7e:	230c      	movs	r3, #12
 8004d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d82:	2302      	movs	r3, #2
 8004d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d8e:	2307      	movs	r3, #7
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d92:	f107 0314 	add.w	r3, r7, #20
 8004d96:	4619      	mov	r1, r3
 8004d98:	4805      	ldr	r0, [pc, #20]	@ (8004db0 <HAL_UART_MspInit+0x8c>)
 8004d9a:	f001 fe7b 	bl	8006a94 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004d9e:	bf00      	nop
 8004da0:	3728      	adds	r7, #40	@ 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40004400 	.word	0x40004400
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40020000 	.word	0x40020000

08004db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <NMI_Handler+0x4>

08004dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <HardFault_Handler+0x4>

08004dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <MemManage_Handler+0x4>

08004dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <BusFault_Handler+0x4>

08004dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <UsageFault_Handler+0x4>

08004ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e0a:	f000 f975 	bl	80050f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004e18:	4802      	ldr	r0, [pc, #8]	@ (8004e24 <DMA1_Stream5_IRQHandler+0x10>)
 8004e1a:	f001 fbd1 	bl	80065c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200002f0 	.word	0x200002f0

08004e28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004e2c:	4802      	ldr	r0, [pc, #8]	@ (8004e38 <ADC_IRQHandler+0x10>)
 8004e2e:	f000 f9c6 	bl	80051be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000234 	.word	0x20000234

08004e3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004e40:	4802      	ldr	r0, [pc, #8]	@ (8004e4c <DMA2_Stream0_IRQHandler+0x10>)
 8004e42:	f001 fbbd 	bl	80065c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000027c 	.word	0x2000027c

08004e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return 1;
 8004e54:	2301      	movs	r3, #1
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <_kill>:

int _kill(int pid, int sig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e6a:	f004 fa15 	bl	8009298 <__errno>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2216      	movs	r2, #22
 8004e72:	601a      	str	r2, [r3, #0]
  return -1;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_exit>:

void _exit (int status)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ffe7 	bl	8004e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <_exit+0x12>

08004e96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e00a      	b.n	8004ebe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ea8:	f3af 8000 	nop.w
 8004eac:	4601      	mov	r1, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	60ba      	str	r2, [r7, #8]
 8004eb4:	b2ca      	uxtb	r2, r1
 8004eb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dbf0      	blt.n	8004ea8 <_read+0x12>
  }

  return len;
 8004ec6:	687b      	ldr	r3, [r7, #4]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e009      	b.n	8004ef6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	60ba      	str	r2, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe ff08 	bl	8003d00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	dbf1      	blt.n	8004ee2 <_write+0x12>
  }
  return len;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_close>:

int _close(int file)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f30:	605a      	str	r2, [r3, #4]
  return 0;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <_isatty>:

int _isatty(int file)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f48:	2301      	movs	r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f78:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <_sbrk+0x5c>)
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <_sbrk+0x60>)
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f84:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <_sbrk+0x64>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f8c:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <_sbrk+0x64>)
 8004f8e:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <_sbrk+0x68>)
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <_sbrk+0x64>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d207      	bcs.n	8004fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fa0:	f004 f97a 	bl	8009298 <__errno>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fae:	e009      	b.n	8004fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fb0:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <_sbrk+0x64>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <_sbrk+0x64>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4a05      	ldr	r2, [pc, #20]	@ (8004fd4 <_sbrk+0x64>)
 8004fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20020000 	.word	0x20020000
 8004fd0:	00000400 	.word	0x00000400
 8004fd4:	20003e54 	.word	0x20003e54
 8004fd8:	20003fa8 	.word	0x20003fa8

08004fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fe0:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <SystemInit+0x20>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	4a05      	ldr	r2, [pc, #20]	@ (8004ffc <SystemInit+0x20>)
 8004fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005038 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005004:	f7ff ffea 	bl	8004fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005008:	480c      	ldr	r0, [pc, #48]	@ (800503c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800500a:	490d      	ldr	r1, [pc, #52]	@ (8005040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800500c:	4a0d      	ldr	r2, [pc, #52]	@ (8005044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800500e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005010:	e002      	b.n	8005018 <LoopCopyDataInit>

08005012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005016:	3304      	adds	r3, #4

08005018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800501a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800501c:	d3f9      	bcc.n	8005012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800501e:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005020:	4c0a      	ldr	r4, [pc, #40]	@ (800504c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005024:	e001      	b.n	800502a <LoopFillZerobss>

08005026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005028:	3204      	adds	r2, #4

0800502a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800502a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800502c:	d3fb      	bcc.n	8005026 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800502e:	f004 f939 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005032:	f7fe fe77 	bl	8003d24 <main>
  bx  lr    
 8005036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800503c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005040:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005044:	0801f9ac 	.word	0x0801f9ac
  ldr r2, =_sbss
 8005048:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800504c:	20003fa8 	.word	0x20003fa8

08005050 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005050:	e7fe      	b.n	8005050 <CAN1_RX0_IRQHandler>
	...

08005054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_Init+0x40>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0d      	ldr	r2, [pc, #52]	@ (8005094 <HAL_Init+0x40>)
 800505e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_Init+0x40>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <HAL_Init+0x40>)
 800506a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800506e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005070:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <HAL_Init+0x40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a07      	ldr	r2, [pc, #28]	@ (8005094 <HAL_Init+0x40>)
 8005076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507c:	2003      	movs	r0, #3
 800507e:	f000 fe61 	bl	8005d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005082:	200f      	movs	r0, #15
 8005084:	f000 f808 	bl	8005098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005088:	f7ff fd06 	bl	8004a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00

08005098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_InitTick+0x54>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_InitTick+0x58>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fe79 	bl	8005dae <HAL_SYSTICK_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e00e      	b.n	80050e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d80a      	bhi.n	80050e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050cc:	2200      	movs	r2, #0
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050d4:	f000 fe41 	bl	8005d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050d8:	4a06      	ldr	r2, [pc, #24]	@ (80050f4 <HAL_InitTick+0x5c>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000044 	.word	0x20000044
 80050f0:	2000004c 	.word	0x2000004c
 80050f4:	20000048 	.word	0x20000048

080050f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_IncTick+0x20>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_IncTick+0x24>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4413      	add	r3, r2
 8005108:	4a04      	ldr	r2, [pc, #16]	@ (800511c <HAL_IncTick+0x24>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000004c 	.word	0x2000004c
 800511c:	20003e58 	.word	0x20003e58

08005120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return uwTick;
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <HAL_GetTick+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20003e58 	.word	0x20003e58

08005138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e033      	b.n	80051b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fcc6 	bl	8004ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d118      	bne.n	80051a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800517e:	f023 0302 	bic.w	r3, r3, #2
 8005182:	f043 0202 	orr.w	r2, r3, #2
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fb82 	bl	8005894 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	f043 0201 	orr.w	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80051a6:	e001      	b.n	80051ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d049      	beq.n	8005288 <HAL_ADC_IRQHandler+0xca>
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d046      	beq.n	8005288 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d105      	bne.n	8005212 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d12b      	bne.n	8005278 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005224:	2b00      	cmp	r3, #0
 8005226:	d127      	bne.n	8005278 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005240:	2b00      	cmp	r3, #0
 8005242:	d119      	bne.n	8005278 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0220 	bic.w	r2, r2, #32
 8005252:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fe ffcf 	bl	800421c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0212 	mvn.w	r2, #18
 8005286:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d057      	beq.n	800534e <HAL_ADC_IRQHandler+0x190>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d054      	beq.n	800534e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d139      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12b      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d124      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11d      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005306:	2b00      	cmp	r3, #0
 8005308:	d119      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005318:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc26 	bl	8005b90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 020c 	mvn.w	r2, #12
 800534c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_ADC_IRQHandler+0x1d6>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10d      	bne.n	8005394 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f93f 	bl	8005608 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0201 	mvn.w	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053a2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <HAL_ADC_IRQHandler+0x218>
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b4:	f043 0202 	orr.w	r2, r3, #2
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0220 	mvn.w	r2, #32
 80053c4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f928 	bl	800561c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0220 	mvn.w	r2, #32
 80053d4:	601a      	str	r2, [r3, #0]
  }
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_ADC_Start_DMA+0x22>
 80053fe:	2302      	movs	r3, #2
 8005400:	e0eb      	b.n	80055da <HAL_ADC_Start_DMA+0x1fa>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d018      	beq.n	800544a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005428:	4b6e      	ldr	r3, [pc, #440]	@ (80055e4 <HAL_ADC_Start_DMA+0x204>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6e      	ldr	r2, [pc, #440]	@ (80055e8 <HAL_ADC_Start_DMA+0x208>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0c9a      	lsrs	r2, r3, #18
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800543c:	e002      	b.n	8005444 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3b01      	subs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f9      	bne.n	800543e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005458:	d107      	bne.n	800546a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	f040 80a3 	bne.w	80055c0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80054a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d106      	bne.n	80054c8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f023 0206 	bic.w	r2, r3, #6
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80054c6:	e002      	b.n	80054ce <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054d6:	4b45      	ldr	r3, [pc, #276]	@ (80055ec <HAL_ADC_Start_DMA+0x20c>)
 80054d8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054de:	4a44      	ldr	r2, [pc, #272]	@ (80055f0 <HAL_ADC_Start_DMA+0x210>)
 80054e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	4a43      	ldr	r2, [pc, #268]	@ (80055f4 <HAL_ADC_Start_DMA+0x214>)
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	4a42      	ldr	r2, [pc, #264]	@ (80055f8 <HAL_ADC_Start_DMA+0x218>)
 80054f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80054fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800550a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800551a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	334c      	adds	r3, #76	@ 0x4c
 8005526:	4619      	mov	r1, r3
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f000 ff80 	bl	8006430 <HAL_DMA_Start_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b00      	cmp	r3, #0
 800553e:	d12a      	bne.n	8005596 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2d      	ldr	r2, [pc, #180]	@ (80055fc <HAL_ADC_Start_DMA+0x21c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d015      	beq.n	8005576 <HAL_ADC_Start_DMA+0x196>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <HAL_ADC_Start_DMA+0x220>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d105      	bne.n	8005560 <HAL_ADC_Start_DMA+0x180>
 8005554:	4b25      	ldr	r3, [pc, #148]	@ (80055ec <HAL_ADC_Start_DMA+0x20c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a27      	ldr	r2, [pc, #156]	@ (8005604 <HAL_ADC_Start_DMA+0x224>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d136      	bne.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
 800556a:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <HAL_ADC_Start_DMA+0x20c>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	d130      	bne.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d129      	bne.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	e020      	b.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <HAL_ADC_Start_DMA+0x21c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d11b      	bne.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d114      	bne.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e00b      	b.n	80055d8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	f043 0210 	orr.w	r2, r3, #16
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80055d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000044 	.word	0x20000044
 80055e8:	431bde83 	.word	0x431bde83
 80055ec:	40012300 	.word	0x40012300
 80055f0:	08005a8d 	.word	0x08005a8d
 80055f4:	08005b47 	.word	0x08005b47
 80055f8:	08005b63 	.word	0x08005b63
 80055fc:	40012000 	.word	0x40012000
 8005600:	40012100 	.word	0x40012100
 8005604:	40012200 	.word	0x40012200

08005608 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x1c>
 8005648:	2302      	movs	r3, #2
 800564a:	e113      	b.n	8005874 <HAL_ADC_ConfigChannel+0x244>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b09      	cmp	r3, #9
 800565a:	d925      	bls.n	80056a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	4613      	mov	r3, r2
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	4413      	add	r3, r2
 8005670:	3b1e      	subs	r3, #30
 8005672:	2207      	movs	r2, #7
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43da      	mvns	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	400a      	ands	r2, r1
 8005680:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	4618      	mov	r0, r3
 8005694:	4603      	mov	r3, r0
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4403      	add	r3, r0
 800569a:	3b1e      	subs	r3, #30
 800569c:	409a      	lsls	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	e022      	b.n	80056ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6919      	ldr	r1, [r3, #16]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	2207      	movs	r2, #7
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43da      	mvns	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	400a      	ands	r2, r1
 80056ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6919      	ldr	r1, [r3, #16]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4618      	mov	r0, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	4403      	add	r3, r0
 80056e4:	409a      	lsls	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d824      	bhi.n	8005740 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	3b05      	subs	r3, #5
 8005708:	221f      	movs	r2, #31
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	400a      	ands	r2, r1
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	4618      	mov	r0, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	3b05      	subs	r3, #5
 8005732:	fa00 f203 	lsl.w	r2, r0, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34
 800573e:	e04c      	b.n	80057da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d824      	bhi.n	8005792 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	3b23      	subs	r3, #35	@ 0x23
 800575a:	221f      	movs	r2, #31
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43da      	mvns	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	400a      	ands	r2, r1
 8005768:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	4618      	mov	r0, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	3b23      	subs	r3, #35	@ 0x23
 8005784:	fa00 f203 	lsl.w	r2, r0, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005790:	e023      	b.n	80057da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	3b41      	subs	r3, #65	@ 0x41
 80057a4:	221f      	movs	r2, #31
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	400a      	ands	r2, r1
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	3b41      	subs	r3, #65	@ 0x41
 80057ce:	fa00 f203 	lsl.w	r2, r0, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057da:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <HAL_ADC_ConfigChannel+0x250>)
 80057dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a28      	ldr	r2, [pc, #160]	@ (8005884 <HAL_ADC_ConfigChannel+0x254>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10f      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x1d8>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b12      	cmp	r3, #18
 80057ee:	d10b      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <HAL_ADC_ConfigChannel+0x254>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d12b      	bne.n	800586a <HAL_ADC_ConfigChannel+0x23a>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1c      	ldr	r2, [pc, #112]	@ (8005888 <HAL_ADC_ConfigChannel+0x258>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x1f4>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b11      	cmp	r3, #17
 8005822:	d122      	bne.n	800586a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a11      	ldr	r2, [pc, #68]	@ (8005888 <HAL_ADC_ConfigChannel+0x258>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d111      	bne.n	800586a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005846:	4b11      	ldr	r3, [pc, #68]	@ (800588c <HAL_ADC_ConfigChannel+0x25c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a11      	ldr	r2, [pc, #68]	@ (8005890 <HAL_ADC_ConfigChannel+0x260>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	0c9a      	lsrs	r2, r3, #18
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800585c:	e002      	b.n	8005864 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3b01      	subs	r3, #1
 8005862:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f9      	bne.n	800585e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40012300 	.word	0x40012300
 8005884:	40012000 	.word	0x40012000
 8005888:	10000012 	.word	0x10000012
 800588c:	20000044 	.word	0x20000044
 8005890:	431bde83 	.word	0x431bde83

08005894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800589c:	4b79      	ldr	r3, [pc, #484]	@ (8005a84 <ADC_Init+0x1f0>)
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80058ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	4a58      	ldr	r2, [pc, #352]	@ (8005a88 <ADC_Init+0x1f4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800593a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800595c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6899      	ldr	r1, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	e00f      	b.n	8005992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0202 	bic.w	r2, r2, #2
 80059a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6899      	ldr	r1, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	7e1b      	ldrb	r3, [r3, #24]
 80059ac:	005a      	lsls	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80059de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	3b01      	subs	r3, #1
 80059ec:	035a      	lsls	r2, r3, #13
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e007      	b.n	8005a08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	051a      	lsls	r2, r3, #20
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a4a:	025a      	lsls	r2, r3, #9
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	029a      	lsls	r2, r3, #10
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40012300 	.word	0x40012300
 8005a88:	0f000001 	.word	0x0f000001

08005a8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13c      	bne.n	8005b20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d12b      	bne.n	8005b18 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d127      	bne.n	8005b18 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d119      	bne.n	8005b18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0220 	bic.w	r2, r2, #32
 8005af2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7fe fb7f 	bl	800421c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b1e:	e00e      	b.n	8005b3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fd75 	bl	800561c <HAL_ADC_ErrorCallback>
}
 8005b32:	e004      	b.n	8005b3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7fe fb47 	bl	80041e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2240      	movs	r2, #64	@ 0x40
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fd4a 	bl	800561c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bd6:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	60d3      	str	r3, [r2, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000ed00 	.word	0xe000ed00

08005bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <__NVIC_GetPriorityGrouping+0x18>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 0307 	and.w	r3, r3, #7
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db0b      	blt.n	8005c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	f003 021f 	and.w	r2, r3, #31
 8005c20:	4907      	ldr	r1, [pc, #28]	@ (8005c40 <__NVIC_EnableIRQ+0x38>)
 8005c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2001      	movs	r0, #1
 8005c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e100 	.word	0xe000e100

08005c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	6039      	str	r1, [r7, #0]
 8005c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db0a      	blt.n	8005c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	490c      	ldr	r1, [pc, #48]	@ (8005c90 <__NVIC_SetPriority+0x4c>)
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	0112      	lsls	r2, r2, #4
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	440b      	add	r3, r1
 8005c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c6c:	e00a      	b.n	8005c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4908      	ldr	r1, [pc, #32]	@ (8005c94 <__NVIC_SetPriority+0x50>)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	3b04      	subs	r3, #4
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	761a      	strb	r2, [r3, #24]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000e100 	.word	0xe000e100
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	@ 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f1c3 0307 	rsb	r3, r3, #7
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	bf28      	it	cs
 8005cb6:	2304      	movcs	r3, #4
 8005cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d902      	bls.n	8005cc8 <NVIC_EncodePriority+0x30>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3b03      	subs	r3, #3
 8005cc6:	e000      	b.n	8005cca <NVIC_EncodePriority+0x32>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	401a      	ands	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43d9      	mvns	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	4313      	orrs	r3, r2
         );
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3724      	adds	r7, #36	@ 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d10:	d301      	bcc.n	8005d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d16:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <SysTick_Config+0x40>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d1e:	210f      	movs	r1, #15
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d24:	f7ff ff8e 	bl	8005c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <SysTick_Config+0x40>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d2e:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <SysTick_Config+0x40>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff29 	bl	8005ba4 <__NVIC_SetPriorityGrouping>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d6c:	f7ff ff3e 	bl	8005bec <__NVIC_GetPriorityGrouping>
 8005d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7ff ff8e 	bl	8005c98 <NVIC_EncodePriority>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff5d 	bl	8005c44 <__NVIC_SetPriority>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff31 	bl	8005c08 <__NVIC_EnableIRQ>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffa2 	bl	8005d00 <SysTick_Config>
 8005dbc:	4603      	mov	r3, r0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e014      	b.n	8005e02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fe feff 	bl	8004bec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e046      	b.n	8005eac <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	795b      	ldrb	r3, [r3, #5]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_DAC_Start+0x20>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e040      	b.n	8005eac <HAL_DAC_Start+0xa2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6819      	ldr	r1, [r3, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2201      	movs	r2, #1
 8005e44:	409a      	lsls	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8005e5e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005e60:	d11d      	bne.n	8005e9e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0201 	orr.w	r2, r2, #1
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	e014      	b.n	8005e9e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	213c      	movs	r1, #60	@ 0x3c
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d107      	bne.n	8005e9e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0202 	orr.w	r2, r2, #2
 8005e9c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0a2      	b.n	8006016 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	795b      	ldrb	r3, [r3, #5]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_DAC_Start_DMA+0x24>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e09c      	b.n	8006016 <HAL_DAC_Start_DMA+0x15e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d129      	bne.n	8005f42 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8006020 <HAL_DAC_Start_DMA+0x168>)
 8005ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <HAL_DAC_Start_DMA+0x16c>)
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	4a49      	ldr	r2, [pc, #292]	@ (8006028 <HAL_DAC_Start_DMA+0x170>)
 8005f04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_DAC_Start_DMA+0x6c>
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d005      	beq.n	8005f2e <HAL_DAC_Start_DMA+0x76>
 8005f22:	e009      	b.n	8005f38 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	613b      	str	r3, [r7, #16]
        break;
 8005f2c:	e033      	b.n	8005f96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	613b      	str	r3, [r7, #16]
        break;
 8005f36:	e02e      	b.n	8005f96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	613b      	str	r3, [r7, #16]
        break;
 8005f40:	e029      	b.n	8005f96 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4a39      	ldr	r2, [pc, #228]	@ (800602c <HAL_DAC_Start_DMA+0x174>)
 8005f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4a38      	ldr	r2, [pc, #224]	@ (8006030 <HAL_DAC_Start_DMA+0x178>)
 8005f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4a37      	ldr	r2, [pc, #220]	@ (8006034 <HAL_DAC_Start_DMA+0x17c>)
 8005f58:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_DAC_Start_DMA+0xc0>
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d005      	beq.n	8005f82 <HAL_DAC_Start_DMA+0xca>
 8005f76:	e009      	b.n	8005f8c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	613b      	str	r3, [r7, #16]
        break;
 8005f80:	e009      	b.n	8005f96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3318      	adds	r3, #24
 8005f88:	613b      	str	r3, [r7, #16]
        break;
 8005f8a:	e004      	b.n	8005f96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	331c      	adds	r3, #28
 8005f92:	613b      	str	r3, [r7, #16]
        break;
 8005f94:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d111      	bne.n	8005fc0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005faa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6898      	ldr	r0, [r3, #8]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	f000 fa3b 	bl	8006430 <HAL_DMA_Start_IT>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
 8005fbe:	e010      	b.n	8005fe2 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005fce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68d8      	ldr	r0, [r3, #12]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	f000 fa29 	bl	8006430 <HAL_DMA_Start_IT>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10c      	bne.n	8006008 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e005      	b.n	8006014 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f043 0204 	orr.w	r2, r3, #4
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	080061c1 	.word	0x080061c1
 8006024:	080061e3 	.word	0x080061e3
 8006028:	080061ff 	.word	0x080061ff
 800602c:	08006269 	.word	0x08006269
 8006030:	0800628b 	.word	0x0800628b
 8006034:	080062a7 	.word	0x080062a7

08006038 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e03e      	b.n	80060ca <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	43da      	mvns	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	400a      	ands	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2201      	movs	r2, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43da      	mvns	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fa25 	bl	80064e0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e00c      	b.n	80060c2 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fa17 	bl	80064e0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80060c0:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800610e:	b480      	push	{r7}
 8006110:	b089      	sub	sp, #36	@ 0x24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_DAC_ConfigChannel+0x1c>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e042      	b.n	80061b4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	795b      	ldrb	r3, [r3, #5]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_DAC_ConfigChannel+0x2c>
 8006136:	2302      	movs	r3, #2
 8006138:	e03c      	b.n	80061b4 <HAL_DAC_ConfigChannel+0xa6>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2202      	movs	r2, #2
 8006144:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6819      	ldr	r1, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	22c0      	movs	r2, #192	@ 0xc0
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43da      	mvns	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	400a      	ands	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3724      	adds	r7, #36	@ 0x24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff ff7f 	bl	80060d2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	711a      	strb	r2, [r3, #4]
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff ff78 	bl	80060e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f043 0204 	orr.w	r2, r3, #4
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff ff6e 	bl	80060fa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	711a      	strb	r2, [r3, #4]
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff ffd8 	bl	800622c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	711a      	strb	r2, [r3, #4]
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff ffd1 	bl	8006240 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f043 0204 	orr.w	r2, r3, #4
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ffc7 	bl	8006254 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	711a      	strb	r2, [r3, #4]
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062e0:	f7fe ff1e 	bl	8005120 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e099      	b.n	8006424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006310:	e00f      	b.n	8006332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006312:	f7fe ff05 	bl	8005120 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b05      	cmp	r3, #5
 800631e:	d908      	bls.n	8006332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e078      	b.n	8006424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e8      	bne.n	8006312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4b38      	ldr	r3, [pc, #224]	@ (800642c <HAL_DMA_Init+0x158>)
 800634c:	4013      	ands	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800635e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	2b04      	cmp	r3, #4
 800638a:	d107      	bne.n	800639c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	4313      	orrs	r3, r2
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d117      	bne.n	80063f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fadf 	bl	800699c <DMA_CheckFifoParam>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2240      	movs	r2, #64	@ 0x40
 80063e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80063f2:	2301      	movs	r3, #1
 80063f4:	e016      	b.n	8006424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa96 	bl	8006930 <DMA_CalcBaseAndBitshift>
 8006404:	4603      	mov	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640c:	223f      	movs	r2, #63	@ 0x3f
 800640e:	409a      	lsls	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	f010803f 	.word	0xf010803f

08006430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_DMA_Start_IT+0x26>
 8006452:	2302      	movs	r3, #2
 8006454:	e040      	b.n	80064d8 <HAL_DMA_Start_IT+0xa8>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d12f      	bne.n	80064ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa28 	bl	80068d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006488:	223f      	movs	r2, #63	@ 0x3f
 800648a:	409a      	lsls	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0216 	orr.w	r2, r2, #22
 800649e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0208 	orr.w	r2, r2, #8
 80064b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e005      	b.n	80064d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
 80064d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064ee:	f7fe fe17 	bl	8005120 <HAL_GetTick>
 80064f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d008      	beq.n	8006512 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2280      	movs	r2, #128	@ 0x80
 8006504:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e052      	b.n	80065b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0216 	bic.w	r2, r2, #22
 8006520:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006530:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <HAL_DMA_Abort+0x62>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0208 	bic.w	r2, r2, #8
 8006550:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006562:	e013      	b.n	800658c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006564:	f7fe fddc 	bl	8005120 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b05      	cmp	r3, #5
 8006570:	d90c      	bls.n	800658c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2203      	movs	r2, #3
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e015      	b.n	80065b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e4      	bne.n	8006564 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659e:	223f      	movs	r2, #63	@ 0x3f
 80065a0:	409a      	lsls	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065cc:	4b8e      	ldr	r3, [pc, #568]	@ (8006808 <HAL_DMA_IRQHandler+0x248>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a8e      	ldr	r2, [pc, #568]	@ (800680c <HAL_DMA_IRQHandler+0x24c>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0a9b      	lsrs	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ea:	2208      	movs	r2, #8
 80065ec:	409a      	lsls	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01a      	beq.n	800662c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d013      	beq.n	800662c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0204 	bic.w	r2, r2, #4
 8006612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006618:	2208      	movs	r2, #8
 800661a:	409a      	lsls	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	f043 0201 	orr.w	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006630:	2201      	movs	r2, #1
 8006632:	409a      	lsls	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d012      	beq.n	8006662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665a:	f043 0202 	orr.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006666:	2204      	movs	r2, #4
 8006668:	409a      	lsls	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4013      	ands	r3, r2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d012      	beq.n	8006698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	2204      	movs	r2, #4
 8006686:	409a      	lsls	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006690:	f043 0204 	orr.w	r2, r3, #4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800669c:	2210      	movs	r2, #16
 800669e:	409a      	lsls	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d043      	beq.n	8006730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d03c      	beq.n	8006730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ba:	2210      	movs	r2, #16
 80066bc:	409a      	lsls	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d018      	beq.n	8006702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d024      	beq.n	8006730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	e01f      	b.n	8006730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01b      	beq.n	8006730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	e016      	b.n	8006730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670c:	2b00      	cmp	r3, #0
 800670e:	d107      	bne.n	8006720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0208 	bic.w	r2, r2, #8
 800671e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006734:	2220      	movs	r2, #32
 8006736:	409a      	lsls	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 808f 	beq.w	8006860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8087 	beq.w	8006860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006756:	2220      	movs	r2, #32
 8006758:	409a      	lsls	r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b05      	cmp	r3, #5
 8006768:	d136      	bne.n	80067d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0216 	bic.w	r2, r2, #22
 8006778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <HAL_DMA_IRQHandler+0x1da>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0208 	bic.w	r2, r2, #8
 80067a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ae:	223f      	movs	r2, #63	@ 0x3f
 80067b0:	409a      	lsls	r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d07e      	beq.n	80068cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
        }
        return;
 80067d6:	e079      	b.n	80068cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01d      	beq.n	8006822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d031      	beq.n	8006860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
 8006804:	e02c      	b.n	8006860 <HAL_DMA_IRQHandler+0x2a0>
 8006806:	bf00      	nop
 8006808:	20000044 	.word	0x20000044
 800680c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d023      	beq.n	8006860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	e01e      	b.n	8006860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0210 	bic.w	r2, r2, #16
 800683e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006864:	2b00      	cmp	r3, #0
 8006866:	d032      	beq.n	80068ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d022      	beq.n	80068ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2205      	movs	r2, #5
 8006878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3301      	adds	r3, #1
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	429a      	cmp	r2, r3
 8006896:	d307      	bcc.n	80068a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f2      	bne.n	800688c <HAL_DMA_IRQHandler+0x2cc>
 80068a6:	e000      	b.n	80068aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
 80068ca:	e000      	b.n	80068ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80068cc:	bf00      	nop
    }
  }
}
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b40      	cmp	r3, #64	@ 0x40
 8006900:	d108      	bne.n	8006914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006912:	e007      	b.n	8006924 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3b10      	subs	r3, #16
 8006940:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <DMA_CalcBaseAndBitshift+0x64>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800694a:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <DMA_CalcBaseAndBitshift+0x68>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d909      	bls.n	8006972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006970:	e007      	b.n	8006982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	aaaaaaab 	.word	0xaaaaaaab
 8006998:	0801f24c 	.word	0x0801f24c

0800699c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11f      	bne.n	80069f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d856      	bhi.n	8006a6a <DMA_CheckFifoParam+0xce>
 80069bc:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <DMA_CheckFifoParam+0x28>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069e7 	.word	0x080069e7
 80069cc:	080069d5 	.word	0x080069d5
 80069d0:	08006a6b 	.word	0x08006a6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d046      	beq.n	8006a6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e4:	e043      	b.n	8006a6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069ee:	d140      	bne.n	8006a72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f4:	e03d      	b.n	8006a72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fe:	d121      	bne.n	8006a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d837      	bhi.n	8006a76 <DMA_CheckFifoParam+0xda>
 8006a06:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <DMA_CheckFifoParam+0x70>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a23 	.word	0x08006a23
 8006a14:	08006a1d 	.word	0x08006a1d
 8006a18:	08006a35 	.word	0x08006a35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a20:	e030      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d025      	beq.n	8006a7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a32:	e022      	b.n	8006a7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a3c:	d11f      	bne.n	8006a7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a42:	e01c      	b.n	8006a7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d903      	bls.n	8006a52 <DMA_CheckFifoParam+0xb6>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d003      	beq.n	8006a58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a50:	e018      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e015      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00e      	beq.n	8006a82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	e00b      	b.n	8006a82 <DMA_CheckFifoParam+0xe6>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e00a      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e008      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;
 8006a72:	bf00      	nop
 8006a74:	e006      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;
 8006a76:	bf00      	nop
 8006a78:	e004      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <DMA_CheckFifoParam+0xe8>
      break;
 8006a82:	bf00      	nop
    }
  } 
  
  return status; 
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	@ 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	e165      	b.n	8006d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	f040 8154 	bne.w	8006d76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d005      	beq.n	8006ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d130      	bne.n	8006b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	2203      	movs	r2, #3
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 0201 	and.w	r2, r3, #1
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d017      	beq.n	8006b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	2203      	movs	r2, #3
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43db      	mvns	r3, r3
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d123      	bne.n	8006bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	08da      	lsrs	r2, r3, #3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3208      	adds	r2, #8
 8006b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	220f      	movs	r2, #15
 8006ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	08da      	lsrs	r2, r3, #3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3208      	adds	r2, #8
 8006bd2:	69b9      	ldr	r1, [r7, #24]
 8006bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	2203      	movs	r2, #3
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4013      	ands	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 0203 	and.w	r2, r3, #3
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80ae 	beq.w	8006d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006d94 <HAL_GPIO_Init+0x300>)
 8006c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c22:	4a5c      	ldr	r2, [pc, #368]	@ (8006d94 <HAL_GPIO_Init+0x300>)
 8006c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8006d94 <HAL_GPIO_Init+0x300>)
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c36:	4a58      	ldr	r2, [pc, #352]	@ (8006d98 <HAL_GPIO_Init+0x304>)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	3302      	adds	r3, #2
 8006c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	220f      	movs	r2, #15
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	43db      	mvns	r3, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4013      	ands	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8006d9c <HAL_GPIO_Init+0x308>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d025      	beq.n	8006cae <HAL_GPIO_Init+0x21a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a4e      	ldr	r2, [pc, #312]	@ (8006da0 <HAL_GPIO_Init+0x30c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01f      	beq.n	8006caa <HAL_GPIO_Init+0x216>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a4d      	ldr	r2, [pc, #308]	@ (8006da4 <HAL_GPIO_Init+0x310>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d019      	beq.n	8006ca6 <HAL_GPIO_Init+0x212>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a4c      	ldr	r2, [pc, #304]	@ (8006da8 <HAL_GPIO_Init+0x314>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_GPIO_Init+0x20e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006dac <HAL_GPIO_Init+0x318>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00d      	beq.n	8006c9e <HAL_GPIO_Init+0x20a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a4a      	ldr	r2, [pc, #296]	@ (8006db0 <HAL_GPIO_Init+0x31c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d007      	beq.n	8006c9a <HAL_GPIO_Init+0x206>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a49      	ldr	r2, [pc, #292]	@ (8006db4 <HAL_GPIO_Init+0x320>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <HAL_GPIO_Init+0x202>
 8006c92:	2306      	movs	r3, #6
 8006c94:	e00c      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006c96:	2307      	movs	r3, #7
 8006c98:	e00a      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006c9a:	2305      	movs	r3, #5
 8006c9c:	e008      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	e006      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e004      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e002      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <HAL_GPIO_Init+0x21c>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	f002 0203 	and.w	r2, r2, #3
 8006cb6:	0092      	lsls	r2, r2, #2
 8006cb8:	4093      	lsls	r3, r2
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cc0:	4935      	ldr	r1, [pc, #212]	@ (8006d98 <HAL_GPIO_Init+0x304>)
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	089b      	lsrs	r3, r3, #2
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cce:	4b3a      	ldr	r3, [pc, #232]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cf2:	4a31      	ldr	r2, [pc, #196]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d1c:	4a26      	ldr	r2, [pc, #152]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d22:	4b25      	ldr	r3, [pc, #148]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d46:	4a1c      	ldr	r2, [pc, #112]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d70:	4a11      	ldr	r2, [pc, #68]	@ (8006db8 <HAL_GPIO_Init+0x324>)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b0f      	cmp	r3, #15
 8006d80:	f67f ae96 	bls.w	8006ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3724      	adds	r7, #36	@ 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40023800 	.word	0x40023800
 8006d98:	40013800 	.word	0x40013800
 8006d9c:	40020000 	.word	0x40020000
 8006da0:	40020400 	.word	0x40020400
 8006da4:	40020800 	.word	0x40020800
 8006da8:	40020c00 	.word	0x40020c00
 8006dac:	40021000 	.word	0x40021000
 8006db0:	40021400 	.word	0x40021400
 8006db4:	40021800 	.word	0x40021800
 8006db8:	40013c00 	.word	0x40013c00

08006dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	807b      	strh	r3, [r7, #2]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006dcc:	787b      	ldrb	r3, [r7, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dd2:	887a      	ldrh	r2, [r7, #2]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006dd8:	e003      	b.n	8006de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006dda:	887b      	ldrh	r3, [r7, #2]
 8006ddc:	041a      	lsls	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	619a      	str	r2, [r3, #24]
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e00:	887a      	ldrh	r2, [r7, #2]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4013      	ands	r3, r2
 8006e06:	041a      	lsls	r2, r3, #16
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	43d9      	mvns	r1, r3
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	400b      	ands	r3, r1
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	619a      	str	r2, [r3, #24]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0cc      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e38:	4b68      	ldr	r3, [pc, #416]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90c      	bls.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b65      	ldr	r3, [pc, #404]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b63      	ldr	r3, [pc, #396]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0b8      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d020      	beq.n	8006eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e78:	4b59      	ldr	r3, [pc, #356]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e90:	4b53      	ldr	r3, [pc, #332]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a52      	ldr	r2, [pc, #328]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	494d      	ldr	r1, [pc, #308]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d044      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec2:	4b47      	ldr	r3, [pc, #284]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d119      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e06f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e067      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4b37      	ldr	r3, [pc, #220]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4934      	ldr	r1, [pc, #208]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f14:	f7fe f904 	bl	8005120 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1c:	f7fe f900 	bl	8005120 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e04f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1eb      	bne.n	8006f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f44:	4b25      	ldr	r3, [pc, #148]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d20c      	bcs.n	8006f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f52:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b20      	ldr	r3, [pc, #128]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e032      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f78:	4b19      	ldr	r3, [pc, #100]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4916      	ldr	r1, [pc, #88]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f96:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	490e      	ldr	r1, [pc, #56]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006faa:	f000 f855 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	490a      	ldr	r1, [pc, #40]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006fbc:	5ccb      	ldrb	r3, [r1, r3]
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	4a09      	ldr	r2, [pc, #36]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006fc6:	4b09      	ldr	r3, [pc, #36]	@ (8006fec <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe f864 	bl	8005098 <HAL_InitTick>

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023c00 	.word	0x40023c00
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	0801f234 	.word	0x0801f234
 8006fe8:	20000044 	.word	0x20000044
 8006fec:	20000048 	.word	0x20000048

08006ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ff4:	4b03      	ldr	r3, [pc, #12]	@ (8007004 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000044 	.word	0x20000044

08007008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800700c:	f7ff fff0 	bl	8006ff0 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0a9b      	lsrs	r3, r3, #10
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4903      	ldr	r1, [pc, #12]	@ (800702c <HAL_RCC_GetPCLK1Freq+0x24>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	0801f244 	.word	0x0801f244

08007030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007034:	f7ff ffdc 	bl	8006ff0 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b05      	ldr	r3, [pc, #20]	@ (8007050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	0b5b      	lsrs	r3, r3, #13
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4903      	ldr	r1, [pc, #12]	@ (8007054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40023800 	.word	0x40023800
 8007054:	0801f244 	.word	0x0801f244

08007058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800705c:	b0a6      	sub	sp, #152	@ 0x98
 800705e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800707e:	4bc8      	ldr	r3, [pc, #800]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b0c      	cmp	r3, #12
 8007088:	f200 817e 	bhi.w	8007388 <HAL_RCC_GetSysClockFreq+0x330>
 800708c:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <HAL_RCC_GetSysClockFreq+0x3c>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070c9 	.word	0x080070c9
 8007098:	08007389 	.word	0x08007389
 800709c:	08007389 	.word	0x08007389
 80070a0:	08007389 	.word	0x08007389
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	08007389 	.word	0x08007389
 80070ac:	08007389 	.word	0x08007389
 80070b0:	08007389 	.word	0x08007389
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	08007389 	.word	0x08007389
 80070bc:	08007389 	.word	0x08007389
 80070c0:	08007389 	.word	0x08007389
 80070c4:	08007243 	.word	0x08007243
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070c8:	4bb6      	ldr	r3, [pc, #728]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80070ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80070ce:	e15f      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070d0:	4bb5      	ldr	r3, [pc, #724]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80070d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80070d6:	e15b      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070d8:	4bb1      	ldr	r3, [pc, #708]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070e4:	4bae      	ldr	r3, [pc, #696]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d031      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f0:	4bab      	ldr	r3, [pc, #684]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	099b      	lsrs	r3, r3, #6
 80070f6:	2200      	movs	r2, #0
 80070f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007102:	663b      	str	r3, [r7, #96]	@ 0x60
 8007104:	2300      	movs	r3, #0
 8007106:	667b      	str	r3, [r7, #100]	@ 0x64
 8007108:	4ba7      	ldr	r3, [pc, #668]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800710a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800710e:	462a      	mov	r2, r5
 8007110:	fb03 f202 	mul.w	r2, r3, r2
 8007114:	2300      	movs	r3, #0
 8007116:	4621      	mov	r1, r4
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	4aa2      	ldr	r2, [pc, #648]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8007120:	4621      	mov	r1, r4
 8007122:	fba1 1202 	umull	r1, r2, r1, r2
 8007126:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007128:	460a      	mov	r2, r1
 800712a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800712c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800712e:	4413      	add	r3, r2
 8007130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007136:	2200      	movs	r2, #0
 8007138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800713a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800713c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007140:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007144:	f7f9 fda0 	bl	8000c88 <__aeabi_uldivmod>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4613      	mov	r3, r2
 800714e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007152:	e064      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007154:	4b92      	ldr	r3, [pc, #584]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	099b      	lsrs	r3, r3, #6
 800715a:	2200      	movs	r2, #0
 800715c:	653b      	str	r3, [r7, #80]	@ 0x50
 800715e:	657a      	str	r2, [r7, #84]	@ 0x54
 8007160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007168:	2300      	movs	r3, #0
 800716a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800716c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8007170:	4622      	mov	r2, r4
 8007172:	462b      	mov	r3, r5
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	f04f 0100 	mov.w	r1, #0
 800717c:	0159      	lsls	r1, r3, #5
 800717e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007182:	0150      	lsls	r0, r2, #5
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4621      	mov	r1, r4
 800718a:	1a51      	subs	r1, r2, r1
 800718c:	6139      	str	r1, [r7, #16]
 800718e:	4629      	mov	r1, r5
 8007190:	eb63 0301 	sbc.w	r3, r3, r1
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071a2:	4659      	mov	r1, fp
 80071a4:	018b      	lsls	r3, r1, #6
 80071a6:	4651      	mov	r1, sl
 80071a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ac:	4651      	mov	r1, sl
 80071ae:	018a      	lsls	r2, r1, #6
 80071b0:	4651      	mov	r1, sl
 80071b2:	ebb2 0801 	subs.w	r8, r2, r1
 80071b6:	4659      	mov	r1, fp
 80071b8:	eb63 0901 	sbc.w	r9, r3, r1
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071d0:	4690      	mov	r8, r2
 80071d2:	4699      	mov	r9, r3
 80071d4:	4623      	mov	r3, r4
 80071d6:	eb18 0303 	adds.w	r3, r8, r3
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	462b      	mov	r3, r5
 80071de:	eb49 0303 	adc.w	r3, r9, r3
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071f0:	4629      	mov	r1, r5
 80071f2:	028b      	lsls	r3, r1, #10
 80071f4:	4621      	mov	r1, r4
 80071f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071fa:	4621      	mov	r1, r4
 80071fc:	028a      	lsls	r2, r1, #10
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007206:	2200      	movs	r2, #0
 8007208:	643b      	str	r3, [r7, #64]	@ 0x40
 800720a:	647a      	str	r2, [r7, #68]	@ 0x44
 800720c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007210:	f7f9 fd3a 	bl	8000c88 <__aeabi_uldivmod>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4613      	mov	r3, r2
 800721a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800721e:	4b60      	ldr	r3, [pc, #384]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	3301      	adds	r3, #1
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8007230:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007240:	e0a6      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007242:	4b57      	ldr	r3, [pc, #348]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724e:	4b54      	ldr	r3, [pc, #336]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02a      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725a:	4b51      	ldr	r3, [pc, #324]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	099b      	lsrs	r3, r3, #6
 8007260:	2200      	movs	r2, #0
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800726c:	2100      	movs	r1, #0
 800726e:	4b4e      	ldr	r3, [pc, #312]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8007270:	fb03 f201 	mul.w	r2, r3, r1
 8007274:	2300      	movs	r3, #0
 8007276:	fb00 f303 	mul.w	r3, r0, r3
 800727a:	4413      	add	r3, r2
 800727c:	4a4a      	ldr	r2, [pc, #296]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800727e:	fba0 1202 	umull	r1, r2, r0, r2
 8007282:	677a      	str	r2, [r7, #116]	@ 0x74
 8007284:	460a      	mov	r2, r1
 8007286:	673a      	str	r2, [r7, #112]	@ 0x70
 8007288:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800728a:	4413      	add	r3, r2
 800728c:	677b      	str	r3, [r7, #116]	@ 0x74
 800728e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007292:	2200      	movs	r2, #0
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30
 8007296:	637a      	str	r2, [r7, #52]	@ 0x34
 8007298:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800729c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80072a0:	f7f9 fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4613      	mov	r3, r2
 80072aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072ae:	e05b      	b.n	8007368 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b0:	4b3b      	ldr	r3, [pc, #236]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	2200      	movs	r2, #0
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	f04f 0000 	mov.w	r0, #0
 80072d4:	f04f 0100 	mov.w	r1, #0
 80072d8:	0159      	lsls	r1, r3, #5
 80072da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072de:	0150      	lsls	r0, r2, #5
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4641      	mov	r1, r8
 80072e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007304:	ebb2 040a 	subs.w	r4, r2, sl
 8007308:	eb63 050b 	sbc.w	r5, r3, fp
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	00eb      	lsls	r3, r5, #3
 8007316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800731a:	00e2      	lsls	r2, r4, #3
 800731c:	4614      	mov	r4, r2
 800731e:	461d      	mov	r5, r3
 8007320:	4643      	mov	r3, r8
 8007322:	18e3      	adds	r3, r4, r3
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	464b      	mov	r3, r9
 8007328:	eb45 0303 	adc.w	r3, r5, r3
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800733a:	4629      	mov	r1, r5
 800733c:	028b      	lsls	r3, r1, #10
 800733e:	4621      	mov	r1, r4
 8007340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007344:	4621      	mov	r1, r4
 8007346:	028a      	lsls	r2, r1, #10
 8007348:	4610      	mov	r0, r2
 800734a:	4619      	mov	r1, r3
 800734c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007350:	2200      	movs	r2, #0
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	61fa      	str	r2, [r7, #28]
 8007356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800735a:	f7f9 fc95 	bl	8000c88 <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4613      	mov	r3, r2
 8007364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007368:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	0f1b      	lsrs	r3, r3, #28
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8007376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800737a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800737e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007386:	e003      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007388:	4b06      	ldr	r3, [pc, #24]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800738a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800738e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8007394:	4618      	mov	r0, r3
 8007396:	3798      	adds	r7, #152	@ 0x98
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	017d7840 	.word	0x017d7840

080073ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e28d      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8083 	beq.w	80074d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80073cc:	4b94      	ldr	r3, [pc, #592]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 030c 	and.w	r3, r3, #12
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d019      	beq.n	800740c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80073d8:	4b91      	ldr	r3, [pc, #580]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d106      	bne.n	80073f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80073e4:	4b8e      	ldr	r3, [pc, #568]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073f0:	d00c      	beq.n	800740c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f2:	4b8b      	ldr	r3, [pc, #556]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80073fa:	2b0c      	cmp	r3, #12
 80073fc:	d112      	bne.n	8007424 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073fe:	4b88      	ldr	r3, [pc, #544]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800740a:	d10b      	bne.n	8007424 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800740c:	4b84      	ldr	r3, [pc, #528]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05b      	beq.n	80074d0 <HAL_RCC_OscConfig+0x124>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d157      	bne.n	80074d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e25a      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d106      	bne.n	800743c <HAL_RCC_OscConfig+0x90>
 800742e:	4b7c      	ldr	r3, [pc, #496]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a7b      	ldr	r2, [pc, #492]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	e01d      	b.n	8007478 <HAL_RCC_OscConfig+0xcc>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007444:	d10c      	bne.n	8007460 <HAL_RCC_OscConfig+0xb4>
 8007446:	4b76      	ldr	r3, [pc, #472]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a75      	ldr	r2, [pc, #468]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800744c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	4b73      	ldr	r3, [pc, #460]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a72      	ldr	r2, [pc, #456]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	e00b      	b.n	8007478 <HAL_RCC_OscConfig+0xcc>
 8007460:	4b6f      	ldr	r3, [pc, #444]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a6e      	ldr	r2, [pc, #440]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4b6c      	ldr	r3, [pc, #432]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6b      	ldr	r2, [pc, #428]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d013      	beq.n	80074a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fd fe4e 	bl	8005120 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007488:	f7fd fe4a 	bl	8005120 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b64      	cmp	r3, #100	@ 0x64
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e21f      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b61      	ldr	r3, [pc, #388]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCC_OscConfig+0xdc>
 80074a6:	e014      	b.n	80074d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fd fe3a 	bl	8005120 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b0:	f7fd fe36 	bl	8005120 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	@ 0x64
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e20b      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074c2:	4b57      	ldr	r3, [pc, #348]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x104>
 80074ce:	e000      	b.n	80074d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d06f      	beq.n	80075be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074de:	4b50      	ldr	r3, [pc, #320]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 030c 	and.w	r3, r3, #12
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d017      	beq.n	800751a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80074ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d105      	bne.n	8007502 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80074f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007502:	4b47      	ldr	r3, [pc, #284]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800750a:	2b0c      	cmp	r3, #12
 800750c:	d11c      	bne.n	8007548 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800750e:	4b44      	ldr	r3, [pc, #272]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d116      	bne.n	8007548 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800751a:	4b41      	ldr	r3, [pc, #260]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_RCC_OscConfig+0x186>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d001      	beq.n	8007532 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e1d3      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007532:	4b3b      	ldr	r3, [pc, #236]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4937      	ldr	r1, [pc, #220]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007546:	e03a      	b.n	80075be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d020      	beq.n	8007592 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007550:	4b34      	ldr	r3, [pc, #208]	@ (8007624 <HAL_RCC_OscConfig+0x278>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007556:	f7fd fde3 	bl	8005120 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800755e:	f7fd fddf 	bl	8005120 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e1b4      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007570:	4b2b      	ldr	r3, [pc, #172]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757c:	4b28      	ldr	r3, [pc, #160]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4925      	ldr	r1, [pc, #148]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]
 8007590:	e015      	b.n	80075be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007592:	4b24      	ldr	r3, [pc, #144]	@ (8007624 <HAL_RCC_OscConfig+0x278>)
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fd fdc2 	bl	8005120 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a0:	f7fd fdbe 	bl	8005120 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e193      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f0      	bne.n	80075a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d036      	beq.n	8007638 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075d2:	4b15      	ldr	r3, [pc, #84]	@ (8007628 <HAL_RCC_OscConfig+0x27c>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fd fda2 	bl	8005120 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e0:	f7fd fd9e 	bl	8005120 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e173      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <HAL_RCC_OscConfig+0x274>)
 80075f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x234>
 80075fe:	e01b      	b.n	8007638 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007600:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <HAL_RCC_OscConfig+0x27c>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007606:	f7fd fd8b 	bl	8005120 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800760c:	e00e      	b.n	800762c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800760e:	f7fd fd87 	bl	8005120 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d907      	bls.n	800762c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e15c      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
 8007620:	40023800 	.word	0x40023800
 8007624:	42470000 	.word	0x42470000
 8007628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800762c:	4b8a      	ldr	r3, [pc, #552]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800762e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1ea      	bne.n	800760e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8097 	beq.w	8007774 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800764a:	4b83      	ldr	r3, [pc, #524]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10f      	bne.n	8007676 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	4b7f      	ldr	r3, [pc, #508]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	4a7e      	ldr	r2, [pc, #504]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007664:	6413      	str	r3, [r2, #64]	@ 0x40
 8007666:	4b7c      	ldr	r3, [pc, #496]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007672:	2301      	movs	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007676:	4b79      	ldr	r3, [pc, #484]	@ (800785c <HAL_RCC_OscConfig+0x4b0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767e:	2b00      	cmp	r3, #0
 8007680:	d118      	bne.n	80076b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007682:	4b76      	ldr	r3, [pc, #472]	@ (800785c <HAL_RCC_OscConfig+0x4b0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a75      	ldr	r2, [pc, #468]	@ (800785c <HAL_RCC_OscConfig+0x4b0>)
 8007688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800768e:	f7fd fd47 	bl	8005120 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007696:	f7fd fd43 	bl	8005120 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e118      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a8:	4b6c      	ldr	r3, [pc, #432]	@ (800785c <HAL_RCC_OscConfig+0x4b0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0f0      	beq.n	8007696 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d106      	bne.n	80076ca <HAL_RCC_OscConfig+0x31e>
 80076bc:	4b66      	ldr	r3, [pc, #408]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c0:	4a65      	ldr	r2, [pc, #404]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c8:	e01c      	b.n	8007704 <HAL_RCC_OscConfig+0x358>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d10c      	bne.n	80076ec <HAL_RCC_OscConfig+0x340>
 80076d2:	4b61      	ldr	r3, [pc, #388]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d6:	4a60      	ldr	r2, [pc, #384]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076d8:	f043 0304 	orr.w	r3, r3, #4
 80076dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80076de:	4b5e      	ldr	r3, [pc, #376]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	4a5d      	ldr	r2, [pc, #372]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ea:	e00b      	b.n	8007704 <HAL_RCC_OscConfig+0x358>
 80076ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f0:	4a59      	ldr	r2, [pc, #356]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076f8:	4b57      	ldr	r3, [pc, #348]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076fc:	4a56      	ldr	r2, [pc, #344]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80076fe:	f023 0304 	bic.w	r3, r3, #4
 8007702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d015      	beq.n	8007738 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770c:	f7fd fd08 	bl	8005120 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007712:	e00a      	b.n	800772a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007714:	f7fd fd04 	bl	8005120 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007722:	4293      	cmp	r3, r2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e0d7      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772a:	4b4b      	ldr	r3, [pc, #300]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800772c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0ee      	beq.n	8007714 <HAL_RCC_OscConfig+0x368>
 8007736:	e014      	b.n	8007762 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007738:	f7fd fcf2 	bl	8005120 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800773e:	e00a      	b.n	8007756 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007740:	f7fd fcee 	bl	8005120 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e0c1      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007756:	4b40      	ldr	r3, [pc, #256]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1ee      	bne.n	8007740 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d105      	bne.n	8007774 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007768:	4b3b      	ldr	r3, [pc, #236]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800776a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776c:	4a3a      	ldr	r2, [pc, #232]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 800776e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 80ad 	beq.w	80078d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800777e:	4b36      	ldr	r3, [pc, #216]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 030c 	and.w	r3, r3, #12
 8007786:	2b08      	cmp	r3, #8
 8007788:	d060      	beq.n	800784c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d145      	bne.n	800781e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007792:	4b33      	ldr	r3, [pc, #204]	@ (8007860 <HAL_RCC_OscConfig+0x4b4>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fd fcc2 	bl	8005120 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a0:	f7fd fcbe 	bl	8005120 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e093      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	4b29      	ldr	r3, [pc, #164]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69da      	ldr	r2, [r3, #28]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	019b      	lsls	r3, r3, #6
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	3b01      	subs	r3, #1
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	061b      	lsls	r3, r3, #24
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e8:	071b      	lsls	r3, r3, #28
 80077ea:	491b      	ldr	r1, [pc, #108]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007860 <HAL_RCC_OscConfig+0x4b4>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f6:	f7fd fc93 	bl	8005120 <HAL_GetTick>
 80077fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077fe:	f7fd fc8f 	bl	8005120 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e064      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007810:	4b11      	ldr	r3, [pc, #68]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0f0      	beq.n	80077fe <HAL_RCC_OscConfig+0x452>
 800781c:	e05c      	b.n	80078d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781e:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <HAL_RCC_OscConfig+0x4b4>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007824:	f7fd fc7c 	bl	8005120 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800782c:	f7fd fc78 	bl	8005120 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e04d      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783e:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <HAL_RCC_OscConfig+0x4ac>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <HAL_RCC_OscConfig+0x480>
 800784a:	e045      	b.n	80078d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d107      	bne.n	8007864 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e040      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
 8007858:	40023800 	.word	0x40023800
 800785c:	40007000 	.word	0x40007000
 8007860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007864:	4b1f      	ldr	r3, [pc, #124]	@ (80078e4 <HAL_RCC_OscConfig+0x538>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d030      	beq.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800787c:	429a      	cmp	r2, r3
 800787e:	d129      	bne.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800788a:	429a      	cmp	r2, r3
 800788c:	d122      	bne.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007894:	4013      	ands	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800789a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800789c:	4293      	cmp	r3, r2
 800789e:	d119      	bne.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	3b01      	subs	r3, #1
 80078ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d10f      	bne.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d107      	bne.n	80078d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d001      	beq.n	80078d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40023800 	.word	0x40023800

080078e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e041      	b.n	800797e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fd f9e6 	bl	8004ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f000 f95e 	bl	8007be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d001      	beq.n	80079a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e046      	b.n	8007a2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a23      	ldr	r2, [pc, #140]	@ (8007a3c <HAL_TIM_Base_Start+0xb4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d022      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ba:	d01d      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a40 <HAL_TIM_Base_Start+0xb8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d018      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007a44 <HAL_TIM_Base_Start+0xbc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d013      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a48 <HAL_TIM_Base_Start+0xc0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00e      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1b      	ldr	r2, [pc, #108]	@ (8007a4c <HAL_TIM_Base_Start+0xc4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d009      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a19      	ldr	r2, [pc, #100]	@ (8007a50 <HAL_TIM_Base_Start+0xc8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a18      	ldr	r2, [pc, #96]	@ (8007a54 <HAL_TIM_Base_Start+0xcc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d111      	bne.n	8007a1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d010      	beq.n	8007a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	e007      	b.n	8007a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40001800 	.word	0x40001800

08007a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_TIM_ConfigClockSource+0x1c>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e0b4      	b.n	8007bde <HAL_TIM_ConfigClockSource+0x186>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aac:	d03e      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab2:	f200 8087 	bhi.w	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aba:	f000 8086 	beq.w	8007bca <HAL_TIM_ConfigClockSource+0x172>
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac2:	d87f      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ac4:	2b70      	cmp	r3, #112	@ 0x70
 8007ac6:	d01a      	beq.n	8007afe <HAL_TIM_ConfigClockSource+0xa6>
 8007ac8:	2b70      	cmp	r3, #112	@ 0x70
 8007aca:	d87b      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007acc:	2b60      	cmp	r3, #96	@ 0x60
 8007ace:	d050      	beq.n	8007b72 <HAL_TIM_ConfigClockSource+0x11a>
 8007ad0:	2b60      	cmp	r3, #96	@ 0x60
 8007ad2:	d877      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad4:	2b50      	cmp	r3, #80	@ 0x50
 8007ad6:	d03c      	beq.n	8007b52 <HAL_TIM_ConfigClockSource+0xfa>
 8007ad8:	2b50      	cmp	r3, #80	@ 0x50
 8007ada:	d873      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007adc:	2b40      	cmp	r3, #64	@ 0x40
 8007ade:	d058      	beq.n	8007b92 <HAL_TIM_ConfigClockSource+0x13a>
 8007ae0:	2b40      	cmp	r3, #64	@ 0x40
 8007ae2:	d86f      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae4:	2b30      	cmp	r3, #48	@ 0x30
 8007ae6:	d064      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ae8:	2b30      	cmp	r3, #48	@ 0x30
 8007aea:	d86b      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d060      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d867      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05c      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d05a      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007afc:	e062      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b0e:	f000 f98b 	bl	8007e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	609a      	str	r2, [r3, #8]
      break;
 8007b2a:	e04f      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b3c:	f000 f974 	bl	8007e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b4e:	609a      	str	r2, [r3, #8]
      break;
 8007b50:	e03c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f000 f8e8 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2150      	movs	r1, #80	@ 0x50
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f941 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007b70:	e02c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f000 f907 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2160      	movs	r1, #96	@ 0x60
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f931 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007b90:	e01c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f000 f8c8 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2140      	movs	r1, #64	@ 0x40
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f921 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007bb0:	e00c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f000 f918 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007bc2:	e003      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc8:	e000      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a43      	ldr	r2, [pc, #268]	@ (8007d08 <TIM_Base_SetConfig+0x120>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d013      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c06:	d00f      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a40      	ldr	r2, [pc, #256]	@ (8007d0c <TIM_Base_SetConfig+0x124>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00b      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a3f      	ldr	r2, [pc, #252]	@ (8007d10 <TIM_Base_SetConfig+0x128>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d007      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8007d14 <TIM_Base_SetConfig+0x12c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d003      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a3d      	ldr	r2, [pc, #244]	@ (8007d18 <TIM_Base_SetConfig+0x130>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a32      	ldr	r2, [pc, #200]	@ (8007d08 <TIM_Base_SetConfig+0x120>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d02b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c48:	d027      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8007d0c <TIM_Base_SetConfig+0x124>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d023      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a2e      	ldr	r2, [pc, #184]	@ (8007d10 <TIM_Base_SetConfig+0x128>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01f      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d14 <TIM_Base_SetConfig+0x12c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a2c      	ldr	r2, [pc, #176]	@ (8007d18 <TIM_Base_SetConfig+0x130>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d017      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d1c <TIM_Base_SetConfig+0x134>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a2a      	ldr	r2, [pc, #168]	@ (8007d20 <TIM_Base_SetConfig+0x138>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00f      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a29      	ldr	r2, [pc, #164]	@ (8007d24 <TIM_Base_SetConfig+0x13c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a28      	ldr	r2, [pc, #160]	@ (8007d28 <TIM_Base_SetConfig+0x140>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a27      	ldr	r2, [pc, #156]	@ (8007d2c <TIM_Base_SetConfig+0x144>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a26      	ldr	r2, [pc, #152]	@ (8007d30 <TIM_Base_SetConfig+0x148>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d108      	bne.n	8007cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8007d08 <TIM_Base_SetConfig+0x120>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_Base_SetConfig+0xf2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a10      	ldr	r2, [pc, #64]	@ (8007d18 <TIM_Base_SetConfig+0x130>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d103      	bne.n	8007ce2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	691a      	ldr	r2, [r3, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f043 0204 	orr.w	r2, r3, #4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40010400 	.word	0x40010400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800
 8007d28:	40001800 	.word	0x40001800
 8007d2c:	40001c00 	.word	0x40001c00
 8007d30:	40002000 	.word	0x40002000

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f023 0210 	bic.w	r2, r3, #16
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f043 0307 	orr.w	r3, r3, #7
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	021a      	lsls	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	609a      	str	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e05a      	b.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a21      	ldr	r2, [pc, #132]	@ (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ecc:	d01d      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a18      	ldr	r2, [pc, #96]	@ (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	@ (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a15      	ldr	r2, [pc, #84]	@ (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10c      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40010400 	.word	0x40010400
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40001800 	.word	0x40001800

08007f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e042      	b.n	8007ff8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fc fecc 	bl	8004d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2224      	movs	r2, #36	@ 0x24
 8007f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f973 	bl	8008290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08a      	sub	sp, #40	@ 0x28
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b20      	cmp	r3, #32
 800801e:	d175      	bne.n	800810c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_UART_Transmit+0x2c>
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e06e      	b.n	800810e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2221      	movs	r2, #33	@ 0x21
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800803e:	f7fd f86f 	bl	8005120 <HAL_GetTick>
 8008042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008058:	d108      	bne.n	800806c <HAL_UART_Transmit+0x6c>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e003      	b.n	8008074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008074:	e02e      	b.n	80080d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	2180      	movs	r1, #128	@ 0x80
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f848 	bl	8008116 <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e03a      	b.n	800810e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3302      	adds	r3, #2
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	e007      	b.n	80080c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	3301      	adds	r3, #1
 80080c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1cb      	bne.n	8008076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	2140      	movs	r1, #64	@ 0x40
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f814 	bl	8008116 <UART_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e006      	b.n	800810e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	e03b      	b.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800812e:	d037      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008130:	f7fc fff6 	bl	8005120 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <UART_WaitOnFlagUntilTimeout+0x30>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e03a      	b.n	80081c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d020      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b40      	cmp	r3, #64	@ 0x40
 8008162:	d01d      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b08      	cmp	r3, #8
 8008170:	d116      	bne.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f81d 	bl	80081c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2208      	movs	r2, #8
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e00f      	b.n	80081c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4013      	ands	r3, r2
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	bf0c      	ite	eq
 80081b0:	2301      	moveq	r3, #1
 80081b2:	2300      	movne	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d0b4      	beq.n	8008128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b095      	sub	sp, #84	@ 0x54
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e5      	bne.n	80081d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3314      	adds	r3, #20
 800820a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	61fb      	str	r3, [r7, #28]
   return(result);
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800822a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e5      	bne.n	8008204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823c:	2b01      	cmp	r3, #1
 800823e:	d119      	bne.n	8008274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	330c      	adds	r3, #12
 8008246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	647b      	str	r3, [r7, #68]	@ 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008260:	61ba      	str	r2, [r7, #24]
 8008262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	613b      	str	r3, [r7, #16]
   return(result);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e5      	bne.n	8008240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008282:	bf00      	nop
 8008284:	3754      	adds	r7, #84	@ 0x54
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
	...

08008290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008294:	b0c0      	sub	sp, #256	@ 0x100
 8008296:	af00      	add	r7, sp, #0
 8008298:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ac:	68d9      	ldr	r1, [r3, #12]
 80082ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	ea40 0301 	orr.w	r3, r0, r1
 80082b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80082e8:	f021 010c 	bic.w	r1, r1, #12
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082f6:	430b      	orrs	r3, r1
 80082f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830a:	6999      	ldr	r1, [r3, #24]
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	ea40 0301 	orr.w	r3, r0, r1
 8008316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b8f      	ldr	r3, [pc, #572]	@ (800855c <UART_SetConfig+0x2cc>)
 8008320:	429a      	cmp	r2, r3
 8008322:	d005      	beq.n	8008330 <UART_SetConfig+0xa0>
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b8d      	ldr	r3, [pc, #564]	@ (8008560 <UART_SetConfig+0x2d0>)
 800832c:	429a      	cmp	r2, r3
 800832e:	d104      	bne.n	800833a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008330:	f7fe fe7e 	bl	8007030 <HAL_RCC_GetPCLK2Freq>
 8008334:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008338:	e003      	b.n	8008342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800833a:	f7fe fe65 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 800833e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800834c:	f040 810c 	bne.w	8008568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008354:	2200      	movs	r2, #0
 8008356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800835a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800835e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008362:	4622      	mov	r2, r4
 8008364:	462b      	mov	r3, r5
 8008366:	1891      	adds	r1, r2, r2
 8008368:	65b9      	str	r1, [r7, #88]	@ 0x58
 800836a:	415b      	adcs	r3, r3
 800836c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800836e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008372:	4621      	mov	r1, r4
 8008374:	eb12 0801 	adds.w	r8, r2, r1
 8008378:	4629      	mov	r1, r5
 800837a:	eb43 0901 	adc.w	r9, r3, r1
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800838a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800838e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008392:	4690      	mov	r8, r2
 8008394:	4699      	mov	r9, r3
 8008396:	4623      	mov	r3, r4
 8008398:	eb18 0303 	adds.w	r3, r8, r3
 800839c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083a0:	462b      	mov	r3, r5
 80083a2:	eb49 0303 	adc.w	r3, r9, r3
 80083a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80083ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80083be:	460b      	mov	r3, r1
 80083c0:	18db      	adds	r3, r3, r3
 80083c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80083c4:	4613      	mov	r3, r2
 80083c6:	eb42 0303 	adc.w	r3, r2, r3
 80083ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80083cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80083d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80083d4:	f7f8 fc58 	bl	8000c88 <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4b61      	ldr	r3, [pc, #388]	@ (8008564 <UART_SetConfig+0x2d4>)
 80083de:	fba3 2302 	umull	r2, r3, r3, r2
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	011c      	lsls	r4, r3, #4
 80083e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80083f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	1891      	adds	r1, r2, r2
 80083fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008400:	415b      	adcs	r3, r3
 8008402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008408:	4641      	mov	r1, r8
 800840a:	eb12 0a01 	adds.w	sl, r2, r1
 800840e:	4649      	mov	r1, r9
 8008410:	eb43 0b01 	adc.w	fp, r3, r1
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008428:	4692      	mov	sl, r2
 800842a:	469b      	mov	fp, r3
 800842c:	4643      	mov	r3, r8
 800842e:	eb1a 0303 	adds.w	r3, sl, r3
 8008432:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008436:	464b      	mov	r3, r9
 8008438:	eb4b 0303 	adc.w	r3, fp, r3
 800843c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800844c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008454:	460b      	mov	r3, r1
 8008456:	18db      	adds	r3, r3, r3
 8008458:	643b      	str	r3, [r7, #64]	@ 0x40
 800845a:	4613      	mov	r3, r2
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	647b      	str	r3, [r7, #68]	@ 0x44
 8008462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800846a:	f7f8 fc0d 	bl	8000c88 <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4611      	mov	r1, r2
 8008474:	4b3b      	ldr	r3, [pc, #236]	@ (8008564 <UART_SetConfig+0x2d4>)
 8008476:	fba3 2301 	umull	r2, r3, r3, r1
 800847a:	095b      	lsrs	r3, r3, #5
 800847c:	2264      	movs	r2, #100	@ 0x64
 800847e:	fb02 f303 	mul.w	r3, r2, r3
 8008482:	1acb      	subs	r3, r1, r3
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800848a:	4b36      	ldr	r3, [pc, #216]	@ (8008564 <UART_SetConfig+0x2d4>)
 800848c:	fba3 2302 	umull	r2, r3, r3, r2
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008498:	441c      	add	r4, r3
 800849a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80084a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80084ac:	4642      	mov	r2, r8
 80084ae:	464b      	mov	r3, r9
 80084b0:	1891      	adds	r1, r2, r2
 80084b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80084b4:	415b      	adcs	r3, r3
 80084b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80084bc:	4641      	mov	r1, r8
 80084be:	1851      	adds	r1, r2, r1
 80084c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80084c2:	4649      	mov	r1, r9
 80084c4:	414b      	adcs	r3, r1
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80084d4:	4659      	mov	r1, fp
 80084d6:	00cb      	lsls	r3, r1, #3
 80084d8:	4651      	mov	r1, sl
 80084da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084de:	4651      	mov	r1, sl
 80084e0:	00ca      	lsls	r2, r1, #3
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	4642      	mov	r2, r8
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084f0:	464b      	mov	r3, r9
 80084f2:	460a      	mov	r2, r1
 80084f4:	eb42 0303 	adc.w	r3, r2, r3
 80084f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008508:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800850c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008510:	460b      	mov	r3, r1
 8008512:	18db      	adds	r3, r3, r3
 8008514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008516:	4613      	mov	r3, r2
 8008518:	eb42 0303 	adc.w	r3, r2, r3
 800851c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800851e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008526:	f7f8 fbaf 	bl	8000c88 <__aeabi_uldivmod>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <UART_SetConfig+0x2d4>)
 8008530:	fba3 1302 	umull	r1, r3, r3, r2
 8008534:	095b      	lsrs	r3, r3, #5
 8008536:	2164      	movs	r1, #100	@ 0x64
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	3332      	adds	r3, #50	@ 0x32
 8008542:	4a08      	ldr	r2, [pc, #32]	@ (8008564 <UART_SetConfig+0x2d4>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	f003 0207 	and.w	r2, r3, #7
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4422      	add	r2, r4
 8008556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008558:	e106      	b.n	8008768 <UART_SetConfig+0x4d8>
 800855a:	bf00      	nop
 800855c:	40011000 	.word	0x40011000
 8008560:	40011400 	.word	0x40011400
 8008564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008572:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800857a:	4642      	mov	r2, r8
 800857c:	464b      	mov	r3, r9
 800857e:	1891      	adds	r1, r2, r2
 8008580:	6239      	str	r1, [r7, #32]
 8008582:	415b      	adcs	r3, r3
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
 8008586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800858a:	4641      	mov	r1, r8
 800858c:	1854      	adds	r4, r2, r1
 800858e:	4649      	mov	r1, r9
 8008590:	eb43 0501 	adc.w	r5, r3, r1
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	00eb      	lsls	r3, r5, #3
 800859e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085a2:	00e2      	lsls	r2, r4, #3
 80085a4:	4614      	mov	r4, r2
 80085a6:	461d      	mov	r5, r3
 80085a8:	4643      	mov	r3, r8
 80085aa:	18e3      	adds	r3, r4, r3
 80085ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085b0:	464b      	mov	r3, r9
 80085b2:	eb45 0303 	adc.w	r3, r5, r3
 80085b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80085d6:	4629      	mov	r1, r5
 80085d8:	008b      	lsls	r3, r1, #2
 80085da:	4621      	mov	r1, r4
 80085dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085e0:	4621      	mov	r1, r4
 80085e2:	008a      	lsls	r2, r1, #2
 80085e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80085e8:	f7f8 fb4e 	bl	8000c88 <__aeabi_uldivmod>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4b60      	ldr	r3, [pc, #384]	@ (8008774 <UART_SetConfig+0x4e4>)
 80085f2:	fba3 2302 	umull	r2, r3, r3, r2
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	011c      	lsls	r4, r3, #4
 80085fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008604:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	1891      	adds	r1, r2, r2
 8008612:	61b9      	str	r1, [r7, #24]
 8008614:	415b      	adcs	r3, r3
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800861c:	4641      	mov	r1, r8
 800861e:	1851      	adds	r1, r2, r1
 8008620:	6139      	str	r1, [r7, #16]
 8008622:	4649      	mov	r1, r9
 8008624:	414b      	adcs	r3, r1
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008634:	4659      	mov	r1, fp
 8008636:	00cb      	lsls	r3, r1, #3
 8008638:	4651      	mov	r1, sl
 800863a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800863e:	4651      	mov	r1, sl
 8008640:	00ca      	lsls	r2, r1, #3
 8008642:	4610      	mov	r0, r2
 8008644:	4619      	mov	r1, r3
 8008646:	4603      	mov	r3, r0
 8008648:	4642      	mov	r2, r8
 800864a:	189b      	adds	r3, r3, r2
 800864c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008650:	464b      	mov	r3, r9
 8008652:	460a      	mov	r2, r1
 8008654:	eb42 0303 	adc.w	r3, r2, r3
 8008658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008666:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008668:	f04f 0200 	mov.w	r2, #0
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008674:	4649      	mov	r1, r9
 8008676:	008b      	lsls	r3, r1, #2
 8008678:	4641      	mov	r1, r8
 800867a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800867e:	4641      	mov	r1, r8
 8008680:	008a      	lsls	r2, r1, #2
 8008682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008686:	f7f8 faff 	bl	8000c88 <__aeabi_uldivmod>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4611      	mov	r1, r2
 8008690:	4b38      	ldr	r3, [pc, #224]	@ (8008774 <UART_SetConfig+0x4e4>)
 8008692:	fba3 2301 	umull	r2, r3, r3, r1
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	2264      	movs	r2, #100	@ 0x64
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	1acb      	subs	r3, r1, r3
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	3332      	adds	r3, #50	@ 0x32
 80086a4:	4a33      	ldr	r2, [pc, #204]	@ (8008774 <UART_SetConfig+0x4e4>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086b0:	441c      	add	r4, r3
 80086b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086b6:	2200      	movs	r2, #0
 80086b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80086ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80086bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80086c0:	4642      	mov	r2, r8
 80086c2:	464b      	mov	r3, r9
 80086c4:	1891      	adds	r1, r2, r2
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	415b      	adcs	r3, r3
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086d0:	4641      	mov	r1, r8
 80086d2:	1851      	adds	r1, r2, r1
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	4649      	mov	r1, r9
 80086d8:	414b      	adcs	r3, r1
 80086da:	607b      	str	r3, [r7, #4]
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086e8:	4659      	mov	r1, fp
 80086ea:	00cb      	lsls	r3, r1, #3
 80086ec:	4651      	mov	r1, sl
 80086ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086f2:	4651      	mov	r1, sl
 80086f4:	00ca      	lsls	r2, r1, #3
 80086f6:	4610      	mov	r0, r2
 80086f8:	4619      	mov	r1, r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	4642      	mov	r2, r8
 80086fe:	189b      	adds	r3, r3, r2
 8008700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008702:	464b      	mov	r3, r9
 8008704:	460a      	mov	r2, r1
 8008706:	eb42 0303 	adc.w	r3, r2, r3
 800870a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	663b      	str	r3, [r7, #96]	@ 0x60
 8008716:	667a      	str	r2, [r7, #100]	@ 0x64
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008724:	4649      	mov	r1, r9
 8008726:	008b      	lsls	r3, r1, #2
 8008728:	4641      	mov	r1, r8
 800872a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800872e:	4641      	mov	r1, r8
 8008730:	008a      	lsls	r2, r1, #2
 8008732:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008736:	f7f8 faa7 	bl	8000c88 <__aeabi_uldivmod>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <UART_SetConfig+0x4e4>)
 8008740:	fba3 1302 	umull	r1, r3, r3, r2
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	2164      	movs	r1, #100	@ 0x64
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	3332      	adds	r3, #50	@ 0x32
 8008752:	4a08      	ldr	r2, [pc, #32]	@ (8008774 <UART_SetConfig+0x4e4>)
 8008754:	fba2 2303 	umull	r2, r3, r2, r3
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	f003 020f 	and.w	r2, r3, #15
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4422      	add	r2, r4
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800876e:	46bd      	mov	sp, r7
 8008770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008774:	51eb851f 	.word	0x51eb851f

08008778 <__cvt>:
 8008778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	ec57 6b10 	vmov	r6, r7, d0
 8008780:	2f00      	cmp	r7, #0
 8008782:	460c      	mov	r4, r1
 8008784:	4619      	mov	r1, r3
 8008786:	463b      	mov	r3, r7
 8008788:	bfbb      	ittet	lt
 800878a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800878e:	461f      	movlt	r7, r3
 8008790:	2300      	movge	r3, #0
 8008792:	232d      	movlt	r3, #45	@ 0x2d
 8008794:	700b      	strb	r3, [r1, #0]
 8008796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008798:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800879c:	4691      	mov	r9, r2
 800879e:	f023 0820 	bic.w	r8, r3, #32
 80087a2:	bfbc      	itt	lt
 80087a4:	4632      	movlt	r2, r6
 80087a6:	4616      	movlt	r6, r2
 80087a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087ac:	d005      	beq.n	80087ba <__cvt+0x42>
 80087ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087b2:	d100      	bne.n	80087b6 <__cvt+0x3e>
 80087b4:	3401      	adds	r4, #1
 80087b6:	2102      	movs	r1, #2
 80087b8:	e000      	b.n	80087bc <__cvt+0x44>
 80087ba:	2103      	movs	r1, #3
 80087bc:	ab03      	add	r3, sp, #12
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	ab02      	add	r3, sp, #8
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	ec47 6b10 	vmov	d0, r6, r7
 80087c8:	4653      	mov	r3, sl
 80087ca:	4622      	mov	r2, r4
 80087cc:	f000 fe20 	bl	8009410 <_dtoa_r>
 80087d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087d4:	4605      	mov	r5, r0
 80087d6:	d119      	bne.n	800880c <__cvt+0x94>
 80087d8:	f019 0f01 	tst.w	r9, #1
 80087dc:	d00e      	beq.n	80087fc <__cvt+0x84>
 80087de:	eb00 0904 	add.w	r9, r0, r4
 80087e2:	2200      	movs	r2, #0
 80087e4:	2300      	movs	r3, #0
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f8 f98d 	bl	8000b08 <__aeabi_dcmpeq>
 80087ee:	b108      	cbz	r0, 80087f4 <__cvt+0x7c>
 80087f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087f4:	2230      	movs	r2, #48	@ 0x30
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	454b      	cmp	r3, r9
 80087fa:	d31e      	bcc.n	800883a <__cvt+0xc2>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008800:	1b5b      	subs	r3, r3, r5
 8008802:	4628      	mov	r0, r5
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	b004      	add	sp, #16
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008810:	eb00 0904 	add.w	r9, r0, r4
 8008814:	d1e5      	bne.n	80087e2 <__cvt+0x6a>
 8008816:	7803      	ldrb	r3, [r0, #0]
 8008818:	2b30      	cmp	r3, #48	@ 0x30
 800881a:	d10a      	bne.n	8008832 <__cvt+0xba>
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f970 	bl	8000b08 <__aeabi_dcmpeq>
 8008828:	b918      	cbnz	r0, 8008832 <__cvt+0xba>
 800882a:	f1c4 0401 	rsb	r4, r4, #1
 800882e:	f8ca 4000 	str.w	r4, [sl]
 8008832:	f8da 3000 	ldr.w	r3, [sl]
 8008836:	4499      	add	r9, r3
 8008838:	e7d3      	b.n	80087e2 <__cvt+0x6a>
 800883a:	1c59      	adds	r1, r3, #1
 800883c:	9103      	str	r1, [sp, #12]
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e7d9      	b.n	80087f6 <__cvt+0x7e>

08008842 <__exponent>:
 8008842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008844:	2900      	cmp	r1, #0
 8008846:	bfba      	itte	lt
 8008848:	4249      	neglt	r1, r1
 800884a:	232d      	movlt	r3, #45	@ 0x2d
 800884c:	232b      	movge	r3, #43	@ 0x2b
 800884e:	2909      	cmp	r1, #9
 8008850:	7002      	strb	r2, [r0, #0]
 8008852:	7043      	strb	r3, [r0, #1]
 8008854:	dd29      	ble.n	80088aa <__exponent+0x68>
 8008856:	f10d 0307 	add.w	r3, sp, #7
 800885a:	461d      	mov	r5, r3
 800885c:	270a      	movs	r7, #10
 800885e:	461a      	mov	r2, r3
 8008860:	fbb1 f6f7 	udiv	r6, r1, r7
 8008864:	fb07 1416 	mls	r4, r7, r6, r1
 8008868:	3430      	adds	r4, #48	@ 0x30
 800886a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800886e:	460c      	mov	r4, r1
 8008870:	2c63      	cmp	r4, #99	@ 0x63
 8008872:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008876:	4631      	mov	r1, r6
 8008878:	dcf1      	bgt.n	800885e <__exponent+0x1c>
 800887a:	3130      	adds	r1, #48	@ 0x30
 800887c:	1e94      	subs	r4, r2, #2
 800887e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008882:	1c41      	adds	r1, r0, #1
 8008884:	4623      	mov	r3, r4
 8008886:	42ab      	cmp	r3, r5
 8008888:	d30a      	bcc.n	80088a0 <__exponent+0x5e>
 800888a:	f10d 0309 	add.w	r3, sp, #9
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	42ac      	cmp	r4, r5
 8008892:	bf88      	it	hi
 8008894:	2300      	movhi	r3, #0
 8008896:	3302      	adds	r3, #2
 8008898:	4403      	add	r3, r0
 800889a:	1a18      	subs	r0, r3, r0
 800889c:	b003      	add	sp, #12
 800889e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088a8:	e7ed      	b.n	8008886 <__exponent+0x44>
 80088aa:	2330      	movs	r3, #48	@ 0x30
 80088ac:	3130      	adds	r1, #48	@ 0x30
 80088ae:	7083      	strb	r3, [r0, #2]
 80088b0:	70c1      	strb	r1, [r0, #3]
 80088b2:	1d03      	adds	r3, r0, #4
 80088b4:	e7f1      	b.n	800889a <__exponent+0x58>
	...

080088b8 <_printf_float>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	b08d      	sub	sp, #52	@ 0x34
 80088be:	460c      	mov	r4, r1
 80088c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088c4:	4616      	mov	r6, r2
 80088c6:	461f      	mov	r7, r3
 80088c8:	4605      	mov	r5, r0
 80088ca:	f000 fd13 	bl	80092f4 <_localeconv_r>
 80088ce:	6803      	ldr	r3, [r0, #0]
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f7 fcec 	bl	80002b0 <strlen>
 80088d8:	2300      	movs	r3, #0
 80088da:	930a      	str	r3, [sp, #40]	@ 0x28
 80088dc:	f8d8 3000 	ldr.w	r3, [r8]
 80088e0:	9005      	str	r0, [sp, #20]
 80088e2:	3307      	adds	r3, #7
 80088e4:	f023 0307 	bic.w	r3, r3, #7
 80088e8:	f103 0208 	add.w	r2, r3, #8
 80088ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088f0:	f8d4 b000 	ldr.w	fp, [r4]
 80088f4:	f8c8 2000 	str.w	r2, [r8]
 80088f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008900:	9307      	str	r3, [sp, #28]
 8008902:	f8cd 8018 	str.w	r8, [sp, #24]
 8008906:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800890a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890e:	4b9c      	ldr	r3, [pc, #624]	@ (8008b80 <_printf_float+0x2c8>)
 8008910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008914:	f7f8 f92a 	bl	8000b6c <__aeabi_dcmpun>
 8008918:	bb70      	cbnz	r0, 8008978 <_printf_float+0xc0>
 800891a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800891e:	4b98      	ldr	r3, [pc, #608]	@ (8008b80 <_printf_float+0x2c8>)
 8008920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008924:	f7f8 f904 	bl	8000b30 <__aeabi_dcmple>
 8008928:	bb30      	cbnz	r0, 8008978 <_printf_float+0xc0>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f8 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8008936:	b110      	cbz	r0, 800893e <_printf_float+0x86>
 8008938:	232d      	movs	r3, #45	@ 0x2d
 800893a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800893e:	4a91      	ldr	r2, [pc, #580]	@ (8008b84 <_printf_float+0x2cc>)
 8008940:	4b91      	ldr	r3, [pc, #580]	@ (8008b88 <_printf_float+0x2d0>)
 8008942:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008946:	bf8c      	ite	hi
 8008948:	4690      	movhi	r8, r2
 800894a:	4698      	movls	r8, r3
 800894c:	2303      	movs	r3, #3
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	f02b 0304 	bic.w	r3, fp, #4
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	f04f 0900 	mov.w	r9, #0
 800895a:	9700      	str	r7, [sp, #0]
 800895c:	4633      	mov	r3, r6
 800895e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f9d2 	bl	8008d0c <_printf_common>
 8008968:	3001      	adds	r0, #1
 800896a:	f040 808d 	bne.w	8008a88 <_printf_float+0x1d0>
 800896e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008972:	b00d      	add	sp, #52	@ 0x34
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	f7f8 f8f4 	bl	8000b6c <__aeabi_dcmpun>
 8008984:	b140      	cbz	r0, 8008998 <_printf_float+0xe0>
 8008986:	464b      	mov	r3, r9
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfbc      	itt	lt
 800898c:	232d      	movlt	r3, #45	@ 0x2d
 800898e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008992:	4a7e      	ldr	r2, [pc, #504]	@ (8008b8c <_printf_float+0x2d4>)
 8008994:	4b7e      	ldr	r3, [pc, #504]	@ (8008b90 <_printf_float+0x2d8>)
 8008996:	e7d4      	b.n	8008942 <_printf_float+0x8a>
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800899e:	9206      	str	r2, [sp, #24]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	d13b      	bne.n	8008a1c <_printf_float+0x164>
 80089a4:	2306      	movs	r3, #6
 80089a6:	6063      	str	r3, [r4, #4]
 80089a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089ac:	2300      	movs	r3, #0
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80089b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089b8:	ab09      	add	r3, sp, #36	@ 0x24
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	ec49 8b10 	vmov	d0, r8, r9
 80089c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7ff fed6 	bl	8008778 <__cvt>
 80089cc:	9b06      	ldr	r3, [sp, #24]
 80089ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089d0:	2b47      	cmp	r3, #71	@ 0x47
 80089d2:	4680      	mov	r8, r0
 80089d4:	d129      	bne.n	8008a2a <_printf_float+0x172>
 80089d6:	1cc8      	adds	r0, r1, #3
 80089d8:	db02      	blt.n	80089e0 <_printf_float+0x128>
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	4299      	cmp	r1, r3
 80089de:	dd41      	ble.n	8008a64 <_printf_float+0x1ac>
 80089e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80089e4:	fa5f fa8a 	uxtb.w	sl, sl
 80089e8:	3901      	subs	r1, #1
 80089ea:	4652      	mov	r2, sl
 80089ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80089f2:	f7ff ff26 	bl	8008842 <__exponent>
 80089f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089f8:	1813      	adds	r3, r2, r0
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	4681      	mov	r9, r0
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	dc02      	bgt.n	8008a08 <_printf_float+0x150>
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	07d2      	lsls	r2, r2, #31
 8008a06:	d501      	bpl.n	8008a0c <_printf_float+0x154>
 8008a08:	3301      	adds	r3, #1
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0a2      	beq.n	800895a <_printf_float+0xa2>
 8008a14:	232d      	movs	r3, #45	@ 0x2d
 8008a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a1a:	e79e      	b.n	800895a <_printf_float+0xa2>
 8008a1c:	9a06      	ldr	r2, [sp, #24]
 8008a1e:	2a47      	cmp	r2, #71	@ 0x47
 8008a20:	d1c2      	bne.n	80089a8 <_printf_float+0xf0>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1c0      	bne.n	80089a8 <_printf_float+0xf0>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7bd      	b.n	80089a6 <_printf_float+0xee>
 8008a2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a2e:	d9db      	bls.n	80089e8 <_printf_float+0x130>
 8008a30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a34:	d118      	bne.n	8008a68 <_printf_float+0x1b0>
 8008a36:	2900      	cmp	r1, #0
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	dd0b      	ble.n	8008a54 <_printf_float+0x19c>
 8008a3c:	6121      	str	r1, [r4, #16]
 8008a3e:	b913      	cbnz	r3, 8008a46 <_printf_float+0x18e>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	07d0      	lsls	r0, r2, #31
 8008a44:	d502      	bpl.n	8008a4c <_printf_float+0x194>
 8008a46:	3301      	adds	r3, #1
 8008a48:	440b      	add	r3, r1
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a4e:	f04f 0900 	mov.w	r9, #0
 8008a52:	e7db      	b.n	8008a0c <_printf_float+0x154>
 8008a54:	b913      	cbnz	r3, 8008a5c <_printf_float+0x1a4>
 8008a56:	6822      	ldr	r2, [r4, #0]
 8008a58:	07d2      	lsls	r2, r2, #31
 8008a5a:	d501      	bpl.n	8008a60 <_printf_float+0x1a8>
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	e7f4      	b.n	8008a4a <_printf_float+0x192>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e7f2      	b.n	8008a4a <_printf_float+0x192>
 8008a64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	db05      	blt.n	8008a7a <_printf_float+0x1c2>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	6121      	str	r1, [r4, #16]
 8008a72:	07d8      	lsls	r0, r3, #31
 8008a74:	d5ea      	bpl.n	8008a4c <_printf_float+0x194>
 8008a76:	1c4b      	adds	r3, r1, #1
 8008a78:	e7e7      	b.n	8008a4a <_printf_float+0x192>
 8008a7a:	2900      	cmp	r1, #0
 8008a7c:	bfd4      	ite	le
 8008a7e:	f1c1 0202 	rsble	r2, r1, #2
 8008a82:	2201      	movgt	r2, #1
 8008a84:	4413      	add	r3, r2
 8008a86:	e7e0      	b.n	8008a4a <_printf_float+0x192>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	055a      	lsls	r2, r3, #21
 8008a8c:	d407      	bmi.n	8008a9e <_printf_float+0x1e6>
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	4642      	mov	r2, r8
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d12b      	bne.n	8008af4 <_printf_float+0x23c>
 8008a9c:	e767      	b.n	800896e <_printf_float+0xb6>
 8008a9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aa2:	f240 80dd 	bls.w	8008c60 <_printf_float+0x3a8>
 8008aa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	f7f8 f82b 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d033      	beq.n	8008b1e <_printf_float+0x266>
 8008ab6:	4a37      	ldr	r2, [pc, #220]	@ (8008b94 <_printf_float+0x2dc>)
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f af54 	beq.w	800896e <_printf_float+0xb6>
 8008ac6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008aca:	4543      	cmp	r3, r8
 8008acc:	db02      	blt.n	8008ad4 <_printf_float+0x21c>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	07d8      	lsls	r0, r3, #31
 8008ad2:	d50f      	bpl.n	8008af4 <_printf_float+0x23c>
 8008ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b8      	blx	r7
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f43f af45 	beq.w	800896e <_printf_float+0xb6>
 8008ae4:	f04f 0900 	mov.w	r9, #0
 8008ae8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008aec:	f104 0a1a 	add.w	sl, r4, #26
 8008af0:	45c8      	cmp	r8, r9
 8008af2:	dc09      	bgt.n	8008b08 <_printf_float+0x250>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	079b      	lsls	r3, r3, #30
 8008af8:	f100 8103 	bmi.w	8008d02 <_printf_float+0x44a>
 8008afc:	68e0      	ldr	r0, [r4, #12]
 8008afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b00:	4298      	cmp	r0, r3
 8008b02:	bfb8      	it	lt
 8008b04:	4618      	movlt	r0, r3
 8008b06:	e734      	b.n	8008972 <_printf_float+0xba>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	4652      	mov	r2, sl
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	47b8      	blx	r7
 8008b12:	3001      	adds	r0, #1
 8008b14:	f43f af2b 	beq.w	800896e <_printf_float+0xb6>
 8008b18:	f109 0901 	add.w	r9, r9, #1
 8008b1c:	e7e8      	b.n	8008af0 <_printf_float+0x238>
 8008b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dc39      	bgt.n	8008b98 <_printf_float+0x2e0>
 8008b24:	4a1b      	ldr	r2, [pc, #108]	@ (8008b94 <_printf_float+0x2dc>)
 8008b26:	2301      	movs	r3, #1
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f af1d 	beq.w	800896e <_printf_float+0xb6>
 8008b34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b38:	ea59 0303 	orrs.w	r3, r9, r3
 8008b3c:	d102      	bne.n	8008b44 <_printf_float+0x28c>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	07d9      	lsls	r1, r3, #31
 8008b42:	d5d7      	bpl.n	8008af4 <_printf_float+0x23c>
 8008b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f af0d 	beq.w	800896e <_printf_float+0xb6>
 8008b54:	f04f 0a00 	mov.w	sl, #0
 8008b58:	f104 0b1a 	add.w	fp, r4, #26
 8008b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5e:	425b      	negs	r3, r3
 8008b60:	4553      	cmp	r3, sl
 8008b62:	dc01      	bgt.n	8008b68 <_printf_float+0x2b0>
 8008b64:	464b      	mov	r3, r9
 8008b66:	e793      	b.n	8008a90 <_printf_float+0x1d8>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	465a      	mov	r2, fp
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f aefb 	beq.w	800896e <_printf_float+0xb6>
 8008b78:	f10a 0a01 	add.w	sl, sl, #1
 8008b7c:	e7ee      	b.n	8008b5c <_printf_float+0x2a4>
 8008b7e:	bf00      	nop
 8008b80:	7fefffff 	.word	0x7fefffff
 8008b84:	0801f258 	.word	0x0801f258
 8008b88:	0801f254 	.word	0x0801f254
 8008b8c:	0801f260 	.word	0x0801f260
 8008b90:	0801f25c 	.word	0x0801f25c
 8008b94:	0801f264 	.word	0x0801f264
 8008b98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b9e:	4553      	cmp	r3, sl
 8008ba0:	bfa8      	it	ge
 8008ba2:	4653      	movge	r3, sl
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	dc36      	bgt.n	8008c18 <_printf_float+0x360>
 8008baa:	f04f 0b00 	mov.w	fp, #0
 8008bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bb2:	f104 021a 	add.w	r2, r4, #26
 8008bb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bb8:	9306      	str	r3, [sp, #24]
 8008bba:	eba3 0309 	sub.w	r3, r3, r9
 8008bbe:	455b      	cmp	r3, fp
 8008bc0:	dc31      	bgt.n	8008c26 <_printf_float+0x36e>
 8008bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc4:	459a      	cmp	sl, r3
 8008bc6:	dc3a      	bgt.n	8008c3e <_printf_float+0x386>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	07da      	lsls	r2, r3, #31
 8008bcc:	d437      	bmi.n	8008c3e <_printf_float+0x386>
 8008bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd0:	ebaa 0903 	sub.w	r9, sl, r3
 8008bd4:	9b06      	ldr	r3, [sp, #24]
 8008bd6:	ebaa 0303 	sub.w	r3, sl, r3
 8008bda:	4599      	cmp	r9, r3
 8008bdc:	bfa8      	it	ge
 8008bde:	4699      	movge	r9, r3
 8008be0:	f1b9 0f00 	cmp.w	r9, #0
 8008be4:	dc33      	bgt.n	8008c4e <_printf_float+0x396>
 8008be6:	f04f 0800 	mov.w	r8, #0
 8008bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bee:	f104 0b1a 	add.w	fp, r4, #26
 8008bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8008bf8:	eba3 0309 	sub.w	r3, r3, r9
 8008bfc:	4543      	cmp	r3, r8
 8008bfe:	f77f af79 	ble.w	8008af4 <_printf_float+0x23c>
 8008c02:	2301      	movs	r3, #1
 8008c04:	465a      	mov	r2, fp
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f aeae 	beq.w	800896e <_printf_float+0xb6>
 8008c12:	f108 0801 	add.w	r8, r8, #1
 8008c16:	e7ec      	b.n	8008bf2 <_printf_float+0x33a>
 8008c18:	4642      	mov	r2, r8
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b8      	blx	r7
 8008c20:	3001      	adds	r0, #1
 8008c22:	d1c2      	bne.n	8008baa <_printf_float+0x2f2>
 8008c24:	e6a3      	b.n	800896e <_printf_float+0xb6>
 8008c26:	2301      	movs	r3, #1
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	9206      	str	r2, [sp, #24]
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	f43f ae9c 	beq.w	800896e <_printf_float+0xb6>
 8008c36:	9a06      	ldr	r2, [sp, #24]
 8008c38:	f10b 0b01 	add.w	fp, fp, #1
 8008c3c:	e7bb      	b.n	8008bb6 <_printf_float+0x2fe>
 8008c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d1c0      	bne.n	8008bce <_printf_float+0x316>
 8008c4c:	e68f      	b.n	800896e <_printf_float+0xb6>
 8008c4e:	9a06      	ldr	r2, [sp, #24]
 8008c50:	464b      	mov	r3, r9
 8008c52:	4442      	add	r2, r8
 8008c54:	4631      	mov	r1, r6
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d1c3      	bne.n	8008be6 <_printf_float+0x32e>
 8008c5e:	e686      	b.n	800896e <_printf_float+0xb6>
 8008c60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c64:	f1ba 0f01 	cmp.w	sl, #1
 8008c68:	dc01      	bgt.n	8008c6e <_printf_float+0x3b6>
 8008c6a:	07db      	lsls	r3, r3, #31
 8008c6c:	d536      	bpl.n	8008cdc <_printf_float+0x424>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4642      	mov	r2, r8
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f ae78 	beq.w	800896e <_printf_float+0xb6>
 8008c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f ae70 	beq.w	800896e <_printf_float+0xb6>
 8008c8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c92:	2200      	movs	r2, #0
 8008c94:	2300      	movs	r3, #0
 8008c96:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c9a:	f7f7 ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8008c9e:	b9c0      	cbnz	r0, 8008cd2 <_printf_float+0x41a>
 8008ca0:	4653      	mov	r3, sl
 8008ca2:	f108 0201 	add.w	r2, r8, #1
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d10c      	bne.n	8008cca <_printf_float+0x412>
 8008cb0:	e65d      	b.n	800896e <_printf_float+0xb6>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	465a      	mov	r2, fp
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f43f ae56 	beq.w	800896e <_printf_float+0xb6>
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	45d0      	cmp	r8, sl
 8008cc8:	dbf3      	blt.n	8008cb2 <_printf_float+0x3fa>
 8008cca:	464b      	mov	r3, r9
 8008ccc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cd0:	e6df      	b.n	8008a92 <_printf_float+0x1da>
 8008cd2:	f04f 0800 	mov.w	r8, #0
 8008cd6:	f104 0b1a 	add.w	fp, r4, #26
 8008cda:	e7f4      	b.n	8008cc6 <_printf_float+0x40e>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4642      	mov	r2, r8
 8008ce0:	e7e1      	b.n	8008ca6 <_printf_float+0x3ee>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	464a      	mov	r2, r9
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	47b8      	blx	r7
 8008cec:	3001      	adds	r0, #1
 8008cee:	f43f ae3e 	beq.w	800896e <_printf_float+0xb6>
 8008cf2:	f108 0801 	add.w	r8, r8, #1
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cfa:	1a5b      	subs	r3, r3, r1
 8008cfc:	4543      	cmp	r3, r8
 8008cfe:	dcf0      	bgt.n	8008ce2 <_printf_float+0x42a>
 8008d00:	e6fc      	b.n	8008afc <_printf_float+0x244>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	f104 0919 	add.w	r9, r4, #25
 8008d0a:	e7f4      	b.n	8008cf6 <_printf_float+0x43e>

08008d0c <_printf_common>:
 8008d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	4616      	mov	r6, r2
 8008d12:	4698      	mov	r8, r3
 8008d14:	688a      	ldr	r2, [r1, #8]
 8008d16:	690b      	ldr	r3, [r1, #16]
 8008d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	bfb8      	it	lt
 8008d20:	4613      	movlt	r3, r2
 8008d22:	6033      	str	r3, [r6, #0]
 8008d24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d28:	4607      	mov	r7, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b10a      	cbz	r2, 8008d32 <_printf_common+0x26>
 8008d2e:	3301      	adds	r3, #1
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	0699      	lsls	r1, r3, #26
 8008d36:	bf42      	ittt	mi
 8008d38:	6833      	ldrmi	r3, [r6, #0]
 8008d3a:	3302      	addmi	r3, #2
 8008d3c:	6033      	strmi	r3, [r6, #0]
 8008d3e:	6825      	ldr	r5, [r4, #0]
 8008d40:	f015 0506 	ands.w	r5, r5, #6
 8008d44:	d106      	bne.n	8008d54 <_printf_common+0x48>
 8008d46:	f104 0a19 	add.w	sl, r4, #25
 8008d4a:	68e3      	ldr	r3, [r4, #12]
 8008d4c:	6832      	ldr	r2, [r6, #0]
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	42ab      	cmp	r3, r5
 8008d52:	dc26      	bgt.n	8008da2 <_printf_common+0x96>
 8008d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	3b00      	subs	r3, #0
 8008d5c:	bf18      	it	ne
 8008d5e:	2301      	movne	r3, #1
 8008d60:	0692      	lsls	r2, r2, #26
 8008d62:	d42b      	bmi.n	8008dbc <_printf_common+0xb0>
 8008d64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d68:	4641      	mov	r1, r8
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	47c8      	blx	r9
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d01e      	beq.n	8008db0 <_printf_common+0xa4>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	6922      	ldr	r2, [r4, #16]
 8008d76:	f003 0306 	and.w	r3, r3, #6
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	bf02      	ittt	eq
 8008d7e:	68e5      	ldreq	r5, [r4, #12]
 8008d80:	6833      	ldreq	r3, [r6, #0]
 8008d82:	1aed      	subeq	r5, r5, r3
 8008d84:	68a3      	ldr	r3, [r4, #8]
 8008d86:	bf0c      	ite	eq
 8008d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d8c:	2500      	movne	r5, #0
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	bfc4      	itt	gt
 8008d92:	1a9b      	subgt	r3, r3, r2
 8008d94:	18ed      	addgt	r5, r5, r3
 8008d96:	2600      	movs	r6, #0
 8008d98:	341a      	adds	r4, #26
 8008d9a:	42b5      	cmp	r5, r6
 8008d9c:	d11a      	bne.n	8008dd4 <_printf_common+0xc8>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e008      	b.n	8008db4 <_printf_common+0xa8>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4652      	mov	r2, sl
 8008da6:	4641      	mov	r1, r8
 8008da8:	4638      	mov	r0, r7
 8008daa:	47c8      	blx	r9
 8008dac:	3001      	adds	r0, #1
 8008dae:	d103      	bne.n	8008db8 <_printf_common+0xac>
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	3501      	adds	r5, #1
 8008dba:	e7c6      	b.n	8008d4a <_printf_common+0x3e>
 8008dbc:	18e1      	adds	r1, r4, r3
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	2030      	movs	r0, #48	@ 0x30
 8008dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dc6:	4422      	add	r2, r4
 8008dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	e7c7      	b.n	8008d64 <_printf_common+0x58>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	4641      	mov	r1, r8
 8008dda:	4638      	mov	r0, r7
 8008ddc:	47c8      	blx	r9
 8008dde:	3001      	adds	r0, #1
 8008de0:	d0e6      	beq.n	8008db0 <_printf_common+0xa4>
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7d9      	b.n	8008d9a <_printf_common+0x8e>
	...

08008de8 <_printf_i>:
 8008de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	7e0f      	ldrb	r7, [r1, #24]
 8008dee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008df0:	2f78      	cmp	r7, #120	@ 0x78
 8008df2:	4691      	mov	r9, r2
 8008df4:	4680      	mov	r8, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	469a      	mov	sl, r3
 8008dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dfe:	d807      	bhi.n	8008e10 <_printf_i+0x28>
 8008e00:	2f62      	cmp	r7, #98	@ 0x62
 8008e02:	d80a      	bhi.n	8008e1a <_printf_i+0x32>
 8008e04:	2f00      	cmp	r7, #0
 8008e06:	f000 80d1 	beq.w	8008fac <_printf_i+0x1c4>
 8008e0a:	2f58      	cmp	r7, #88	@ 0x58
 8008e0c:	f000 80b8 	beq.w	8008f80 <_printf_i+0x198>
 8008e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e18:	e03a      	b.n	8008e90 <_printf_i+0xa8>
 8008e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e1e:	2b15      	cmp	r3, #21
 8008e20:	d8f6      	bhi.n	8008e10 <_printf_i+0x28>
 8008e22:	a101      	add	r1, pc, #4	@ (adr r1, 8008e28 <_printf_i+0x40>)
 8008e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e95 	.word	0x08008e95
 8008e30:	08008e11 	.word	0x08008e11
 8008e34:	08008e11 	.word	0x08008e11
 8008e38:	08008e11 	.word	0x08008e11
 8008e3c:	08008e11 	.word	0x08008e11
 8008e40:	08008e95 	.word	0x08008e95
 8008e44:	08008e11 	.word	0x08008e11
 8008e48:	08008e11 	.word	0x08008e11
 8008e4c:	08008e11 	.word	0x08008e11
 8008e50:	08008e11 	.word	0x08008e11
 8008e54:	08008f93 	.word	0x08008f93
 8008e58:	08008ebf 	.word	0x08008ebf
 8008e5c:	08008f4d 	.word	0x08008f4d
 8008e60:	08008e11 	.word	0x08008e11
 8008e64:	08008e11 	.word	0x08008e11
 8008e68:	08008fb5 	.word	0x08008fb5
 8008e6c:	08008e11 	.word	0x08008e11
 8008e70:	08008ebf 	.word	0x08008ebf
 8008e74:	08008e11 	.word	0x08008e11
 8008e78:	08008e11 	.word	0x08008e11
 8008e7c:	08008f55 	.word	0x08008f55
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	1d1a      	adds	r2, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6032      	str	r2, [r6, #0]
 8008e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e90:	2301      	movs	r3, #1
 8008e92:	e09c      	b.n	8008fce <_printf_i+0x1e6>
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	6031      	str	r1, [r6, #0]
 8008e9c:	0606      	lsls	r6, r0, #24
 8008e9e:	d501      	bpl.n	8008ea4 <_printf_i+0xbc>
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	e003      	b.n	8008eac <_printf_i+0xc4>
 8008ea4:	0645      	lsls	r5, r0, #25
 8008ea6:	d5fb      	bpl.n	8008ea0 <_printf_i+0xb8>
 8008ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	da03      	bge.n	8008eb8 <_printf_i+0xd0>
 8008eb0:	232d      	movs	r3, #45	@ 0x2d
 8008eb2:	426d      	negs	r5, r5
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb8:	4858      	ldr	r0, [pc, #352]	@ (800901c <_printf_i+0x234>)
 8008eba:	230a      	movs	r3, #10
 8008ebc:	e011      	b.n	8008ee2 <_printf_i+0xfa>
 8008ebe:	6821      	ldr	r1, [r4, #0]
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	0608      	lsls	r0, r1, #24
 8008ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec8:	d402      	bmi.n	8008ed0 <_printf_i+0xe8>
 8008eca:	0649      	lsls	r1, r1, #25
 8008ecc:	bf48      	it	mi
 8008ece:	b2ad      	uxthmi	r5, r5
 8008ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ed2:	4852      	ldr	r0, [pc, #328]	@ (800901c <_printf_i+0x234>)
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	bf14      	ite	ne
 8008ed8:	230a      	movne	r3, #10
 8008eda:	2308      	moveq	r3, #8
 8008edc:	2100      	movs	r1, #0
 8008ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ee2:	6866      	ldr	r6, [r4, #4]
 8008ee4:	60a6      	str	r6, [r4, #8]
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	db05      	blt.n	8008ef6 <_printf_i+0x10e>
 8008eea:	6821      	ldr	r1, [r4, #0]
 8008eec:	432e      	orrs	r6, r5
 8008eee:	f021 0104 	bic.w	r1, r1, #4
 8008ef2:	6021      	str	r1, [r4, #0]
 8008ef4:	d04b      	beq.n	8008f8e <_printf_i+0x1a6>
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008efc:	fb03 5711 	mls	r7, r3, r1, r5
 8008f00:	5dc7      	ldrb	r7, [r0, r7]
 8008f02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f06:	462f      	mov	r7, r5
 8008f08:	42bb      	cmp	r3, r7
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	d9f4      	bls.n	8008ef8 <_printf_i+0x110>
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d10b      	bne.n	8008f2a <_printf_i+0x142>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	07df      	lsls	r7, r3, #31
 8008f16:	d508      	bpl.n	8008f2a <_printf_i+0x142>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	6861      	ldr	r1, [r4, #4]
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	bfde      	ittt	le
 8008f20:	2330      	movle	r3, #48	@ 0x30
 8008f22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f2a:	1b92      	subs	r2, r2, r6
 8008f2c:	6122      	str	r2, [r4, #16]
 8008f2e:	f8cd a000 	str.w	sl, [sp]
 8008f32:	464b      	mov	r3, r9
 8008f34:	aa03      	add	r2, sp, #12
 8008f36:	4621      	mov	r1, r4
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f7ff fee7 	bl	8008d0c <_printf_common>
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d14a      	bne.n	8008fd8 <_printf_i+0x1f0>
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f46:	b004      	add	sp, #16
 8008f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	f043 0320 	orr.w	r3, r3, #32
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	4832      	ldr	r0, [pc, #200]	@ (8009020 <_printf_i+0x238>)
 8008f56:	2778      	movs	r7, #120	@ 0x78
 8008f58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	6831      	ldr	r1, [r6, #0]
 8008f60:	061f      	lsls	r7, r3, #24
 8008f62:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f66:	d402      	bmi.n	8008f6e <_printf_i+0x186>
 8008f68:	065f      	lsls	r7, r3, #25
 8008f6a:	bf48      	it	mi
 8008f6c:	b2ad      	uxthmi	r5, r5
 8008f6e:	6031      	str	r1, [r6, #0]
 8008f70:	07d9      	lsls	r1, r3, #31
 8008f72:	bf44      	itt	mi
 8008f74:	f043 0320 	orrmi.w	r3, r3, #32
 8008f78:	6023      	strmi	r3, [r4, #0]
 8008f7a:	b11d      	cbz	r5, 8008f84 <_printf_i+0x19c>
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	e7ad      	b.n	8008edc <_printf_i+0xf4>
 8008f80:	4826      	ldr	r0, [pc, #152]	@ (800901c <_printf_i+0x234>)
 8008f82:	e7e9      	b.n	8008f58 <_printf_i+0x170>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	f023 0320 	bic.w	r3, r3, #32
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	e7f6      	b.n	8008f7c <_printf_i+0x194>
 8008f8e:	4616      	mov	r6, r2
 8008f90:	e7bd      	b.n	8008f0e <_printf_i+0x126>
 8008f92:	6833      	ldr	r3, [r6, #0]
 8008f94:	6825      	ldr	r5, [r4, #0]
 8008f96:	6961      	ldr	r1, [r4, #20]
 8008f98:	1d18      	adds	r0, r3, #4
 8008f9a:	6030      	str	r0, [r6, #0]
 8008f9c:	062e      	lsls	r6, r5, #24
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	d501      	bpl.n	8008fa6 <_printf_i+0x1be>
 8008fa2:	6019      	str	r1, [r3, #0]
 8008fa4:	e002      	b.n	8008fac <_printf_i+0x1c4>
 8008fa6:	0668      	lsls	r0, r5, #25
 8008fa8:	d5fb      	bpl.n	8008fa2 <_printf_i+0x1ba>
 8008faa:	8019      	strh	r1, [r3, #0]
 8008fac:	2300      	movs	r3, #0
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	4616      	mov	r6, r2
 8008fb2:	e7bc      	b.n	8008f2e <_printf_i+0x146>
 8008fb4:	6833      	ldr	r3, [r6, #0]
 8008fb6:	1d1a      	adds	r2, r3, #4
 8008fb8:	6032      	str	r2, [r6, #0]
 8008fba:	681e      	ldr	r6, [r3, #0]
 8008fbc:	6862      	ldr	r2, [r4, #4]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7f7 f925 	bl	8000210 <memchr>
 8008fc6:	b108      	cbz	r0, 8008fcc <_printf_i+0x1e4>
 8008fc8:	1b80      	subs	r0, r0, r6
 8008fca:	6060      	str	r0, [r4, #4]
 8008fcc:	6863      	ldr	r3, [r4, #4]
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd6:	e7aa      	b.n	8008f2e <_printf_i+0x146>
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	4632      	mov	r2, r6
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4640      	mov	r0, r8
 8008fe0:	47d0      	blx	sl
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d0ad      	beq.n	8008f42 <_printf_i+0x15a>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	079b      	lsls	r3, r3, #30
 8008fea:	d413      	bmi.n	8009014 <_printf_i+0x22c>
 8008fec:	68e0      	ldr	r0, [r4, #12]
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	4298      	cmp	r0, r3
 8008ff2:	bfb8      	it	lt
 8008ff4:	4618      	movlt	r0, r3
 8008ff6:	e7a6      	b.n	8008f46 <_printf_i+0x15e>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4640      	mov	r0, r8
 8009000:	47d0      	blx	sl
 8009002:	3001      	adds	r0, #1
 8009004:	d09d      	beq.n	8008f42 <_printf_i+0x15a>
 8009006:	3501      	adds	r5, #1
 8009008:	68e3      	ldr	r3, [r4, #12]
 800900a:	9903      	ldr	r1, [sp, #12]
 800900c:	1a5b      	subs	r3, r3, r1
 800900e:	42ab      	cmp	r3, r5
 8009010:	dcf2      	bgt.n	8008ff8 <_printf_i+0x210>
 8009012:	e7eb      	b.n	8008fec <_printf_i+0x204>
 8009014:	2500      	movs	r5, #0
 8009016:	f104 0619 	add.w	r6, r4, #25
 800901a:	e7f5      	b.n	8009008 <_printf_i+0x220>
 800901c:	0801f266 	.word	0x0801f266
 8009020:	0801f277 	.word	0x0801f277

08009024 <std>:
 8009024:	2300      	movs	r3, #0
 8009026:	b510      	push	{r4, lr}
 8009028:	4604      	mov	r4, r0
 800902a:	e9c0 3300 	strd	r3, r3, [r0]
 800902e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009032:	6083      	str	r3, [r0, #8]
 8009034:	8181      	strh	r1, [r0, #12]
 8009036:	6643      	str	r3, [r0, #100]	@ 0x64
 8009038:	81c2      	strh	r2, [r0, #14]
 800903a:	6183      	str	r3, [r0, #24]
 800903c:	4619      	mov	r1, r3
 800903e:	2208      	movs	r2, #8
 8009040:	305c      	adds	r0, #92	@ 0x5c
 8009042:	f000 f921 	bl	8009288 <memset>
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <std+0x58>)
 8009048:	6263      	str	r3, [r4, #36]	@ 0x24
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <std+0x5c>)
 800904c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <std+0x60>)
 8009050:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009052:	4b0d      	ldr	r3, [pc, #52]	@ (8009088 <std+0x64>)
 8009054:	6323      	str	r3, [r4, #48]	@ 0x30
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <std+0x68>)
 8009058:	6224      	str	r4, [r4, #32]
 800905a:	429c      	cmp	r4, r3
 800905c:	d006      	beq.n	800906c <std+0x48>
 800905e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009062:	4294      	cmp	r4, r2
 8009064:	d002      	beq.n	800906c <std+0x48>
 8009066:	33d0      	adds	r3, #208	@ 0xd0
 8009068:	429c      	cmp	r4, r3
 800906a:	d105      	bne.n	8009078 <std+0x54>
 800906c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009074:	f000 b93a 	b.w	80092ec <__retarget_lock_init_recursive>
 8009078:	bd10      	pop	{r4, pc}
 800907a:	bf00      	nop
 800907c:	0800abed 	.word	0x0800abed
 8009080:	0800ac0f 	.word	0x0800ac0f
 8009084:	0800ac47 	.word	0x0800ac47
 8009088:	0800ac6b 	.word	0x0800ac6b
 800908c:	20003e5c 	.word	0x20003e5c

08009090 <stdio_exit_handler>:
 8009090:	4a02      	ldr	r2, [pc, #8]	@ (800909c <stdio_exit_handler+0xc>)
 8009092:	4903      	ldr	r1, [pc, #12]	@ (80090a0 <stdio_exit_handler+0x10>)
 8009094:	4803      	ldr	r0, [pc, #12]	@ (80090a4 <stdio_exit_handler+0x14>)
 8009096:	f000 b869 	b.w	800916c <_fwalk_sglue>
 800909a:	bf00      	nop
 800909c:	20000050 	.word	0x20000050
 80090a0:	0800a491 	.word	0x0800a491
 80090a4:	20000060 	.word	0x20000060

080090a8 <cleanup_stdio>:
 80090a8:	6841      	ldr	r1, [r0, #4]
 80090aa:	4b0c      	ldr	r3, [pc, #48]	@ (80090dc <cleanup_stdio+0x34>)
 80090ac:	4299      	cmp	r1, r3
 80090ae:	b510      	push	{r4, lr}
 80090b0:	4604      	mov	r4, r0
 80090b2:	d001      	beq.n	80090b8 <cleanup_stdio+0x10>
 80090b4:	f001 f9ec 	bl	800a490 <_fflush_r>
 80090b8:	68a1      	ldr	r1, [r4, #8]
 80090ba:	4b09      	ldr	r3, [pc, #36]	@ (80090e0 <cleanup_stdio+0x38>)
 80090bc:	4299      	cmp	r1, r3
 80090be:	d002      	beq.n	80090c6 <cleanup_stdio+0x1e>
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 f9e5 	bl	800a490 <_fflush_r>
 80090c6:	68e1      	ldr	r1, [r4, #12]
 80090c8:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <cleanup_stdio+0x3c>)
 80090ca:	4299      	cmp	r1, r3
 80090cc:	d004      	beq.n	80090d8 <cleanup_stdio+0x30>
 80090ce:	4620      	mov	r0, r4
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f001 b9dc 	b.w	800a490 <_fflush_r>
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	bf00      	nop
 80090dc:	20003e5c 	.word	0x20003e5c
 80090e0:	20003ec4 	.word	0x20003ec4
 80090e4:	20003f2c 	.word	0x20003f2c

080090e8 <global_stdio_init.part.0>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <global_stdio_init.part.0+0x30>)
 80090ec:	4c0b      	ldr	r4, [pc, #44]	@ (800911c <global_stdio_init.part.0+0x34>)
 80090ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009120 <global_stdio_init.part.0+0x38>)
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	4620      	mov	r0, r4
 80090f4:	2200      	movs	r2, #0
 80090f6:	2104      	movs	r1, #4
 80090f8:	f7ff ff94 	bl	8009024 <std>
 80090fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009100:	2201      	movs	r2, #1
 8009102:	2109      	movs	r1, #9
 8009104:	f7ff ff8e 	bl	8009024 <std>
 8009108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800910c:	2202      	movs	r2, #2
 800910e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009112:	2112      	movs	r1, #18
 8009114:	f7ff bf86 	b.w	8009024 <std>
 8009118:	20003f94 	.word	0x20003f94
 800911c:	20003e5c 	.word	0x20003e5c
 8009120:	08009091 	.word	0x08009091

08009124 <__sfp_lock_acquire>:
 8009124:	4801      	ldr	r0, [pc, #4]	@ (800912c <__sfp_lock_acquire+0x8>)
 8009126:	f000 b8e2 	b.w	80092ee <__retarget_lock_acquire_recursive>
 800912a:	bf00      	nop
 800912c:	20003f99 	.word	0x20003f99

08009130 <__sfp_lock_release>:
 8009130:	4801      	ldr	r0, [pc, #4]	@ (8009138 <__sfp_lock_release+0x8>)
 8009132:	f000 b8dd 	b.w	80092f0 <__retarget_lock_release_recursive>
 8009136:	bf00      	nop
 8009138:	20003f99 	.word	0x20003f99

0800913c <__sinit>:
 800913c:	b510      	push	{r4, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	f7ff fff0 	bl	8009124 <__sfp_lock_acquire>
 8009144:	6a23      	ldr	r3, [r4, #32]
 8009146:	b11b      	cbz	r3, 8009150 <__sinit+0x14>
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f7ff bff0 	b.w	8009130 <__sfp_lock_release>
 8009150:	4b04      	ldr	r3, [pc, #16]	@ (8009164 <__sinit+0x28>)
 8009152:	6223      	str	r3, [r4, #32]
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <__sinit+0x2c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1f5      	bne.n	8009148 <__sinit+0xc>
 800915c:	f7ff ffc4 	bl	80090e8 <global_stdio_init.part.0>
 8009160:	e7f2      	b.n	8009148 <__sinit+0xc>
 8009162:	bf00      	nop
 8009164:	080090a9 	.word	0x080090a9
 8009168:	20003f94 	.word	0x20003f94

0800916c <_fwalk_sglue>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	4607      	mov	r7, r0
 8009172:	4688      	mov	r8, r1
 8009174:	4614      	mov	r4, r2
 8009176:	2600      	movs	r6, #0
 8009178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800917c:	f1b9 0901 	subs.w	r9, r9, #1
 8009180:	d505      	bpl.n	800918e <_fwalk_sglue+0x22>
 8009182:	6824      	ldr	r4, [r4, #0]
 8009184:	2c00      	cmp	r4, #0
 8009186:	d1f7      	bne.n	8009178 <_fwalk_sglue+0xc>
 8009188:	4630      	mov	r0, r6
 800918a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d907      	bls.n	80091a4 <_fwalk_sglue+0x38>
 8009194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009198:	3301      	adds	r3, #1
 800919a:	d003      	beq.n	80091a4 <_fwalk_sglue+0x38>
 800919c:	4629      	mov	r1, r5
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	4306      	orrs	r6, r0
 80091a4:	3568      	adds	r5, #104	@ 0x68
 80091a6:	e7e9      	b.n	800917c <_fwalk_sglue+0x10>

080091a8 <iprintf>:
 80091a8:	b40f      	push	{r0, r1, r2, r3}
 80091aa:	b507      	push	{r0, r1, r2, lr}
 80091ac:	4906      	ldr	r1, [pc, #24]	@ (80091c8 <iprintf+0x20>)
 80091ae:	ab04      	add	r3, sp, #16
 80091b0:	6808      	ldr	r0, [r1, #0]
 80091b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b6:	6881      	ldr	r1, [r0, #8]
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	f000 ff23 	bl	800a004 <_vfiprintf_r>
 80091be:	b003      	add	sp, #12
 80091c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c4:	b004      	add	sp, #16
 80091c6:	4770      	bx	lr
 80091c8:	2000005c 	.word	0x2000005c

080091cc <_puts_r>:
 80091cc:	6a03      	ldr	r3, [r0, #32]
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	6884      	ldr	r4, [r0, #8]
 80091d2:	4605      	mov	r5, r0
 80091d4:	460e      	mov	r6, r1
 80091d6:	b90b      	cbnz	r3, 80091dc <_puts_r+0x10>
 80091d8:	f7ff ffb0 	bl	800913c <__sinit>
 80091dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d405      	bmi.n	80091ee <_puts_r+0x22>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_puts_r+0x22>
 80091e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ea:	f000 f880 	bl	80092ee <__retarget_lock_acquire_recursive>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	0719      	lsls	r1, r3, #28
 80091f2:	d502      	bpl.n	80091fa <_puts_r+0x2e>
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d135      	bne.n	8009266 <_puts_r+0x9a>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f001 fd77 	bl	800acf0 <__swsetup_r>
 8009202:	b380      	cbz	r0, 8009266 <_puts_r+0x9a>
 8009204:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d405      	bmi.n	800921a <_puts_r+0x4e>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	059b      	lsls	r3, r3, #22
 8009212:	d402      	bmi.n	800921a <_puts_r+0x4e>
 8009214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009216:	f000 f86b 	bl	80092f0 <__retarget_lock_release_recursive>
 800921a:	4628      	mov	r0, r5
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	2b00      	cmp	r3, #0
 8009220:	da04      	bge.n	800922c <_puts_r+0x60>
 8009222:	69a2      	ldr	r2, [r4, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	dc17      	bgt.n	8009258 <_puts_r+0x8c>
 8009228:	290a      	cmp	r1, #10
 800922a:	d015      	beq.n	8009258 <_puts_r+0x8c>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	6022      	str	r2, [r4, #0]
 8009232:	7019      	strb	r1, [r3, #0]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800923a:	3b01      	subs	r3, #1
 800923c:	60a3      	str	r3, [r4, #8]
 800923e:	2900      	cmp	r1, #0
 8009240:	d1ed      	bne.n	800921e <_puts_r+0x52>
 8009242:	2b00      	cmp	r3, #0
 8009244:	da11      	bge.n	800926a <_puts_r+0x9e>
 8009246:	4622      	mov	r2, r4
 8009248:	210a      	movs	r1, #10
 800924a:	4628      	mov	r0, r5
 800924c:	f001 fd11 	bl	800ac72 <__swbuf_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d0d7      	beq.n	8009204 <_puts_r+0x38>
 8009254:	250a      	movs	r5, #10
 8009256:	e7d7      	b.n	8009208 <_puts_r+0x3c>
 8009258:	4622      	mov	r2, r4
 800925a:	4628      	mov	r0, r5
 800925c:	f001 fd09 	bl	800ac72 <__swbuf_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d1e7      	bne.n	8009234 <_puts_r+0x68>
 8009264:	e7ce      	b.n	8009204 <_puts_r+0x38>
 8009266:	3e01      	subs	r6, #1
 8009268:	e7e4      	b.n	8009234 <_puts_r+0x68>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	6022      	str	r2, [r4, #0]
 8009270:	220a      	movs	r2, #10
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e7ee      	b.n	8009254 <_puts_r+0x88>
	...

08009278 <puts>:
 8009278:	4b02      	ldr	r3, [pc, #8]	@ (8009284 <puts+0xc>)
 800927a:	4601      	mov	r1, r0
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f7ff bfa5 	b.w	80091cc <_puts_r>
 8009282:	bf00      	nop
 8009284:	2000005c 	.word	0x2000005c

08009288 <memset>:
 8009288:	4402      	add	r2, r0
 800928a:	4603      	mov	r3, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	d100      	bne.n	8009292 <memset+0xa>
 8009290:	4770      	bx	lr
 8009292:	f803 1b01 	strb.w	r1, [r3], #1
 8009296:	e7f9      	b.n	800928c <memset+0x4>

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	@ (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	2000005c 	.word	0x2000005c

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4d0d      	ldr	r5, [pc, #52]	@ (80092dc <__libc_init_array+0x38>)
 80092a8:	4c0d      	ldr	r4, [pc, #52]	@ (80092e0 <__libc_init_array+0x3c>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	2600      	movs	r6, #0
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	4d0b      	ldr	r5, [pc, #44]	@ (80092e4 <__libc_init_array+0x40>)
 80092b6:	4c0c      	ldr	r4, [pc, #48]	@ (80092e8 <__libc_init_array+0x44>)
 80092b8:	f002 fcee 	bl	800bc98 <_init>
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	2600      	movs	r6, #0
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	0801f9a4 	.word	0x0801f9a4
 80092e0:	0801f9a4 	.word	0x0801f9a4
 80092e4:	0801f9a4 	.word	0x0801f9a4
 80092e8:	0801f9a8 	.word	0x0801f9a8

080092ec <__retarget_lock_init_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_acquire_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__retarget_lock_release_recursive>:
 80092f0:	4770      	bx	lr
	...

080092f4 <_localeconv_r>:
 80092f4:	4800      	ldr	r0, [pc, #0]	@ (80092f8 <_localeconv_r+0x4>)
 80092f6:	4770      	bx	lr
 80092f8:	2000019c 	.word	0x2000019c

080092fc <quorem>:
 80092fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	6903      	ldr	r3, [r0, #16]
 8009302:	690c      	ldr	r4, [r1, #16]
 8009304:	42a3      	cmp	r3, r4
 8009306:	4607      	mov	r7, r0
 8009308:	db7e      	blt.n	8009408 <quorem+0x10c>
 800930a:	3c01      	subs	r4, #1
 800930c:	f101 0814 	add.w	r8, r1, #20
 8009310:	00a3      	lsls	r3, r4, #2
 8009312:	f100 0514 	add.w	r5, r0, #20
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009326:	3301      	adds	r3, #1
 8009328:	429a      	cmp	r2, r3
 800932a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800932e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009332:	d32e      	bcc.n	8009392 <quorem+0x96>
 8009334:	f04f 0a00 	mov.w	sl, #0
 8009338:	46c4      	mov	ip, r8
 800933a:	46ae      	mov	lr, r5
 800933c:	46d3      	mov	fp, sl
 800933e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009342:	b298      	uxth	r0, r3
 8009344:	fb06 a000 	mla	r0, r6, r0, sl
 8009348:	0c02      	lsrs	r2, r0, #16
 800934a:	0c1b      	lsrs	r3, r3, #16
 800934c:	fb06 2303 	mla	r3, r6, r3, r2
 8009350:	f8de 2000 	ldr.w	r2, [lr]
 8009354:	b280      	uxth	r0, r0
 8009356:	b292      	uxth	r2, r2
 8009358:	1a12      	subs	r2, r2, r0
 800935a:	445a      	add	r2, fp
 800935c:	f8de 0000 	ldr.w	r0, [lr]
 8009360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009364:	b29b      	uxth	r3, r3
 8009366:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800936a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800936e:	b292      	uxth	r2, r2
 8009370:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009374:	45e1      	cmp	r9, ip
 8009376:	f84e 2b04 	str.w	r2, [lr], #4
 800937a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800937e:	d2de      	bcs.n	800933e <quorem+0x42>
 8009380:	9b00      	ldr	r3, [sp, #0]
 8009382:	58eb      	ldr	r3, [r5, r3]
 8009384:	b92b      	cbnz	r3, 8009392 <quorem+0x96>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	3b04      	subs	r3, #4
 800938a:	429d      	cmp	r5, r3
 800938c:	461a      	mov	r2, r3
 800938e:	d32f      	bcc.n	80093f0 <quorem+0xf4>
 8009390:	613c      	str	r4, [r7, #16]
 8009392:	4638      	mov	r0, r7
 8009394:	f001 fb22 	bl	800a9dc <__mcmp>
 8009398:	2800      	cmp	r0, #0
 800939a:	db25      	blt.n	80093e8 <quorem+0xec>
 800939c:	4629      	mov	r1, r5
 800939e:	2000      	movs	r0, #0
 80093a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093a4:	f8d1 c000 	ldr.w	ip, [r1]
 80093a8:	fa1f fe82 	uxth.w	lr, r2
 80093ac:	fa1f f38c 	uxth.w	r3, ip
 80093b0:	eba3 030e 	sub.w	r3, r3, lr
 80093b4:	4403      	add	r3, r0
 80093b6:	0c12      	lsrs	r2, r2, #16
 80093b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093c6:	45c1      	cmp	r9, r8
 80093c8:	f841 3b04 	str.w	r3, [r1], #4
 80093cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093d0:	d2e6      	bcs.n	80093a0 <quorem+0xa4>
 80093d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093da:	b922      	cbnz	r2, 80093e6 <quorem+0xea>
 80093dc:	3b04      	subs	r3, #4
 80093de:	429d      	cmp	r5, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	d30b      	bcc.n	80093fc <quorem+0x100>
 80093e4:	613c      	str	r4, [r7, #16]
 80093e6:	3601      	adds	r6, #1
 80093e8:	4630      	mov	r0, r6
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	3b04      	subs	r3, #4
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	d1cb      	bne.n	8009390 <quorem+0x94>
 80093f8:	3c01      	subs	r4, #1
 80093fa:	e7c6      	b.n	800938a <quorem+0x8e>
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	3b04      	subs	r3, #4
 8009400:	2a00      	cmp	r2, #0
 8009402:	d1ef      	bne.n	80093e4 <quorem+0xe8>
 8009404:	3c01      	subs	r4, #1
 8009406:	e7ea      	b.n	80093de <quorem+0xe2>
 8009408:	2000      	movs	r0, #0
 800940a:	e7ee      	b.n	80093ea <quorem+0xee>
 800940c:	0000      	movs	r0, r0
	...

08009410 <_dtoa_r>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	69c7      	ldr	r7, [r0, #28]
 8009416:	b097      	sub	sp, #92	@ 0x5c
 8009418:	ed8d 0b04 	vstr	d0, [sp, #16]
 800941c:	ec55 4b10 	vmov	r4, r5, d0
 8009420:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009422:	9107      	str	r1, [sp, #28]
 8009424:	4681      	mov	r9, r0
 8009426:	920c      	str	r2, [sp, #48]	@ 0x30
 8009428:	9311      	str	r3, [sp, #68]	@ 0x44
 800942a:	b97f      	cbnz	r7, 800944c <_dtoa_r+0x3c>
 800942c:	2010      	movs	r0, #16
 800942e:	f000 ff01 	bl	800a234 <malloc>
 8009432:	4602      	mov	r2, r0
 8009434:	f8c9 001c 	str.w	r0, [r9, #28]
 8009438:	b920      	cbnz	r0, 8009444 <_dtoa_r+0x34>
 800943a:	4ba9      	ldr	r3, [pc, #676]	@ (80096e0 <_dtoa_r+0x2d0>)
 800943c:	21ef      	movs	r1, #239	@ 0xef
 800943e:	48a9      	ldr	r0, [pc, #676]	@ (80096e4 <_dtoa_r+0x2d4>)
 8009440:	f001 fd94 	bl	800af6c <__assert_func>
 8009444:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009448:	6007      	str	r7, [r0, #0]
 800944a:	60c7      	str	r7, [r0, #12]
 800944c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009450:	6819      	ldr	r1, [r3, #0]
 8009452:	b159      	cbz	r1, 800946c <_dtoa_r+0x5c>
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	604a      	str	r2, [r1, #4]
 8009458:	2301      	movs	r3, #1
 800945a:	4093      	lsls	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
 800945e:	4648      	mov	r0, r9
 8009460:	f001 f88a 	bl	800a578 <_Bfree>
 8009464:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	1e2b      	subs	r3, r5, #0
 800946e:	bfb9      	ittee	lt
 8009470:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009474:	9305      	strlt	r3, [sp, #20]
 8009476:	2300      	movge	r3, #0
 8009478:	6033      	strge	r3, [r6, #0]
 800947a:	9f05      	ldr	r7, [sp, #20]
 800947c:	4b9a      	ldr	r3, [pc, #616]	@ (80096e8 <_dtoa_r+0x2d8>)
 800947e:	bfbc      	itt	lt
 8009480:	2201      	movlt	r2, #1
 8009482:	6032      	strlt	r2, [r6, #0]
 8009484:	43bb      	bics	r3, r7
 8009486:	d112      	bne.n	80094ae <_dtoa_r+0x9e>
 8009488:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800948a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009494:	4323      	orrs	r3, r4
 8009496:	f000 855a 	beq.w	8009f4e <_dtoa_r+0xb3e>
 800949a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800949c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80096fc <_dtoa_r+0x2ec>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 855c 	beq.w	8009f5e <_dtoa_r+0xb4e>
 80094a6:	f10a 0303 	add.w	r3, sl, #3
 80094aa:	f000 bd56 	b.w	8009f5a <_dtoa_r+0xb4a>
 80094ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094b2:	2200      	movs	r2, #0
 80094b4:	ec51 0b17 	vmov	r0, r1, d7
 80094b8:	2300      	movs	r3, #0
 80094ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094be:	f7f7 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80094c2:	4680      	mov	r8, r0
 80094c4:	b158      	cbz	r0, 80094de <_dtoa_r+0xce>
 80094c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094c8:	2301      	movs	r3, #1
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ce:	b113      	cbz	r3, 80094d6 <_dtoa_r+0xc6>
 80094d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094d2:	4b86      	ldr	r3, [pc, #536]	@ (80096ec <_dtoa_r+0x2dc>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009700 <_dtoa_r+0x2f0>
 80094da:	f000 bd40 	b.w	8009f5e <_dtoa_r+0xb4e>
 80094de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094e2:	aa14      	add	r2, sp, #80	@ 0x50
 80094e4:	a915      	add	r1, sp, #84	@ 0x54
 80094e6:	4648      	mov	r0, r9
 80094e8:	f001 fb28 	bl	800ab3c <__d2b>
 80094ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094f0:	9002      	str	r0, [sp, #8]
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d078      	beq.n	80095e8 <_dtoa_r+0x1d8>
 80094f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80094fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009500:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009504:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009508:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800950c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009510:	4619      	mov	r1, r3
 8009512:	2200      	movs	r2, #0
 8009514:	4b76      	ldr	r3, [pc, #472]	@ (80096f0 <_dtoa_r+0x2e0>)
 8009516:	f7f6 fed7 	bl	80002c8 <__aeabi_dsub>
 800951a:	a36b      	add	r3, pc, #428	@ (adr r3, 80096c8 <_dtoa_r+0x2b8>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 f88a 	bl	8000638 <__aeabi_dmul>
 8009524:	a36a      	add	r3, pc, #424	@ (adr r3, 80096d0 <_dtoa_r+0x2c0>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fecf 	bl	80002cc <__adddf3>
 800952e:	4604      	mov	r4, r0
 8009530:	4630      	mov	r0, r6
 8009532:	460d      	mov	r5, r1
 8009534:	f7f7 f816 	bl	8000564 <__aeabi_i2d>
 8009538:	a367      	add	r3, pc, #412	@ (adr r3, 80096d8 <_dtoa_r+0x2c8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f87b 	bl	8000638 <__aeabi_dmul>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f6 febf 	bl	80002cc <__adddf3>
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	f7f7 fb21 	bl	8000b98 <__aeabi_d2iz>
 8009556:	2200      	movs	r2, #0
 8009558:	4607      	mov	r7, r0
 800955a:	2300      	movs	r3, #0
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f7 fadc 	bl	8000b1c <__aeabi_dcmplt>
 8009564:	b140      	cbz	r0, 8009578 <_dtoa_r+0x168>
 8009566:	4638      	mov	r0, r7
 8009568:	f7f6 fffc 	bl	8000564 <__aeabi_i2d>
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	f7f7 faca 	bl	8000b08 <__aeabi_dcmpeq>
 8009574:	b900      	cbnz	r0, 8009578 <_dtoa_r+0x168>
 8009576:	3f01      	subs	r7, #1
 8009578:	2f16      	cmp	r7, #22
 800957a:	d852      	bhi.n	8009622 <_dtoa_r+0x212>
 800957c:	4b5d      	ldr	r3, [pc, #372]	@ (80096f4 <_dtoa_r+0x2e4>)
 800957e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800958a:	f7f7 fac7 	bl	8000b1c <__aeabi_dcmplt>
 800958e:	2800      	cmp	r0, #0
 8009590:	d049      	beq.n	8009626 <_dtoa_r+0x216>
 8009592:	3f01      	subs	r7, #1
 8009594:	2300      	movs	r3, #0
 8009596:	9310      	str	r3, [sp, #64]	@ 0x40
 8009598:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800959a:	1b9b      	subs	r3, r3, r6
 800959c:	1e5a      	subs	r2, r3, #1
 800959e:	bf45      	ittet	mi
 80095a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095a4:	9300      	strmi	r3, [sp, #0]
 80095a6:	2300      	movpl	r3, #0
 80095a8:	2300      	movmi	r3, #0
 80095aa:	9206      	str	r2, [sp, #24]
 80095ac:	bf54      	ite	pl
 80095ae:	9300      	strpl	r3, [sp, #0]
 80095b0:	9306      	strmi	r3, [sp, #24]
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	db39      	blt.n	800962a <_dtoa_r+0x21a>
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80095ba:	443b      	add	r3, r7
 80095bc:	9306      	str	r3, [sp, #24]
 80095be:	2300      	movs	r3, #0
 80095c0:	9308      	str	r3, [sp, #32]
 80095c2:	9b07      	ldr	r3, [sp, #28]
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	d863      	bhi.n	8009690 <_dtoa_r+0x280>
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	bfc4      	itt	gt
 80095cc:	3b04      	subgt	r3, #4
 80095ce:	9307      	strgt	r3, [sp, #28]
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	f1a3 0302 	sub.w	r3, r3, #2
 80095d6:	bfcc      	ite	gt
 80095d8:	2400      	movgt	r4, #0
 80095da:	2401      	movle	r4, #1
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d863      	bhi.n	80096a8 <_dtoa_r+0x298>
 80095e0:	e8df f003 	tbb	[pc, r3]
 80095e4:	2b375452 	.word	0x2b375452
 80095e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095ec:	441e      	add	r6, r3
 80095ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	bfc1      	itttt	gt
 80095f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095fa:	409f      	lslgt	r7, r3
 80095fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009600:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009604:	bfd6      	itet	le
 8009606:	f1c3 0320 	rsble	r3, r3, #32
 800960a:	ea47 0003 	orrgt.w	r0, r7, r3
 800960e:	fa04 f003 	lslle.w	r0, r4, r3
 8009612:	f7f6 ff97 	bl	8000544 <__aeabi_ui2d>
 8009616:	2201      	movs	r2, #1
 8009618:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800961c:	3e01      	subs	r6, #1
 800961e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009620:	e776      	b.n	8009510 <_dtoa_r+0x100>
 8009622:	2301      	movs	r3, #1
 8009624:	e7b7      	b.n	8009596 <_dtoa_r+0x186>
 8009626:	9010      	str	r0, [sp, #64]	@ 0x40
 8009628:	e7b6      	b.n	8009598 <_dtoa_r+0x188>
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	1bdb      	subs	r3, r3, r7
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	427b      	negs	r3, r7
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	2300      	movs	r3, #0
 8009636:	930d      	str	r3, [sp, #52]	@ 0x34
 8009638:	e7c3      	b.n	80095c2 <_dtoa_r+0x1b2>
 800963a:	2301      	movs	r3, #1
 800963c:	9309      	str	r3, [sp, #36]	@ 0x24
 800963e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009640:	eb07 0b03 	add.w	fp, r7, r3
 8009644:	f10b 0301 	add.w	r3, fp, #1
 8009648:	2b01      	cmp	r3, #1
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	bfb8      	it	lt
 800964e:	2301      	movlt	r3, #1
 8009650:	e006      	b.n	8009660 <_dtoa_r+0x250>
 8009652:	2301      	movs	r3, #1
 8009654:	9309      	str	r3, [sp, #36]	@ 0x24
 8009656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009658:	2b00      	cmp	r3, #0
 800965a:	dd28      	ble.n	80096ae <_dtoa_r+0x29e>
 800965c:	469b      	mov	fp, r3
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009664:	2100      	movs	r1, #0
 8009666:	2204      	movs	r2, #4
 8009668:	f102 0514 	add.w	r5, r2, #20
 800966c:	429d      	cmp	r5, r3
 800966e:	d926      	bls.n	80096be <_dtoa_r+0x2ae>
 8009670:	6041      	str	r1, [r0, #4]
 8009672:	4648      	mov	r0, r9
 8009674:	f000 ff40 	bl	800a4f8 <_Balloc>
 8009678:	4682      	mov	sl, r0
 800967a:	2800      	cmp	r0, #0
 800967c:	d142      	bne.n	8009704 <_dtoa_r+0x2f4>
 800967e:	4b1e      	ldr	r3, [pc, #120]	@ (80096f8 <_dtoa_r+0x2e8>)
 8009680:	4602      	mov	r2, r0
 8009682:	f240 11af 	movw	r1, #431	@ 0x1af
 8009686:	e6da      	b.n	800943e <_dtoa_r+0x2e>
 8009688:	2300      	movs	r3, #0
 800968a:	e7e3      	b.n	8009654 <_dtoa_r+0x244>
 800968c:	2300      	movs	r3, #0
 800968e:	e7d5      	b.n	800963c <_dtoa_r+0x22c>
 8009690:	2401      	movs	r4, #1
 8009692:	2300      	movs	r3, #0
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	9409      	str	r4, [sp, #36]	@ 0x24
 8009698:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800969c:	2200      	movs	r2, #0
 800969e:	f8cd b00c 	str.w	fp, [sp, #12]
 80096a2:	2312      	movs	r3, #18
 80096a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096a6:	e7db      	b.n	8009660 <_dtoa_r+0x250>
 80096a8:	2301      	movs	r3, #1
 80096aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ac:	e7f4      	b.n	8009698 <_dtoa_r+0x288>
 80096ae:	f04f 0b01 	mov.w	fp, #1
 80096b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80096b6:	465b      	mov	r3, fp
 80096b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096bc:	e7d0      	b.n	8009660 <_dtoa_r+0x250>
 80096be:	3101      	adds	r1, #1
 80096c0:	0052      	lsls	r2, r2, #1
 80096c2:	e7d1      	b.n	8009668 <_dtoa_r+0x258>
 80096c4:	f3af 8000 	nop.w
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	0801f295 	.word	0x0801f295
 80096e4:	0801f2ac 	.word	0x0801f2ac
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0801f265 	.word	0x0801f265
 80096f0:	3ff80000 	.word	0x3ff80000
 80096f4:	0801f400 	.word	0x0801f400
 80096f8:	0801f304 	.word	0x0801f304
 80096fc:	0801f291 	.word	0x0801f291
 8009700:	0801f264 	.word	0x0801f264
 8009704:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009708:	6018      	str	r0, [r3, #0]
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	2b0e      	cmp	r3, #14
 800970e:	f200 80a1 	bhi.w	8009854 <_dtoa_r+0x444>
 8009712:	2c00      	cmp	r4, #0
 8009714:	f000 809e 	beq.w	8009854 <_dtoa_r+0x444>
 8009718:	2f00      	cmp	r7, #0
 800971a:	dd33      	ble.n	8009784 <_dtoa_r+0x374>
 800971c:	4b9c      	ldr	r3, [pc, #624]	@ (8009990 <_dtoa_r+0x580>)
 800971e:	f007 020f 	and.w	r2, r7, #15
 8009722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009726:	ed93 7b00 	vldr	d7, [r3]
 800972a:	05f8      	lsls	r0, r7, #23
 800972c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009730:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009734:	d516      	bpl.n	8009764 <_dtoa_r+0x354>
 8009736:	4b97      	ldr	r3, [pc, #604]	@ (8009994 <_dtoa_r+0x584>)
 8009738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800973c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009740:	f7f7 f8a4 	bl	800088c <__aeabi_ddiv>
 8009744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009748:	f004 040f 	and.w	r4, r4, #15
 800974c:	2603      	movs	r6, #3
 800974e:	4d91      	ldr	r5, [pc, #580]	@ (8009994 <_dtoa_r+0x584>)
 8009750:	b954      	cbnz	r4, 8009768 <_dtoa_r+0x358>
 8009752:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800975a:	f7f7 f897 	bl	800088c <__aeabi_ddiv>
 800975e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009762:	e028      	b.n	80097b6 <_dtoa_r+0x3a6>
 8009764:	2602      	movs	r6, #2
 8009766:	e7f2      	b.n	800974e <_dtoa_r+0x33e>
 8009768:	07e1      	lsls	r1, r4, #31
 800976a:	d508      	bpl.n	800977e <_dtoa_r+0x36e>
 800976c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009774:	f7f6 ff60 	bl	8000638 <__aeabi_dmul>
 8009778:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800977c:	3601      	adds	r6, #1
 800977e:	1064      	asrs	r4, r4, #1
 8009780:	3508      	adds	r5, #8
 8009782:	e7e5      	b.n	8009750 <_dtoa_r+0x340>
 8009784:	f000 80af 	beq.w	80098e6 <_dtoa_r+0x4d6>
 8009788:	427c      	negs	r4, r7
 800978a:	4b81      	ldr	r3, [pc, #516]	@ (8009990 <_dtoa_r+0x580>)
 800978c:	4d81      	ldr	r5, [pc, #516]	@ (8009994 <_dtoa_r+0x584>)
 800978e:	f004 020f 	and.w	r2, r4, #15
 8009792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800979e:	f7f6 ff4b 	bl	8000638 <__aeabi_dmul>
 80097a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a6:	1124      	asrs	r4, r4, #4
 80097a8:	2300      	movs	r3, #0
 80097aa:	2602      	movs	r6, #2
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	f040 808f 	bne.w	80098d0 <_dtoa_r+0x4c0>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1d3      	bne.n	800975e <_dtoa_r+0x34e>
 80097b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 8094 	beq.w	80098ea <_dtoa_r+0x4da>
 80097c2:	4b75      	ldr	r3, [pc, #468]	@ (8009998 <_dtoa_r+0x588>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 808b 	beq.w	80098ea <_dtoa_r+0x4da>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 8087 	beq.w	80098ea <_dtoa_r+0x4da>
 80097dc:	f1bb 0f00 	cmp.w	fp, #0
 80097e0:	dd34      	ble.n	800984c <_dtoa_r+0x43c>
 80097e2:	4620      	mov	r0, r4
 80097e4:	4b6d      	ldr	r3, [pc, #436]	@ (800999c <_dtoa_r+0x58c>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 ff25 	bl	8000638 <__aeabi_dmul>
 80097ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097f2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80097f6:	3601      	adds	r6, #1
 80097f8:	465c      	mov	r4, fp
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 feb2 	bl	8000564 <__aeabi_i2d>
 8009800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009804:	f7f6 ff18 	bl	8000638 <__aeabi_dmul>
 8009808:	4b65      	ldr	r3, [pc, #404]	@ (80099a0 <_dtoa_r+0x590>)
 800980a:	2200      	movs	r2, #0
 800980c:	f7f6 fd5e 	bl	80002cc <__adddf3>
 8009810:	4605      	mov	r5, r0
 8009812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009816:	2c00      	cmp	r4, #0
 8009818:	d16a      	bne.n	80098f0 <_dtoa_r+0x4e0>
 800981a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800981e:	4b61      	ldr	r3, [pc, #388]	@ (80099a4 <_dtoa_r+0x594>)
 8009820:	2200      	movs	r2, #0
 8009822:	f7f6 fd51 	bl	80002c8 <__aeabi_dsub>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800982e:	462a      	mov	r2, r5
 8009830:	4633      	mov	r3, r6
 8009832:	f7f7 f991 	bl	8000b58 <__aeabi_dcmpgt>
 8009836:	2800      	cmp	r0, #0
 8009838:	f040 8298 	bne.w	8009d6c <_dtoa_r+0x95c>
 800983c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009840:	462a      	mov	r2, r5
 8009842:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009846:	f7f7 f969 	bl	8000b1c <__aeabi_dcmplt>
 800984a:	bb38      	cbnz	r0, 800989c <_dtoa_r+0x48c>
 800984c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009850:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009856:	2b00      	cmp	r3, #0
 8009858:	f2c0 8157 	blt.w	8009b0a <_dtoa_r+0x6fa>
 800985c:	2f0e      	cmp	r7, #14
 800985e:	f300 8154 	bgt.w	8009b0a <_dtoa_r+0x6fa>
 8009862:	4b4b      	ldr	r3, [pc, #300]	@ (8009990 <_dtoa_r+0x580>)
 8009864:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009868:	ed93 7b00 	vldr	d7, [r3]
 800986c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800986e:	2b00      	cmp	r3, #0
 8009870:	ed8d 7b00 	vstr	d7, [sp]
 8009874:	f280 80e5 	bge.w	8009a42 <_dtoa_r+0x632>
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f300 80e1 	bgt.w	8009a42 <_dtoa_r+0x632>
 8009880:	d10c      	bne.n	800989c <_dtoa_r+0x48c>
 8009882:	4b48      	ldr	r3, [pc, #288]	@ (80099a4 <_dtoa_r+0x594>)
 8009884:	2200      	movs	r2, #0
 8009886:	ec51 0b17 	vmov	r0, r1, d7
 800988a:	f7f6 fed5 	bl	8000638 <__aeabi_dmul>
 800988e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009892:	f7f7 f957 	bl	8000b44 <__aeabi_dcmpge>
 8009896:	2800      	cmp	r0, #0
 8009898:	f000 8266 	beq.w	8009d68 <_dtoa_r+0x958>
 800989c:	2400      	movs	r4, #0
 800989e:	4625      	mov	r5, r4
 80098a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098a2:	4656      	mov	r6, sl
 80098a4:	ea6f 0803 	mvn.w	r8, r3
 80098a8:	2700      	movs	r7, #0
 80098aa:	4621      	mov	r1, r4
 80098ac:	4648      	mov	r0, r9
 80098ae:	f000 fe63 	bl	800a578 <_Bfree>
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	f000 80bd 	beq.w	8009a32 <_dtoa_r+0x622>
 80098b8:	b12f      	cbz	r7, 80098c6 <_dtoa_r+0x4b6>
 80098ba:	42af      	cmp	r7, r5
 80098bc:	d003      	beq.n	80098c6 <_dtoa_r+0x4b6>
 80098be:	4639      	mov	r1, r7
 80098c0:	4648      	mov	r0, r9
 80098c2:	f000 fe59 	bl	800a578 <_Bfree>
 80098c6:	4629      	mov	r1, r5
 80098c8:	4648      	mov	r0, r9
 80098ca:	f000 fe55 	bl	800a578 <_Bfree>
 80098ce:	e0b0      	b.n	8009a32 <_dtoa_r+0x622>
 80098d0:	07e2      	lsls	r2, r4, #31
 80098d2:	d505      	bpl.n	80098e0 <_dtoa_r+0x4d0>
 80098d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098d8:	f7f6 feae 	bl	8000638 <__aeabi_dmul>
 80098dc:	3601      	adds	r6, #1
 80098de:	2301      	movs	r3, #1
 80098e0:	1064      	asrs	r4, r4, #1
 80098e2:	3508      	adds	r5, #8
 80098e4:	e762      	b.n	80097ac <_dtoa_r+0x39c>
 80098e6:	2602      	movs	r6, #2
 80098e8:	e765      	b.n	80097b6 <_dtoa_r+0x3a6>
 80098ea:	9c03      	ldr	r4, [sp, #12]
 80098ec:	46b8      	mov	r8, r7
 80098ee:	e784      	b.n	80097fa <_dtoa_r+0x3ea>
 80098f0:	4b27      	ldr	r3, [pc, #156]	@ (8009990 <_dtoa_r+0x580>)
 80098f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098fc:	4454      	add	r4, sl
 80098fe:	2900      	cmp	r1, #0
 8009900:	d054      	beq.n	80099ac <_dtoa_r+0x59c>
 8009902:	4929      	ldr	r1, [pc, #164]	@ (80099a8 <_dtoa_r+0x598>)
 8009904:	2000      	movs	r0, #0
 8009906:	f7f6 ffc1 	bl	800088c <__aeabi_ddiv>
 800990a:	4633      	mov	r3, r6
 800990c:	462a      	mov	r2, r5
 800990e:	f7f6 fcdb 	bl	80002c8 <__aeabi_dsub>
 8009912:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009916:	4656      	mov	r6, sl
 8009918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800991c:	f7f7 f93c 	bl	8000b98 <__aeabi_d2iz>
 8009920:	4605      	mov	r5, r0
 8009922:	f7f6 fe1f 	bl	8000564 <__aeabi_i2d>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992e:	f7f6 fccb 	bl	80002c8 <__aeabi_dsub>
 8009932:	3530      	adds	r5, #48	@ 0x30
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800993c:	f806 5b01 	strb.w	r5, [r6], #1
 8009940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009944:	f7f7 f8ea 	bl	8000b1c <__aeabi_dcmplt>
 8009948:	2800      	cmp	r0, #0
 800994a:	d172      	bne.n	8009a32 <_dtoa_r+0x622>
 800994c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009950:	4911      	ldr	r1, [pc, #68]	@ (8009998 <_dtoa_r+0x588>)
 8009952:	2000      	movs	r0, #0
 8009954:	f7f6 fcb8 	bl	80002c8 <__aeabi_dsub>
 8009958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800995c:	f7f7 f8de 	bl	8000b1c <__aeabi_dcmplt>
 8009960:	2800      	cmp	r0, #0
 8009962:	f040 80b4 	bne.w	8009ace <_dtoa_r+0x6be>
 8009966:	42a6      	cmp	r6, r4
 8009968:	f43f af70 	beq.w	800984c <_dtoa_r+0x43c>
 800996c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009970:	4b0a      	ldr	r3, [pc, #40]	@ (800999c <_dtoa_r+0x58c>)
 8009972:	2200      	movs	r2, #0
 8009974:	f7f6 fe60 	bl	8000638 <__aeabi_dmul>
 8009978:	4b08      	ldr	r3, [pc, #32]	@ (800999c <_dtoa_r+0x58c>)
 800997a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800997e:	2200      	movs	r2, #0
 8009980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009984:	f7f6 fe58 	bl	8000638 <__aeabi_dmul>
 8009988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800998c:	e7c4      	b.n	8009918 <_dtoa_r+0x508>
 800998e:	bf00      	nop
 8009990:	0801f400 	.word	0x0801f400
 8009994:	0801f3d8 	.word	0x0801f3d8
 8009998:	3ff00000 	.word	0x3ff00000
 800999c:	40240000 	.word	0x40240000
 80099a0:	401c0000 	.word	0x401c0000
 80099a4:	40140000 	.word	0x40140000
 80099a8:	3fe00000 	.word	0x3fe00000
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	f7f6 fe42 	bl	8000638 <__aeabi_dmul>
 80099b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099ba:	4656      	mov	r6, sl
 80099bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099c0:	f7f7 f8ea 	bl	8000b98 <__aeabi_d2iz>
 80099c4:	4605      	mov	r5, r0
 80099c6:	f7f6 fdcd 	bl	8000564 <__aeabi_i2d>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d2:	f7f6 fc79 	bl	80002c8 <__aeabi_dsub>
 80099d6:	3530      	adds	r5, #48	@ 0x30
 80099d8:	f806 5b01 	strb.w	r5, [r6], #1
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	d124      	bne.n	8009a36 <_dtoa_r+0x626>
 80099ec:	4baf      	ldr	r3, [pc, #700]	@ (8009cac <_dtoa_r+0x89c>)
 80099ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099f2:	f7f6 fc6b 	bl	80002cc <__adddf3>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fe:	f7f7 f8ab 	bl	8000b58 <__aeabi_dcmpgt>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d163      	bne.n	8009ace <_dtoa_r+0x6be>
 8009a06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a0a:	49a8      	ldr	r1, [pc, #672]	@ (8009cac <_dtoa_r+0x89c>)
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f7f6 fc5b 	bl	80002c8 <__aeabi_dsub>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a1a:	f7f7 f87f 	bl	8000b1c <__aeabi_dcmplt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f af14 	beq.w	800984c <_dtoa_r+0x43c>
 8009a24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a26:	1e73      	subs	r3, r6, #1
 8009a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a2e:	2b30      	cmp	r3, #48	@ 0x30
 8009a30:	d0f8      	beq.n	8009a24 <_dtoa_r+0x614>
 8009a32:	4647      	mov	r7, r8
 8009a34:	e03b      	b.n	8009aae <_dtoa_r+0x69e>
 8009a36:	4b9e      	ldr	r3, [pc, #632]	@ (8009cb0 <_dtoa_r+0x8a0>)
 8009a38:	f7f6 fdfe 	bl	8000638 <__aeabi_dmul>
 8009a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a40:	e7bc      	b.n	80099bc <_dtoa_r+0x5ac>
 8009a42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a46:	4656      	mov	r6, sl
 8009a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f7f6 ff1c 	bl	800088c <__aeabi_ddiv>
 8009a54:	f7f7 f8a0 	bl	8000b98 <__aeabi_d2iz>
 8009a58:	4680      	mov	r8, r0
 8009a5a:	f7f6 fd83 	bl	8000564 <__aeabi_i2d>
 8009a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a72:	f7f6 fc29 	bl	80002c8 <__aeabi_dsub>
 8009a76:	f806 4b01 	strb.w	r4, [r6], #1
 8009a7a:	9d03      	ldr	r5, [sp, #12]
 8009a7c:	eba6 040a 	sub.w	r4, r6, sl
 8009a80:	42a5      	cmp	r5, r4
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	d133      	bne.n	8009af0 <_dtoa_r+0x6e0>
 8009a88:	f7f6 fc20 	bl	80002cc <__adddf3>
 8009a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	f7f7 f860 	bl	8000b58 <__aeabi_dcmpgt>
 8009a98:	b9c0      	cbnz	r0, 8009acc <_dtoa_r+0x6bc>
 8009a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	f7f7 f831 	bl	8000b08 <__aeabi_dcmpeq>
 8009aa6:	b110      	cbz	r0, 8009aae <_dtoa_r+0x69e>
 8009aa8:	f018 0f01 	tst.w	r8, #1
 8009aac:	d10e      	bne.n	8009acc <_dtoa_r+0x6bc>
 8009aae:	9902      	ldr	r1, [sp, #8]
 8009ab0:	4648      	mov	r0, r9
 8009ab2:	f000 fd61 	bl	800a578 <_Bfree>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	7033      	strb	r3, [r6, #0]
 8009aba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009abc:	3701      	adds	r7, #1
 8009abe:	601f      	str	r7, [r3, #0]
 8009ac0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 824b 	beq.w	8009f5e <_dtoa_r+0xb4e>
 8009ac8:	601e      	str	r6, [r3, #0]
 8009aca:	e248      	b.n	8009f5e <_dtoa_r+0xb4e>
 8009acc:	46b8      	mov	r8, r7
 8009ace:	4633      	mov	r3, r6
 8009ad0:	461e      	mov	r6, r3
 8009ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad6:	2a39      	cmp	r2, #57	@ 0x39
 8009ad8:	d106      	bne.n	8009ae8 <_dtoa_r+0x6d8>
 8009ada:	459a      	cmp	sl, r3
 8009adc:	d1f8      	bne.n	8009ad0 <_dtoa_r+0x6c0>
 8009ade:	2230      	movs	r2, #48	@ 0x30
 8009ae0:	f108 0801 	add.w	r8, r8, #1
 8009ae4:	f88a 2000 	strb.w	r2, [sl]
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	3201      	adds	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e7a0      	b.n	8009a32 <_dtoa_r+0x622>
 8009af0:	4b6f      	ldr	r3, [pc, #444]	@ (8009cb0 <_dtoa_r+0x8a0>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fda0 	bl	8000638 <__aeabi_dmul>
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	f7f7 f802 	bl	8000b08 <__aeabi_dcmpeq>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d09f      	beq.n	8009a48 <_dtoa_r+0x638>
 8009b08:	e7d1      	b.n	8009aae <_dtoa_r+0x69e>
 8009b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	f000 80ea 	beq.w	8009ce6 <_dtoa_r+0x8d6>
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	2a01      	cmp	r2, #1
 8009b16:	f300 80cd 	bgt.w	8009cb4 <_dtoa_r+0x8a4>
 8009b1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 80c1 	beq.w	8009ca4 <_dtoa_r+0x894>
 8009b22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b26:	9c08      	ldr	r4, [sp, #32]
 8009b28:	9e00      	ldr	r6, [sp, #0]
 8009b2a:	9a00      	ldr	r2, [sp, #0]
 8009b2c:	441a      	add	r2, r3
 8009b2e:	9200      	str	r2, [sp, #0]
 8009b30:	9a06      	ldr	r2, [sp, #24]
 8009b32:	2101      	movs	r1, #1
 8009b34:	441a      	add	r2, r3
 8009b36:	4648      	mov	r0, r9
 8009b38:	9206      	str	r2, [sp, #24]
 8009b3a:	f000 fdd1 	bl	800a6e0 <__i2b>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	b166      	cbz	r6, 8009b5c <_dtoa_r+0x74c>
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dd09      	ble.n	8009b5c <_dtoa_r+0x74c>
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	9a00      	ldr	r2, [sp, #0]
 8009b4c:	bfa8      	it	ge
 8009b4e:	4633      	movge	r3, r6
 8009b50:	1ad2      	subs	r2, r2, r3
 8009b52:	9200      	str	r2, [sp, #0]
 8009b54:	9a06      	ldr	r2, [sp, #24]
 8009b56:	1af6      	subs	r6, r6, r3
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	b30b      	cbz	r3, 8009ba4 <_dtoa_r+0x794>
 8009b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80c6 	beq.w	8009cf4 <_dtoa_r+0x8e4>
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	f000 80c0 	beq.w	8009cee <_dtoa_r+0x8de>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4622      	mov	r2, r4
 8009b72:	4648      	mov	r0, r9
 8009b74:	f000 fe6c 	bl	800a850 <__pow5mult>
 8009b78:	9a02      	ldr	r2, [sp, #8]
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	4648      	mov	r0, r9
 8009b80:	f000 fdc4 	bl	800a70c <__multiply>
 8009b84:	9902      	ldr	r1, [sp, #8]
 8009b86:	4680      	mov	r8, r0
 8009b88:	4648      	mov	r0, r9
 8009b8a:	f000 fcf5 	bl	800a578 <_Bfree>
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	1b1b      	subs	r3, r3, r4
 8009b92:	9308      	str	r3, [sp, #32]
 8009b94:	f000 80b1 	beq.w	8009cfa <_dtoa_r+0x8ea>
 8009b98:	9a08      	ldr	r2, [sp, #32]
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	4648      	mov	r0, r9
 8009b9e:	f000 fe57 	bl	800a850 <__pow5mult>
 8009ba2:	9002      	str	r0, [sp, #8]
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	f000 fd9a 	bl	800a6e0 <__i2b>
 8009bac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 81d8 	beq.w	8009f66 <_dtoa_r+0xb56>
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4601      	mov	r1, r0
 8009bba:	4648      	mov	r0, r9
 8009bbc:	f000 fe48 	bl	800a850 <__pow5mult>
 8009bc0:	9b07      	ldr	r3, [sp, #28]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	f300 809f 	bgt.w	8009d08 <_dtoa_r+0x8f8>
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 8097 	bne.w	8009d00 <_dtoa_r+0x8f0>
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8093 	bne.w	8009d04 <_dtoa_r+0x8f4>
 8009bde:	9b05      	ldr	r3, [sp, #20]
 8009be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009be4:	0d1b      	lsrs	r3, r3, #20
 8009be6:	051b      	lsls	r3, r3, #20
 8009be8:	b133      	cbz	r3, 8009bf8 <_dtoa_r+0x7e8>
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	3301      	adds	r3, #1
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	9b06      	ldr	r3, [sp, #24]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	9306      	str	r3, [sp, #24]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	9308      	str	r3, [sp, #32]
 8009bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 81b8 	beq.w	8009f72 <_dtoa_r+0xb62>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c08:	6918      	ldr	r0, [r3, #16]
 8009c0a:	f000 fd1d 	bl	800a648 <__hi0bits>
 8009c0e:	f1c0 0020 	rsb	r0, r0, #32
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	4418      	add	r0, r3
 8009c16:	f010 001f 	ands.w	r0, r0, #31
 8009c1a:	f000 8082 	beq.w	8009d22 <_dtoa_r+0x912>
 8009c1e:	f1c0 0320 	rsb	r3, r0, #32
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	dd73      	ble.n	8009d0e <_dtoa_r+0x8fe>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	f1c0 001c 	rsb	r0, r0, #28
 8009c2c:	4403      	add	r3, r0
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	4403      	add	r3, r0
 8009c34:	4406      	add	r6, r0
 8009c36:	9306      	str	r3, [sp, #24]
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd05      	ble.n	8009c4a <_dtoa_r+0x83a>
 8009c3e:	9902      	ldr	r1, [sp, #8]
 8009c40:	461a      	mov	r2, r3
 8009c42:	4648      	mov	r0, r9
 8009c44:	f000 fe5e 	bl	800a904 <__lshift>
 8009c48:	9002      	str	r0, [sp, #8]
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd05      	ble.n	8009c5c <_dtoa_r+0x84c>
 8009c50:	4621      	mov	r1, r4
 8009c52:	461a      	mov	r2, r3
 8009c54:	4648      	mov	r0, r9
 8009c56:	f000 fe55 	bl	800a904 <__lshift>
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d061      	beq.n	8009d26 <_dtoa_r+0x916>
 8009c62:	9802      	ldr	r0, [sp, #8]
 8009c64:	4621      	mov	r1, r4
 8009c66:	f000 feb9 	bl	800a9dc <__mcmp>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	da5b      	bge.n	8009d26 <_dtoa_r+0x916>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9902      	ldr	r1, [sp, #8]
 8009c72:	220a      	movs	r2, #10
 8009c74:	4648      	mov	r0, r9
 8009c76:	f000 fca1 	bl	800a5bc <__multadd>
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	9002      	str	r0, [sp, #8]
 8009c7e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 8177 	beq.w	8009f76 <_dtoa_r+0xb66>
 8009c88:	4629      	mov	r1, r5
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	4648      	mov	r0, r9
 8009c90:	f000 fc94 	bl	800a5bc <__multadd>
 8009c94:	f1bb 0f00 	cmp.w	fp, #0
 8009c98:	4605      	mov	r5, r0
 8009c9a:	dc6f      	bgt.n	8009d7c <_dtoa_r+0x96c>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	dc49      	bgt.n	8009d36 <_dtoa_r+0x926>
 8009ca2:	e06b      	b.n	8009d7c <_dtoa_r+0x96c>
 8009ca4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009caa:	e73c      	b.n	8009b26 <_dtoa_r+0x716>
 8009cac:	3fe00000 	.word	0x3fe00000
 8009cb0:	40240000 	.word	0x40240000
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	1e5c      	subs	r4, r3, #1
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	db09      	blt.n	8009cd2 <_dtoa_r+0x8c2>
 8009cbe:	1b1c      	subs	r4, r3, r4
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f6bf af30 	bge.w	8009b28 <_dtoa_r+0x718>
 8009cc8:	9b00      	ldr	r3, [sp, #0]
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	1a9e      	subs	r6, r3, r2
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e72b      	b.n	8009b2a <_dtoa_r+0x71a>
 8009cd2:	9b08      	ldr	r3, [sp, #32]
 8009cd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cd6:	9408      	str	r4, [sp, #32]
 8009cd8:	1ae3      	subs	r3, r4, r3
 8009cda:	441a      	add	r2, r3
 8009cdc:	9e00      	ldr	r6, [sp, #0]
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	e721      	b.n	8009b2a <_dtoa_r+0x71a>
 8009ce6:	9c08      	ldr	r4, [sp, #32]
 8009ce8:	9e00      	ldr	r6, [sp, #0]
 8009cea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009cec:	e728      	b.n	8009b40 <_dtoa_r+0x730>
 8009cee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009cf2:	e751      	b.n	8009b98 <_dtoa_r+0x788>
 8009cf4:	9a08      	ldr	r2, [sp, #32]
 8009cf6:	9902      	ldr	r1, [sp, #8]
 8009cf8:	e750      	b.n	8009b9c <_dtoa_r+0x78c>
 8009cfa:	f8cd 8008 	str.w	r8, [sp, #8]
 8009cfe:	e751      	b.n	8009ba4 <_dtoa_r+0x794>
 8009d00:	2300      	movs	r3, #0
 8009d02:	e779      	b.n	8009bf8 <_dtoa_r+0x7e8>
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	e777      	b.n	8009bf8 <_dtoa_r+0x7e8>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9308      	str	r3, [sp, #32]
 8009d0c:	e779      	b.n	8009c02 <_dtoa_r+0x7f2>
 8009d0e:	d093      	beq.n	8009c38 <_dtoa_r+0x828>
 8009d10:	9a00      	ldr	r2, [sp, #0]
 8009d12:	331c      	adds	r3, #28
 8009d14:	441a      	add	r2, r3
 8009d16:	9200      	str	r2, [sp, #0]
 8009d18:	9a06      	ldr	r2, [sp, #24]
 8009d1a:	441a      	add	r2, r3
 8009d1c:	441e      	add	r6, r3
 8009d1e:	9206      	str	r2, [sp, #24]
 8009d20:	e78a      	b.n	8009c38 <_dtoa_r+0x828>
 8009d22:	4603      	mov	r3, r0
 8009d24:	e7f4      	b.n	8009d10 <_dtoa_r+0x900>
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	46b8      	mov	r8, r7
 8009d2c:	dc20      	bgt.n	8009d70 <_dtoa_r+0x960>
 8009d2e:	469b      	mov	fp, r3
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	dd1e      	ble.n	8009d74 <_dtoa_r+0x964>
 8009d36:	f1bb 0f00 	cmp.w	fp, #0
 8009d3a:	f47f adb1 	bne.w	80098a0 <_dtoa_r+0x490>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	465b      	mov	r3, fp
 8009d42:	2205      	movs	r2, #5
 8009d44:	4648      	mov	r0, r9
 8009d46:	f000 fc39 	bl	800a5bc <__multadd>
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	9802      	ldr	r0, [sp, #8]
 8009d50:	f000 fe44 	bl	800a9dc <__mcmp>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f77f ada3 	ble.w	80098a0 <_dtoa_r+0x490>
 8009d5a:	4656      	mov	r6, sl
 8009d5c:	2331      	movs	r3, #49	@ 0x31
 8009d5e:	f806 3b01 	strb.w	r3, [r6], #1
 8009d62:	f108 0801 	add.w	r8, r8, #1
 8009d66:	e59f      	b.n	80098a8 <_dtoa_r+0x498>
 8009d68:	9c03      	ldr	r4, [sp, #12]
 8009d6a:	46b8      	mov	r8, r7
 8009d6c:	4625      	mov	r5, r4
 8009d6e:	e7f4      	b.n	8009d5a <_dtoa_r+0x94a>
 8009d70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8101 	beq.w	8009f7e <_dtoa_r+0xb6e>
 8009d7c:	2e00      	cmp	r6, #0
 8009d7e:	dd05      	ble.n	8009d8c <_dtoa_r+0x97c>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4632      	mov	r2, r6
 8009d84:	4648      	mov	r0, r9
 8009d86:	f000 fdbd 	bl	800a904 <__lshift>
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	9b08      	ldr	r3, [sp, #32]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d05c      	beq.n	8009e4c <_dtoa_r+0xa3c>
 8009d92:	6869      	ldr	r1, [r5, #4]
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fbaf 	bl	800a4f8 <_Balloc>
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <_dtoa_r+0x99a>
 8009d9e:	4b82      	ldr	r3, [pc, #520]	@ (8009fa8 <_dtoa_r+0xb98>)
 8009da0:	4602      	mov	r2, r0
 8009da2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009da6:	f7ff bb4a 	b.w	800943e <_dtoa_r+0x2e>
 8009daa:	692a      	ldr	r2, [r5, #16]
 8009dac:	3202      	adds	r2, #2
 8009dae:	0092      	lsls	r2, r2, #2
 8009db0:	f105 010c 	add.w	r1, r5, #12
 8009db4:	300c      	adds	r0, #12
 8009db6:	f001 f8cb 	bl	800af50 <memcpy>
 8009dba:	2201      	movs	r2, #1
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4648      	mov	r0, r9
 8009dc0:	f000 fda0 	bl	800a904 <__lshift>
 8009dc4:	f10a 0301 	add.w	r3, sl, #1
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	eb0a 030b 	add.w	r3, sl, fp
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	9b04      	ldr	r3, [sp, #16]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	462f      	mov	r7, r5
 8009dd8:	9306      	str	r3, [sp, #24]
 8009dda:	4605      	mov	r5, r0
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	9802      	ldr	r0, [sp, #8]
 8009de0:	4621      	mov	r1, r4
 8009de2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009de6:	f7ff fa89 	bl	80092fc <quorem>
 8009dea:	4603      	mov	r3, r0
 8009dec:	3330      	adds	r3, #48	@ 0x30
 8009dee:	9003      	str	r0, [sp, #12]
 8009df0:	4639      	mov	r1, r7
 8009df2:	9802      	ldr	r0, [sp, #8]
 8009df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df6:	f000 fdf1 	bl	800a9dc <__mcmp>
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	9004      	str	r0, [sp, #16]
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fe07 	bl	800aa14 <__mdiff>
 8009e06:	68c2      	ldr	r2, [r0, #12]
 8009e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	bb02      	cbnz	r2, 8009e50 <_dtoa_r+0xa40>
 8009e0e:	4601      	mov	r1, r0
 8009e10:	9802      	ldr	r0, [sp, #8]
 8009e12:	f000 fde3 	bl	800a9dc <__mcmp>
 8009e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e18:	4602      	mov	r2, r0
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4648      	mov	r0, r9
 8009e1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e22:	f000 fba9 	bl	800a578 <_Bfree>
 8009e26:	9b07      	ldr	r3, [sp, #28]
 8009e28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e2a:	9e00      	ldr	r6, [sp, #0]
 8009e2c:	ea42 0103 	orr.w	r1, r2, r3
 8009e30:	9b06      	ldr	r3, [sp, #24]
 8009e32:	4319      	orrs	r1, r3
 8009e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e36:	d10d      	bne.n	8009e54 <_dtoa_r+0xa44>
 8009e38:	2b39      	cmp	r3, #57	@ 0x39
 8009e3a:	d027      	beq.n	8009e8c <_dtoa_r+0xa7c>
 8009e3c:	9a04      	ldr	r2, [sp, #16]
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	dd01      	ble.n	8009e46 <_dtoa_r+0xa36>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	3331      	adds	r3, #49	@ 0x31
 8009e46:	f88b 3000 	strb.w	r3, [fp]
 8009e4a:	e52e      	b.n	80098aa <_dtoa_r+0x49a>
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	e7b9      	b.n	8009dc4 <_dtoa_r+0x9b4>
 8009e50:	2201      	movs	r2, #1
 8009e52:	e7e2      	b.n	8009e1a <_dtoa_r+0xa0a>
 8009e54:	9904      	ldr	r1, [sp, #16]
 8009e56:	2900      	cmp	r1, #0
 8009e58:	db04      	blt.n	8009e64 <_dtoa_r+0xa54>
 8009e5a:	9807      	ldr	r0, [sp, #28]
 8009e5c:	4301      	orrs	r1, r0
 8009e5e:	9806      	ldr	r0, [sp, #24]
 8009e60:	4301      	orrs	r1, r0
 8009e62:	d120      	bne.n	8009ea6 <_dtoa_r+0xa96>
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	ddee      	ble.n	8009e46 <_dtoa_r+0xa36>
 8009e68:	9902      	ldr	r1, [sp, #8]
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fd48 	bl	800a904 <__lshift>
 8009e74:	4621      	mov	r1, r4
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	f000 fdb0 	bl	800a9dc <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	dc02      	bgt.n	8009e88 <_dtoa_r+0xa78>
 8009e82:	d1e0      	bne.n	8009e46 <_dtoa_r+0xa36>
 8009e84:	07da      	lsls	r2, r3, #31
 8009e86:	d5de      	bpl.n	8009e46 <_dtoa_r+0xa36>
 8009e88:	2b39      	cmp	r3, #57	@ 0x39
 8009e8a:	d1da      	bne.n	8009e42 <_dtoa_r+0xa32>
 8009e8c:	2339      	movs	r3, #57	@ 0x39
 8009e8e:	f88b 3000 	strb.w	r3, [fp]
 8009e92:	4633      	mov	r3, r6
 8009e94:	461e      	mov	r6, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e9c:	2a39      	cmp	r2, #57	@ 0x39
 8009e9e:	d04e      	beq.n	8009f3e <_dtoa_r+0xb2e>
 8009ea0:	3201      	adds	r2, #1
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	e501      	b.n	80098aa <_dtoa_r+0x49a>
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	dd03      	ble.n	8009eb2 <_dtoa_r+0xaa2>
 8009eaa:	2b39      	cmp	r3, #57	@ 0x39
 8009eac:	d0ee      	beq.n	8009e8c <_dtoa_r+0xa7c>
 8009eae:	3301      	adds	r3, #1
 8009eb0:	e7c9      	b.n	8009e46 <_dtoa_r+0xa36>
 8009eb2:	9a00      	ldr	r2, [sp, #0]
 8009eb4:	9908      	ldr	r1, [sp, #32]
 8009eb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eba:	428a      	cmp	r2, r1
 8009ebc:	d028      	beq.n	8009f10 <_dtoa_r+0xb00>
 8009ebe:	9902      	ldr	r1, [sp, #8]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	4648      	mov	r0, r9
 8009ec6:	f000 fb79 	bl	800a5bc <__multadd>
 8009eca:	42af      	cmp	r7, r5
 8009ecc:	9002      	str	r0, [sp, #8]
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	f04f 020a 	mov.w	r2, #10
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	4648      	mov	r0, r9
 8009eda:	d107      	bne.n	8009eec <_dtoa_r+0xadc>
 8009edc:	f000 fb6e 	bl	800a5bc <__multadd>
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	9b00      	ldr	r3, [sp, #0]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	e777      	b.n	8009ddc <_dtoa_r+0x9cc>
 8009eec:	f000 fb66 	bl	800a5bc <__multadd>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	220a      	movs	r2, #10
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f000 fb5f 	bl	800a5bc <__multadd>
 8009efe:	4605      	mov	r5, r0
 8009f00:	e7f0      	b.n	8009ee4 <_dtoa_r+0xad4>
 8009f02:	f1bb 0f00 	cmp.w	fp, #0
 8009f06:	bfcc      	ite	gt
 8009f08:	465e      	movgt	r6, fp
 8009f0a:	2601      	movle	r6, #1
 8009f0c:	4456      	add	r6, sl
 8009f0e:	2700      	movs	r7, #0
 8009f10:	9902      	ldr	r1, [sp, #8]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	2201      	movs	r2, #1
 8009f16:	4648      	mov	r0, r9
 8009f18:	f000 fcf4 	bl	800a904 <__lshift>
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	9002      	str	r0, [sp, #8]
 8009f20:	f000 fd5c 	bl	800a9dc <__mcmp>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	dcb4      	bgt.n	8009e92 <_dtoa_r+0xa82>
 8009f28:	d102      	bne.n	8009f30 <_dtoa_r+0xb20>
 8009f2a:	9b00      	ldr	r3, [sp, #0]
 8009f2c:	07db      	lsls	r3, r3, #31
 8009f2e:	d4b0      	bmi.n	8009e92 <_dtoa_r+0xa82>
 8009f30:	4633      	mov	r3, r6
 8009f32:	461e      	mov	r6, r3
 8009f34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f38:	2a30      	cmp	r2, #48	@ 0x30
 8009f3a:	d0fa      	beq.n	8009f32 <_dtoa_r+0xb22>
 8009f3c:	e4b5      	b.n	80098aa <_dtoa_r+0x49a>
 8009f3e:	459a      	cmp	sl, r3
 8009f40:	d1a8      	bne.n	8009e94 <_dtoa_r+0xa84>
 8009f42:	2331      	movs	r3, #49	@ 0x31
 8009f44:	f108 0801 	add.w	r8, r8, #1
 8009f48:	f88a 3000 	strb.w	r3, [sl]
 8009f4c:	e4ad      	b.n	80098aa <_dtoa_r+0x49a>
 8009f4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fac <_dtoa_r+0xb9c>
 8009f54:	b11b      	cbz	r3, 8009f5e <_dtoa_r+0xb4e>
 8009f56:	f10a 0308 	add.w	r3, sl, #8
 8009f5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	4650      	mov	r0, sl
 8009f60:	b017      	add	sp, #92	@ 0x5c
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	9b07      	ldr	r3, [sp, #28]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	f77f ae2e 	ble.w	8009bca <_dtoa_r+0x7ba>
 8009f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f70:	9308      	str	r3, [sp, #32]
 8009f72:	2001      	movs	r0, #1
 8009f74:	e64d      	b.n	8009c12 <_dtoa_r+0x802>
 8009f76:	f1bb 0f00 	cmp.w	fp, #0
 8009f7a:	f77f aed9 	ble.w	8009d30 <_dtoa_r+0x920>
 8009f7e:	4656      	mov	r6, sl
 8009f80:	9802      	ldr	r0, [sp, #8]
 8009f82:	4621      	mov	r1, r4
 8009f84:	f7ff f9ba 	bl	80092fc <quorem>
 8009f88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f90:	eba6 020a 	sub.w	r2, r6, sl
 8009f94:	4593      	cmp	fp, r2
 8009f96:	ddb4      	ble.n	8009f02 <_dtoa_r+0xaf2>
 8009f98:	9902      	ldr	r1, [sp, #8]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	f000 fb0c 	bl	800a5bc <__multadd>
 8009fa4:	9002      	str	r0, [sp, #8]
 8009fa6:	e7eb      	b.n	8009f80 <_dtoa_r+0xb70>
 8009fa8:	0801f304 	.word	0x0801f304
 8009fac:	0801f288 	.word	0x0801f288

08009fb0 <__sfputc_r>:
 8009fb0:	6893      	ldr	r3, [r2, #8]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	b410      	push	{r4}
 8009fb8:	6093      	str	r3, [r2, #8]
 8009fba:	da08      	bge.n	8009fce <__sfputc_r+0x1e>
 8009fbc:	6994      	ldr	r4, [r2, #24]
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	db01      	blt.n	8009fc6 <__sfputc_r+0x16>
 8009fc2:	290a      	cmp	r1, #10
 8009fc4:	d103      	bne.n	8009fce <__sfputc_r+0x1e>
 8009fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fca:	f000 be52 	b.w	800ac72 <__swbuf_r>
 8009fce:	6813      	ldr	r3, [r2, #0]
 8009fd0:	1c58      	adds	r0, r3, #1
 8009fd2:	6010      	str	r0, [r2, #0]
 8009fd4:	7019      	strb	r1, [r3, #0]
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <__sfputs_r>:
 8009fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	18d5      	adds	r5, r2, r3
 8009fe8:	42ac      	cmp	r4, r5
 8009fea:	d101      	bne.n	8009ff0 <__sfputs_r+0x12>
 8009fec:	2000      	movs	r0, #0
 8009fee:	e007      	b.n	800a000 <__sfputs_r+0x22>
 8009ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f7ff ffda 	bl	8009fb0 <__sfputc_r>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d1f3      	bne.n	8009fe8 <__sfputs_r+0xa>
 800a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a004 <_vfiprintf_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	460d      	mov	r5, r1
 800a00a:	b09d      	sub	sp, #116	@ 0x74
 800a00c:	4614      	mov	r4, r2
 800a00e:	4698      	mov	r8, r3
 800a010:	4606      	mov	r6, r0
 800a012:	b118      	cbz	r0, 800a01c <_vfiprintf_r+0x18>
 800a014:	6a03      	ldr	r3, [r0, #32]
 800a016:	b90b      	cbnz	r3, 800a01c <_vfiprintf_r+0x18>
 800a018:	f7ff f890 	bl	800913c <__sinit>
 800a01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a01e:	07d9      	lsls	r1, r3, #31
 800a020:	d405      	bmi.n	800a02e <_vfiprintf_r+0x2a>
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	059a      	lsls	r2, r3, #22
 800a026:	d402      	bmi.n	800a02e <_vfiprintf_r+0x2a>
 800a028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a02a:	f7ff f960 	bl	80092ee <__retarget_lock_acquire_recursive>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	071b      	lsls	r3, r3, #28
 800a032:	d501      	bpl.n	800a038 <_vfiprintf_r+0x34>
 800a034:	692b      	ldr	r3, [r5, #16]
 800a036:	b99b      	cbnz	r3, 800a060 <_vfiprintf_r+0x5c>
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 fe58 	bl	800acf0 <__swsetup_r>
 800a040:	b170      	cbz	r0, 800a060 <_vfiprintf_r+0x5c>
 800a042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a044:	07dc      	lsls	r4, r3, #31
 800a046:	d504      	bpl.n	800a052 <_vfiprintf_r+0x4e>
 800a048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a04c:	b01d      	add	sp, #116	@ 0x74
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	0598      	lsls	r0, r3, #22
 800a056:	d4f7      	bmi.n	800a048 <_vfiprintf_r+0x44>
 800a058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a05a:	f7ff f949 	bl	80092f0 <__retarget_lock_release_recursive>
 800a05e:	e7f3      	b.n	800a048 <_vfiprintf_r+0x44>
 800a060:	2300      	movs	r3, #0
 800a062:	9309      	str	r3, [sp, #36]	@ 0x24
 800a064:	2320      	movs	r3, #32
 800a066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a06e:	2330      	movs	r3, #48	@ 0x30
 800a070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a220 <_vfiprintf_r+0x21c>
 800a074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a078:	f04f 0901 	mov.w	r9, #1
 800a07c:	4623      	mov	r3, r4
 800a07e:	469a      	mov	sl, r3
 800a080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a084:	b10a      	cbz	r2, 800a08a <_vfiprintf_r+0x86>
 800a086:	2a25      	cmp	r2, #37	@ 0x25
 800a088:	d1f9      	bne.n	800a07e <_vfiprintf_r+0x7a>
 800a08a:	ebba 0b04 	subs.w	fp, sl, r4
 800a08e:	d00b      	beq.n	800a0a8 <_vfiprintf_r+0xa4>
 800a090:	465b      	mov	r3, fp
 800a092:	4622      	mov	r2, r4
 800a094:	4629      	mov	r1, r5
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ffa1 	bl	8009fde <__sfputs_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	f000 80a7 	beq.w	800a1f0 <_vfiprintf_r+0x1ec>
 800a0a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a4:	445a      	add	r2, fp
 800a0a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 809f 	beq.w	800a1f0 <_vfiprintf_r+0x1ec>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0bc:	f10a 0a01 	add.w	sl, sl, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2205      	movs	r2, #5
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4853      	ldr	r0, [pc, #332]	@ (800a220 <_vfiprintf_r+0x21c>)
 800a0d4:	f7f6 f89c 	bl	8000210 <memchr>
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	b9d8      	cbnz	r0, 800a114 <_vfiprintf_r+0x110>
 800a0dc:	06d1      	lsls	r1, r2, #27
 800a0de:	bf44      	itt	mi
 800a0e0:	2320      	movmi	r3, #32
 800a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e6:	0713      	lsls	r3, r2, #28
 800a0e8:	bf44      	itt	mi
 800a0ea:	232b      	movmi	r3, #43	@ 0x2b
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f6:	d015      	beq.n	800a124 <_vfiprintf_r+0x120>
 800a0f8:	9a07      	ldr	r2, [sp, #28]
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4621      	mov	r1, r4
 800a104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a108:	3b30      	subs	r3, #48	@ 0x30
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	d94b      	bls.n	800a1a6 <_vfiprintf_r+0x1a2>
 800a10e:	b1b0      	cbz	r0, 800a13e <_vfiprintf_r+0x13a>
 800a110:	9207      	str	r2, [sp, #28]
 800a112:	e014      	b.n	800a13e <_vfiprintf_r+0x13a>
 800a114:	eba0 0308 	sub.w	r3, r0, r8
 800a118:	fa09 f303 	lsl.w	r3, r9, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	46a2      	mov	sl, r4
 800a122:	e7d2      	b.n	800a0ca <_vfiprintf_r+0xc6>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	1d19      	adds	r1, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	9103      	str	r1, [sp, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbb      	ittet	lt
 800a130:	425b      	neglt	r3, r3
 800a132:	f042 0202 	orrlt.w	r2, r2, #2
 800a136:	9307      	strge	r3, [sp, #28]
 800a138:	9307      	strlt	r3, [sp, #28]
 800a13a:	bfb8      	it	lt
 800a13c:	9204      	strlt	r2, [sp, #16]
 800a13e:	7823      	ldrb	r3, [r4, #0]
 800a140:	2b2e      	cmp	r3, #46	@ 0x2e
 800a142:	d10a      	bne.n	800a15a <_vfiprintf_r+0x156>
 800a144:	7863      	ldrb	r3, [r4, #1]
 800a146:	2b2a      	cmp	r3, #42	@ 0x2a
 800a148:	d132      	bne.n	800a1b0 <_vfiprintf_r+0x1ac>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	9203      	str	r2, [sp, #12]
 800a152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a156:	3402      	adds	r4, #2
 800a158:	9305      	str	r3, [sp, #20]
 800a15a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a230 <_vfiprintf_r+0x22c>
 800a15e:	7821      	ldrb	r1, [r4, #0]
 800a160:	2203      	movs	r2, #3
 800a162:	4650      	mov	r0, sl
 800a164:	f7f6 f854 	bl	8000210 <memchr>
 800a168:	b138      	cbz	r0, 800a17a <_vfiprintf_r+0x176>
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	eba0 000a 	sub.w	r0, r0, sl
 800a170:	2240      	movs	r2, #64	@ 0x40
 800a172:	4082      	lsls	r2, r0
 800a174:	4313      	orrs	r3, r2
 800a176:	3401      	adds	r4, #1
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17e:	4829      	ldr	r0, [pc, #164]	@ (800a224 <_vfiprintf_r+0x220>)
 800a180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a184:	2206      	movs	r2, #6
 800a186:	f7f6 f843 	bl	8000210 <memchr>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d03f      	beq.n	800a20e <_vfiprintf_r+0x20a>
 800a18e:	4b26      	ldr	r3, [pc, #152]	@ (800a228 <_vfiprintf_r+0x224>)
 800a190:	bb1b      	cbnz	r3, 800a1da <_vfiprintf_r+0x1d6>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	3307      	adds	r3, #7
 800a196:	f023 0307 	bic.w	r3, r3, #7
 800a19a:	3308      	adds	r3, #8
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a0:	443b      	add	r3, r7
 800a1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a4:	e76a      	b.n	800a07c <_vfiprintf_r+0x78>
 800a1a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	e7a8      	b.n	800a102 <_vfiprintf_r+0xfe>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	3401      	adds	r4, #1
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f04f 0c0a 	mov.w	ip, #10
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c2:	3a30      	subs	r2, #48	@ 0x30
 800a1c4:	2a09      	cmp	r2, #9
 800a1c6:	d903      	bls.n	800a1d0 <_vfiprintf_r+0x1cc>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0c6      	beq.n	800a15a <_vfiprintf_r+0x156>
 800a1cc:	9105      	str	r1, [sp, #20]
 800a1ce:	e7c4      	b.n	800a15a <_vfiprintf_r+0x156>
 800a1d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e7f0      	b.n	800a1bc <_vfiprintf_r+0x1b8>
 800a1da:	ab03      	add	r3, sp, #12
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <_vfiprintf_r+0x228>)
 800a1e2:	a904      	add	r1, sp, #16
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7fe fb67 	bl	80088b8 <_printf_float>
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	1c78      	adds	r0, r7, #1
 800a1ee:	d1d6      	bne.n	800a19e <_vfiprintf_r+0x19a>
 800a1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f2:	07d9      	lsls	r1, r3, #31
 800a1f4:	d405      	bmi.n	800a202 <_vfiprintf_r+0x1fe>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	059a      	lsls	r2, r3, #22
 800a1fa:	d402      	bmi.n	800a202 <_vfiprintf_r+0x1fe>
 800a1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1fe:	f7ff f877 	bl	80092f0 <__retarget_lock_release_recursive>
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	065b      	lsls	r3, r3, #25
 800a206:	f53f af1f 	bmi.w	800a048 <_vfiprintf_r+0x44>
 800a20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a20c:	e71e      	b.n	800a04c <_vfiprintf_r+0x48>
 800a20e:	ab03      	add	r3, sp, #12
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	462a      	mov	r2, r5
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <_vfiprintf_r+0x228>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	4630      	mov	r0, r6
 800a21a:	f7fe fde5 	bl	8008de8 <_printf_i>
 800a21e:	e7e4      	b.n	800a1ea <_vfiprintf_r+0x1e6>
 800a220:	0801f315 	.word	0x0801f315
 800a224:	0801f31f 	.word	0x0801f31f
 800a228:	080088b9 	.word	0x080088b9
 800a22c:	08009fdf 	.word	0x08009fdf
 800a230:	0801f31b 	.word	0x0801f31b

0800a234 <malloc>:
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <malloc+0xc>)
 800a236:	4601      	mov	r1, r0
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	f000 b825 	b.w	800a288 <_malloc_r>
 800a23e:	bf00      	nop
 800a240:	2000005c 	.word	0x2000005c

0800a244 <sbrk_aligned>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	4e0f      	ldr	r6, [pc, #60]	@ (800a284 <sbrk_aligned+0x40>)
 800a248:	460c      	mov	r4, r1
 800a24a:	6831      	ldr	r1, [r6, #0]
 800a24c:	4605      	mov	r5, r0
 800a24e:	b911      	cbnz	r1, 800a256 <sbrk_aligned+0x12>
 800a250:	f000 fe3a 	bl	800aec8 <_sbrk_r>
 800a254:	6030      	str	r0, [r6, #0]
 800a256:	4621      	mov	r1, r4
 800a258:	4628      	mov	r0, r5
 800a25a:	f000 fe35 	bl	800aec8 <_sbrk_r>
 800a25e:	1c43      	adds	r3, r0, #1
 800a260:	d103      	bne.n	800a26a <sbrk_aligned+0x26>
 800a262:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a266:	4620      	mov	r0, r4
 800a268:	bd70      	pop	{r4, r5, r6, pc}
 800a26a:	1cc4      	adds	r4, r0, #3
 800a26c:	f024 0403 	bic.w	r4, r4, #3
 800a270:	42a0      	cmp	r0, r4
 800a272:	d0f8      	beq.n	800a266 <sbrk_aligned+0x22>
 800a274:	1a21      	subs	r1, r4, r0
 800a276:	4628      	mov	r0, r5
 800a278:	f000 fe26 	bl	800aec8 <_sbrk_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d1f2      	bne.n	800a266 <sbrk_aligned+0x22>
 800a280:	e7ef      	b.n	800a262 <sbrk_aligned+0x1e>
 800a282:	bf00      	nop
 800a284:	20003f9c 	.word	0x20003f9c

0800a288 <_malloc_r>:
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	1ccd      	adds	r5, r1, #3
 800a28e:	f025 0503 	bic.w	r5, r5, #3
 800a292:	3508      	adds	r5, #8
 800a294:	2d0c      	cmp	r5, #12
 800a296:	bf38      	it	cc
 800a298:	250c      	movcc	r5, #12
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	4606      	mov	r6, r0
 800a29e:	db01      	blt.n	800a2a4 <_malloc_r+0x1c>
 800a2a0:	42a9      	cmp	r1, r5
 800a2a2:	d904      	bls.n	800a2ae <_malloc_r+0x26>
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a384 <_malloc_r+0xfc>
 800a2b2:	f000 f915 	bl	800a4e0 <__malloc_lock>
 800a2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ba:	461c      	mov	r4, r3
 800a2bc:	bb44      	cbnz	r4, 800a310 <_malloc_r+0x88>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff ffbf 	bl	800a244 <sbrk_aligned>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	d158      	bne.n	800a37e <_malloc_r+0xf6>
 800a2cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d0:	4627      	mov	r7, r4
 800a2d2:	2f00      	cmp	r7, #0
 800a2d4:	d143      	bne.n	800a35e <_malloc_r+0xd6>
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d04b      	beq.n	800a372 <_malloc_r+0xea>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	eb04 0903 	add.w	r9, r4, r3
 800a2e4:	f000 fdf0 	bl	800aec8 <_sbrk_r>
 800a2e8:	4581      	cmp	r9, r0
 800a2ea:	d142      	bne.n	800a372 <_malloc_r+0xea>
 800a2ec:	6821      	ldr	r1, [r4, #0]
 800a2ee:	1a6d      	subs	r5, r5, r1
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ffa6 	bl	800a244 <sbrk_aligned>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d03a      	beq.n	800a372 <_malloc_r+0xea>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	442b      	add	r3, r5
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	f8d8 3000 	ldr.w	r3, [r8]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	bb62      	cbnz	r2, 800a364 <_malloc_r+0xdc>
 800a30a:	f8c8 7000 	str.w	r7, [r8]
 800a30e:	e00f      	b.n	800a330 <_malloc_r+0xa8>
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	1b52      	subs	r2, r2, r5
 800a314:	d420      	bmi.n	800a358 <_malloc_r+0xd0>
 800a316:	2a0b      	cmp	r2, #11
 800a318:	d917      	bls.n	800a34a <_malloc_r+0xc2>
 800a31a:	1961      	adds	r1, r4, r5
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	6025      	str	r5, [r4, #0]
 800a320:	bf18      	it	ne
 800a322:	6059      	strne	r1, [r3, #4]
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	bf08      	it	eq
 800a328:	f8c8 1000 	streq.w	r1, [r8]
 800a32c:	5162      	str	r2, [r4, r5]
 800a32e:	604b      	str	r3, [r1, #4]
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f8db 	bl	800a4ec <__malloc_unlock>
 800a336:	f104 000b 	add.w	r0, r4, #11
 800a33a:	1d23      	adds	r3, r4, #4
 800a33c:	f020 0007 	bic.w	r0, r0, #7
 800a340:	1ac2      	subs	r2, r0, r3
 800a342:	bf1c      	itt	ne
 800a344:	1a1b      	subne	r3, r3, r0
 800a346:	50a3      	strne	r3, [r4, r2]
 800a348:	e7af      	b.n	800a2aa <_malloc_r+0x22>
 800a34a:	6862      	ldr	r2, [r4, #4]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	bf0c      	ite	eq
 800a350:	f8c8 2000 	streq.w	r2, [r8]
 800a354:	605a      	strne	r2, [r3, #4]
 800a356:	e7eb      	b.n	800a330 <_malloc_r+0xa8>
 800a358:	4623      	mov	r3, r4
 800a35a:	6864      	ldr	r4, [r4, #4]
 800a35c:	e7ae      	b.n	800a2bc <_malloc_r+0x34>
 800a35e:	463c      	mov	r4, r7
 800a360:	687f      	ldr	r7, [r7, #4]
 800a362:	e7b6      	b.n	800a2d2 <_malloc_r+0x4a>
 800a364:	461a      	mov	r2, r3
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	d1fb      	bne.n	800a364 <_malloc_r+0xdc>
 800a36c:	2300      	movs	r3, #0
 800a36e:	6053      	str	r3, [r2, #4]
 800a370:	e7de      	b.n	800a330 <_malloc_r+0xa8>
 800a372:	230c      	movs	r3, #12
 800a374:	6033      	str	r3, [r6, #0]
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f8b8 	bl	800a4ec <__malloc_unlock>
 800a37c:	e794      	b.n	800a2a8 <_malloc_r+0x20>
 800a37e:	6005      	str	r5, [r0, #0]
 800a380:	e7d6      	b.n	800a330 <_malloc_r+0xa8>
 800a382:	bf00      	nop
 800a384:	20003fa0 	.word	0x20003fa0

0800a388 <__sflush_r>:
 800a388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a390:	0716      	lsls	r6, r2, #28
 800a392:	4605      	mov	r5, r0
 800a394:	460c      	mov	r4, r1
 800a396:	d454      	bmi.n	800a442 <__sflush_r+0xba>
 800a398:	684b      	ldr	r3, [r1, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dc02      	bgt.n	800a3a4 <__sflush_r+0x1c>
 800a39e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dd48      	ble.n	800a436 <__sflush_r+0xae>
 800a3a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d045      	beq.n	800a436 <__sflush_r+0xae>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3b0:	682f      	ldr	r7, [r5, #0]
 800a3b2:	6a21      	ldr	r1, [r4, #32]
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	d030      	beq.n	800a41a <__sflush_r+0x92>
 800a3b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	0759      	lsls	r1, r3, #29
 800a3be:	d505      	bpl.n	800a3cc <__sflush_r+0x44>
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	1ad2      	subs	r2, r2, r3
 800a3c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3c6:	b10b      	cbz	r3, 800a3cc <__sflush_r+0x44>
 800a3c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3d0:	6a21      	ldr	r1, [r4, #32]
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b0      	blx	r6
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	d106      	bne.n	800a3ea <__sflush_r+0x62>
 800a3dc:	6829      	ldr	r1, [r5, #0]
 800a3de:	291d      	cmp	r1, #29
 800a3e0:	d82b      	bhi.n	800a43a <__sflush_r+0xb2>
 800a3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <__sflush_r+0x104>)
 800a3e4:	40ca      	lsrs	r2, r1
 800a3e6:	07d6      	lsls	r6, r2, #31
 800a3e8:	d527      	bpl.n	800a43a <__sflush_r+0xb2>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	6062      	str	r2, [r4, #4]
 800a3ee:	04d9      	lsls	r1, r3, #19
 800a3f0:	6922      	ldr	r2, [r4, #16]
 800a3f2:	6022      	str	r2, [r4, #0]
 800a3f4:	d504      	bpl.n	800a400 <__sflush_r+0x78>
 800a3f6:	1c42      	adds	r2, r0, #1
 800a3f8:	d101      	bne.n	800a3fe <__sflush_r+0x76>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	b903      	cbnz	r3, 800a400 <__sflush_r+0x78>
 800a3fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a402:	602f      	str	r7, [r5, #0]
 800a404:	b1b9      	cbz	r1, 800a436 <__sflush_r+0xae>
 800a406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a40a:	4299      	cmp	r1, r3
 800a40c:	d002      	beq.n	800a414 <__sflush_r+0x8c>
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fdde 	bl	800afd0 <_free_r>
 800a414:	2300      	movs	r3, #0
 800a416:	6363      	str	r3, [r4, #52]	@ 0x34
 800a418:	e00d      	b.n	800a436 <__sflush_r+0xae>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b0      	blx	r6
 800a420:	4602      	mov	r2, r0
 800a422:	1c50      	adds	r0, r2, #1
 800a424:	d1c9      	bne.n	800a3ba <__sflush_r+0x32>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0c6      	beq.n	800a3ba <__sflush_r+0x32>
 800a42c:	2b1d      	cmp	r3, #29
 800a42e:	d001      	beq.n	800a434 <__sflush_r+0xac>
 800a430:	2b16      	cmp	r3, #22
 800a432:	d11e      	bne.n	800a472 <__sflush_r+0xea>
 800a434:	602f      	str	r7, [r5, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	e022      	b.n	800a480 <__sflush_r+0xf8>
 800a43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a43e:	b21b      	sxth	r3, r3
 800a440:	e01b      	b.n	800a47a <__sflush_r+0xf2>
 800a442:	690f      	ldr	r7, [r1, #16]
 800a444:	2f00      	cmp	r7, #0
 800a446:	d0f6      	beq.n	800a436 <__sflush_r+0xae>
 800a448:	0793      	lsls	r3, r2, #30
 800a44a:	680e      	ldr	r6, [r1, #0]
 800a44c:	bf08      	it	eq
 800a44e:	694b      	ldreq	r3, [r1, #20]
 800a450:	600f      	str	r7, [r1, #0]
 800a452:	bf18      	it	ne
 800a454:	2300      	movne	r3, #0
 800a456:	eba6 0807 	sub.w	r8, r6, r7
 800a45a:	608b      	str	r3, [r1, #8]
 800a45c:	f1b8 0f00 	cmp.w	r8, #0
 800a460:	dde9      	ble.n	800a436 <__sflush_r+0xae>
 800a462:	6a21      	ldr	r1, [r4, #32]
 800a464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a466:	4643      	mov	r3, r8
 800a468:	463a      	mov	r2, r7
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b0      	blx	r6
 800a46e:	2800      	cmp	r0, #0
 800a470:	dc08      	bgt.n	800a484 <__sflush_r+0xfc>
 800a472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a484:	4407      	add	r7, r0
 800a486:	eba8 0800 	sub.w	r8, r8, r0
 800a48a:	e7e7      	b.n	800a45c <__sflush_r+0xd4>
 800a48c:	20400001 	.word	0x20400001

0800a490 <_fflush_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	690b      	ldr	r3, [r1, #16]
 800a494:	4605      	mov	r5, r0
 800a496:	460c      	mov	r4, r1
 800a498:	b913      	cbnz	r3, 800a4a0 <_fflush_r+0x10>
 800a49a:	2500      	movs	r5, #0
 800a49c:	4628      	mov	r0, r5
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	b118      	cbz	r0, 800a4aa <_fflush_r+0x1a>
 800a4a2:	6a03      	ldr	r3, [r0, #32]
 800a4a4:	b90b      	cbnz	r3, 800a4aa <_fflush_r+0x1a>
 800a4a6:	f7fe fe49 	bl	800913c <__sinit>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f3      	beq.n	800a49a <_fflush_r+0xa>
 800a4b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d404      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4b8:	0599      	lsls	r1, r3, #22
 800a4ba:	d402      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4be:	f7fe ff16 	bl	80092ee <__retarget_lock_acquire_recursive>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7ff ff5f 	bl	800a388 <__sflush_r>
 800a4ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4cc:	07da      	lsls	r2, r3, #31
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	d4e4      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d4e1      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4da:	f7fe ff09 	bl	80092f0 <__retarget_lock_release_recursive>
 800a4de:	e7dd      	b.n	800a49c <_fflush_r+0xc>

0800a4e0 <__malloc_lock>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	@ (800a4e8 <__malloc_lock+0x8>)
 800a4e2:	f7fe bf04 	b.w	80092ee <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	20003f98 	.word	0x20003f98

0800a4ec <__malloc_unlock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	@ (800a4f4 <__malloc_unlock+0x8>)
 800a4ee:	f7fe beff 	b.w	80092f0 <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20003f98 	.word	0x20003f98

0800a4f8 <_Balloc>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	69c6      	ldr	r6, [r0, #28]
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	b976      	cbnz	r6, 800a520 <_Balloc+0x28>
 800a502:	2010      	movs	r0, #16
 800a504:	f7ff fe96 	bl	800a234 <malloc>
 800a508:	4602      	mov	r2, r0
 800a50a:	61e0      	str	r0, [r4, #28]
 800a50c:	b920      	cbnz	r0, 800a518 <_Balloc+0x20>
 800a50e:	4b18      	ldr	r3, [pc, #96]	@ (800a570 <_Balloc+0x78>)
 800a510:	4818      	ldr	r0, [pc, #96]	@ (800a574 <_Balloc+0x7c>)
 800a512:	216b      	movs	r1, #107	@ 0x6b
 800a514:	f000 fd2a 	bl	800af6c <__assert_func>
 800a518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a51c:	6006      	str	r6, [r0, #0]
 800a51e:	60c6      	str	r6, [r0, #12]
 800a520:	69e6      	ldr	r6, [r4, #28]
 800a522:	68f3      	ldr	r3, [r6, #12]
 800a524:	b183      	cbz	r3, 800a548 <_Balloc+0x50>
 800a526:	69e3      	ldr	r3, [r4, #28]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a52e:	b9b8      	cbnz	r0, 800a560 <_Balloc+0x68>
 800a530:	2101      	movs	r1, #1
 800a532:	fa01 f605 	lsl.w	r6, r1, r5
 800a536:	1d72      	adds	r2, r6, #5
 800a538:	0092      	lsls	r2, r2, #2
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fd34 	bl	800afa8 <_calloc_r>
 800a540:	b160      	cbz	r0, 800a55c <_Balloc+0x64>
 800a542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a546:	e00e      	b.n	800a566 <_Balloc+0x6e>
 800a548:	2221      	movs	r2, #33	@ 0x21
 800a54a:	2104      	movs	r1, #4
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 fd2b 	bl	800afa8 <_calloc_r>
 800a552:	69e3      	ldr	r3, [r4, #28]
 800a554:	60f0      	str	r0, [r6, #12]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e4      	bne.n	800a526 <_Balloc+0x2e>
 800a55c:	2000      	movs	r0, #0
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	6802      	ldr	r2, [r0, #0]
 800a562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a566:	2300      	movs	r3, #0
 800a568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a56c:	e7f7      	b.n	800a55e <_Balloc+0x66>
 800a56e:	bf00      	nop
 800a570:	0801f295 	.word	0x0801f295
 800a574:	0801f326 	.word	0x0801f326

0800a578 <_Bfree>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	69c6      	ldr	r6, [r0, #28]
 800a57c:	4605      	mov	r5, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b976      	cbnz	r6, 800a5a0 <_Bfree+0x28>
 800a582:	2010      	movs	r0, #16
 800a584:	f7ff fe56 	bl	800a234 <malloc>
 800a588:	4602      	mov	r2, r0
 800a58a:	61e8      	str	r0, [r5, #28]
 800a58c:	b920      	cbnz	r0, 800a598 <_Bfree+0x20>
 800a58e:	4b09      	ldr	r3, [pc, #36]	@ (800a5b4 <_Bfree+0x3c>)
 800a590:	4809      	ldr	r0, [pc, #36]	@ (800a5b8 <_Bfree+0x40>)
 800a592:	218f      	movs	r1, #143	@ 0x8f
 800a594:	f000 fcea 	bl	800af6c <__assert_func>
 800a598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a59c:	6006      	str	r6, [r0, #0]
 800a59e:	60c6      	str	r6, [r0, #12]
 800a5a0:	b13c      	cbz	r4, 800a5b2 <_Bfree+0x3a>
 800a5a2:	69eb      	ldr	r3, [r5, #28]
 800a5a4:	6862      	ldr	r2, [r4, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5ac:	6021      	str	r1, [r4, #0]
 800a5ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	0801f295 	.word	0x0801f295
 800a5b8:	0801f326 	.word	0x0801f326

0800a5bc <__multadd>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	690d      	ldr	r5, [r1, #16]
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	461e      	mov	r6, r3
 800a5c8:	f101 0c14 	add.w	ip, r1, #20
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a5d2:	b299      	uxth	r1, r3
 800a5d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a5d8:	0c1e      	lsrs	r6, r3, #16
 800a5da:	0c0b      	lsrs	r3, r1, #16
 800a5dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a5e0:	b289      	uxth	r1, r1
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5e8:	4285      	cmp	r5, r0
 800a5ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5f2:	dcec      	bgt.n	800a5ce <__multadd+0x12>
 800a5f4:	b30e      	cbz	r6, 800a63a <__multadd+0x7e>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	42ab      	cmp	r3, r5
 800a5fa:	dc19      	bgt.n	800a630 <__multadd+0x74>
 800a5fc:	6861      	ldr	r1, [r4, #4]
 800a5fe:	4638      	mov	r0, r7
 800a600:	3101      	adds	r1, #1
 800a602:	f7ff ff79 	bl	800a4f8 <_Balloc>
 800a606:	4680      	mov	r8, r0
 800a608:	b928      	cbnz	r0, 800a616 <__multadd+0x5a>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b0c      	ldr	r3, [pc, #48]	@ (800a640 <__multadd+0x84>)
 800a60e:	480d      	ldr	r0, [pc, #52]	@ (800a644 <__multadd+0x88>)
 800a610:	21ba      	movs	r1, #186	@ 0xba
 800a612:	f000 fcab 	bl	800af6c <__assert_func>
 800a616:	6922      	ldr	r2, [r4, #16]
 800a618:	3202      	adds	r2, #2
 800a61a:	f104 010c 	add.w	r1, r4, #12
 800a61e:	0092      	lsls	r2, r2, #2
 800a620:	300c      	adds	r0, #12
 800a622:	f000 fc95 	bl	800af50 <memcpy>
 800a626:	4621      	mov	r1, r4
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ffa5 	bl	800a578 <_Bfree>
 800a62e:	4644      	mov	r4, r8
 800a630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a634:	3501      	adds	r5, #1
 800a636:	615e      	str	r6, [r3, #20]
 800a638:	6125      	str	r5, [r4, #16]
 800a63a:	4620      	mov	r0, r4
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	0801f304 	.word	0x0801f304
 800a644:	0801f326 	.word	0x0801f326

0800a648 <__hi0bits>:
 800a648:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a64c:	4603      	mov	r3, r0
 800a64e:	bf36      	itet	cc
 800a650:	0403      	lslcc	r3, r0, #16
 800a652:	2000      	movcs	r0, #0
 800a654:	2010      	movcc	r0, #16
 800a656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a65a:	bf3c      	itt	cc
 800a65c:	021b      	lslcc	r3, r3, #8
 800a65e:	3008      	addcc	r0, #8
 800a660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a664:	bf3c      	itt	cc
 800a666:	011b      	lslcc	r3, r3, #4
 800a668:	3004      	addcc	r0, #4
 800a66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a66e:	bf3c      	itt	cc
 800a670:	009b      	lslcc	r3, r3, #2
 800a672:	3002      	addcc	r0, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	db05      	blt.n	800a684 <__hi0bits+0x3c>
 800a678:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a67c:	f100 0001 	add.w	r0, r0, #1
 800a680:	bf08      	it	eq
 800a682:	2020      	moveq	r0, #32
 800a684:	4770      	bx	lr

0800a686 <__lo0bits>:
 800a686:	6803      	ldr	r3, [r0, #0]
 800a688:	4602      	mov	r2, r0
 800a68a:	f013 0007 	ands.w	r0, r3, #7
 800a68e:	d00b      	beq.n	800a6a8 <__lo0bits+0x22>
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	d421      	bmi.n	800a6d8 <__lo0bits+0x52>
 800a694:	0798      	lsls	r0, r3, #30
 800a696:	bf49      	itett	mi
 800a698:	085b      	lsrmi	r3, r3, #1
 800a69a:	089b      	lsrpl	r3, r3, #2
 800a69c:	2001      	movmi	r0, #1
 800a69e:	6013      	strmi	r3, [r2, #0]
 800a6a0:	bf5c      	itt	pl
 800a6a2:	6013      	strpl	r3, [r2, #0]
 800a6a4:	2002      	movpl	r0, #2
 800a6a6:	4770      	bx	lr
 800a6a8:	b299      	uxth	r1, r3
 800a6aa:	b909      	cbnz	r1, 800a6b0 <__lo0bits+0x2a>
 800a6ac:	0c1b      	lsrs	r3, r3, #16
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	b2d9      	uxtb	r1, r3
 800a6b2:	b909      	cbnz	r1, 800a6b8 <__lo0bits+0x32>
 800a6b4:	3008      	adds	r0, #8
 800a6b6:	0a1b      	lsrs	r3, r3, #8
 800a6b8:	0719      	lsls	r1, r3, #28
 800a6ba:	bf04      	itt	eq
 800a6bc:	091b      	lsreq	r3, r3, #4
 800a6be:	3004      	addeq	r0, #4
 800a6c0:	0799      	lsls	r1, r3, #30
 800a6c2:	bf04      	itt	eq
 800a6c4:	089b      	lsreq	r3, r3, #2
 800a6c6:	3002      	addeq	r0, #2
 800a6c8:	07d9      	lsls	r1, r3, #31
 800a6ca:	d403      	bmi.n	800a6d4 <__lo0bits+0x4e>
 800a6cc:	085b      	lsrs	r3, r3, #1
 800a6ce:	f100 0001 	add.w	r0, r0, #1
 800a6d2:	d003      	beq.n	800a6dc <__lo0bits+0x56>
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	4770      	bx	lr
 800a6d8:	2000      	movs	r0, #0
 800a6da:	4770      	bx	lr
 800a6dc:	2020      	movs	r0, #32
 800a6de:	4770      	bx	lr

0800a6e0 <__i2b>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	f7ff ff07 	bl	800a4f8 <_Balloc>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	b928      	cbnz	r0, 800a6fa <__i2b+0x1a>
 800a6ee:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <__i2b+0x24>)
 800a6f0:	4805      	ldr	r0, [pc, #20]	@ (800a708 <__i2b+0x28>)
 800a6f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a6f6:	f000 fc39 	bl	800af6c <__assert_func>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	6144      	str	r4, [r0, #20]
 800a6fe:	6103      	str	r3, [r0, #16]
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0801f304 	.word	0x0801f304
 800a708:	0801f326 	.word	0x0801f326

0800a70c <__multiply>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4617      	mov	r7, r2
 800a712:	690a      	ldr	r2, [r1, #16]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	bfa8      	it	ge
 800a71a:	463b      	movge	r3, r7
 800a71c:	4689      	mov	r9, r1
 800a71e:	bfa4      	itt	ge
 800a720:	460f      	movge	r7, r1
 800a722:	4699      	movge	r9, r3
 800a724:	693d      	ldr	r5, [r7, #16]
 800a726:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	eb05 060a 	add.w	r6, r5, sl
 800a732:	42b3      	cmp	r3, r6
 800a734:	b085      	sub	sp, #20
 800a736:	bfb8      	it	lt
 800a738:	3101      	addlt	r1, #1
 800a73a:	f7ff fedd 	bl	800a4f8 <_Balloc>
 800a73e:	b930      	cbnz	r0, 800a74e <__multiply+0x42>
 800a740:	4602      	mov	r2, r0
 800a742:	4b41      	ldr	r3, [pc, #260]	@ (800a848 <__multiply+0x13c>)
 800a744:	4841      	ldr	r0, [pc, #260]	@ (800a84c <__multiply+0x140>)
 800a746:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a74a:	f000 fc0f 	bl	800af6c <__assert_func>
 800a74e:	f100 0414 	add.w	r4, r0, #20
 800a752:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a756:	4623      	mov	r3, r4
 800a758:	2200      	movs	r2, #0
 800a75a:	4573      	cmp	r3, lr
 800a75c:	d320      	bcc.n	800a7a0 <__multiply+0x94>
 800a75e:	f107 0814 	add.w	r8, r7, #20
 800a762:	f109 0114 	add.w	r1, r9, #20
 800a766:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a76a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a76e:	9302      	str	r3, [sp, #8]
 800a770:	1beb      	subs	r3, r5, r7
 800a772:	3b15      	subs	r3, #21
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	3304      	adds	r3, #4
 800a77a:	3715      	adds	r7, #21
 800a77c:	42bd      	cmp	r5, r7
 800a77e:	bf38      	it	cc
 800a780:	2304      	movcc	r3, #4
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	9103      	str	r1, [sp, #12]
 800a788:	428b      	cmp	r3, r1
 800a78a:	d80c      	bhi.n	800a7a6 <__multiply+0x9a>
 800a78c:	2e00      	cmp	r6, #0
 800a78e:	dd03      	ble.n	800a798 <__multiply+0x8c>
 800a790:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a794:	2b00      	cmp	r3, #0
 800a796:	d055      	beq.n	800a844 <__multiply+0x138>
 800a798:	6106      	str	r6, [r0, #16]
 800a79a:	b005      	add	sp, #20
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	f843 2b04 	str.w	r2, [r3], #4
 800a7a4:	e7d9      	b.n	800a75a <__multiply+0x4e>
 800a7a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7aa:	f1ba 0f00 	cmp.w	sl, #0
 800a7ae:	d01f      	beq.n	800a7f0 <__multiply+0xe4>
 800a7b0:	46c4      	mov	ip, r8
 800a7b2:	46a1      	mov	r9, r4
 800a7b4:	2700      	movs	r7, #0
 800a7b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a7be:	fa1f fb82 	uxth.w	fp, r2
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7c8:	443b      	add	r3, r7
 800a7ca:	f8d9 7000 	ldr.w	r7, [r9]
 800a7ce:	0c12      	lsrs	r2, r2, #16
 800a7d0:	0c3f      	lsrs	r7, r7, #16
 800a7d2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a7d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e0:	4565      	cmp	r5, ip
 800a7e2:	f849 3b04 	str.w	r3, [r9], #4
 800a7e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a7ea:	d8e4      	bhi.n	800a7b6 <__multiply+0xaa>
 800a7ec:	9b01      	ldr	r3, [sp, #4]
 800a7ee:	50e7      	str	r7, [r4, r3]
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a7f6:	3104      	adds	r1, #4
 800a7f8:	f1b9 0f00 	cmp.w	r9, #0
 800a7fc:	d020      	beq.n	800a840 <__multiply+0x134>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	4647      	mov	r7, r8
 800a802:	46a4      	mov	ip, r4
 800a804:	f04f 0a00 	mov.w	sl, #0
 800a808:	f8b7 b000 	ldrh.w	fp, [r7]
 800a80c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a810:	fb09 220b 	mla	r2, r9, fp, r2
 800a814:	4452      	add	r2, sl
 800a816:	b29b      	uxth	r3, r3
 800a818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a81c:	f84c 3b04 	str.w	r3, [ip], #4
 800a820:	f857 3b04 	ldr.w	r3, [r7], #4
 800a824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a828:	f8bc 3000 	ldrh.w	r3, [ip]
 800a82c:	fb09 330a 	mla	r3, r9, sl, r3
 800a830:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a834:	42bd      	cmp	r5, r7
 800a836:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a83a:	d8e5      	bhi.n	800a808 <__multiply+0xfc>
 800a83c:	9a01      	ldr	r2, [sp, #4]
 800a83e:	50a3      	str	r3, [r4, r2]
 800a840:	3404      	adds	r4, #4
 800a842:	e79f      	b.n	800a784 <__multiply+0x78>
 800a844:	3e01      	subs	r6, #1
 800a846:	e7a1      	b.n	800a78c <__multiply+0x80>
 800a848:	0801f304 	.word	0x0801f304
 800a84c:	0801f326 	.word	0x0801f326

0800a850 <__pow5mult>:
 800a850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a854:	4615      	mov	r5, r2
 800a856:	f012 0203 	ands.w	r2, r2, #3
 800a85a:	4607      	mov	r7, r0
 800a85c:	460e      	mov	r6, r1
 800a85e:	d007      	beq.n	800a870 <__pow5mult+0x20>
 800a860:	4c25      	ldr	r4, [pc, #148]	@ (800a8f8 <__pow5mult+0xa8>)
 800a862:	3a01      	subs	r2, #1
 800a864:	2300      	movs	r3, #0
 800a866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a86a:	f7ff fea7 	bl	800a5bc <__multadd>
 800a86e:	4606      	mov	r6, r0
 800a870:	10ad      	asrs	r5, r5, #2
 800a872:	d03d      	beq.n	800a8f0 <__pow5mult+0xa0>
 800a874:	69fc      	ldr	r4, [r7, #28]
 800a876:	b97c      	cbnz	r4, 800a898 <__pow5mult+0x48>
 800a878:	2010      	movs	r0, #16
 800a87a:	f7ff fcdb 	bl	800a234 <malloc>
 800a87e:	4602      	mov	r2, r0
 800a880:	61f8      	str	r0, [r7, #28]
 800a882:	b928      	cbnz	r0, 800a890 <__pow5mult+0x40>
 800a884:	4b1d      	ldr	r3, [pc, #116]	@ (800a8fc <__pow5mult+0xac>)
 800a886:	481e      	ldr	r0, [pc, #120]	@ (800a900 <__pow5mult+0xb0>)
 800a888:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a88c:	f000 fb6e 	bl	800af6c <__assert_func>
 800a890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a894:	6004      	str	r4, [r0, #0]
 800a896:	60c4      	str	r4, [r0, #12]
 800a898:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a89c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8a0:	b94c      	cbnz	r4, 800a8b6 <__pow5mult+0x66>
 800a8a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f7ff ff1a 	bl	800a6e0 <__i2b>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	f04f 0900 	mov.w	r9, #0
 800a8ba:	07eb      	lsls	r3, r5, #31
 800a8bc:	d50a      	bpl.n	800a8d4 <__pow5mult+0x84>
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff ff22 	bl	800a70c <__multiply>
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff fe53 	bl	800a578 <_Bfree>
 800a8d2:	4646      	mov	r6, r8
 800a8d4:	106d      	asrs	r5, r5, #1
 800a8d6:	d00b      	beq.n	800a8f0 <__pow5mult+0xa0>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	b938      	cbnz	r0, 800a8ec <__pow5mult+0x9c>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ff13 	bl	800a70c <__multiply>
 800a8e6:	6020      	str	r0, [r4, #0]
 800a8e8:	f8c0 9000 	str.w	r9, [r0]
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	e7e4      	b.n	800a8ba <__pow5mult+0x6a>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0801f3c8 	.word	0x0801f3c8
 800a8fc:	0801f295 	.word	0x0801f295
 800a900:	0801f326 	.word	0x0801f326

0800a904 <__lshift>:
 800a904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	460c      	mov	r4, r1
 800a90a:	6849      	ldr	r1, [r1, #4]
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	4607      	mov	r7, r0
 800a916:	4691      	mov	r9, r2
 800a918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a91c:	f108 0601 	add.w	r6, r8, #1
 800a920:	42b3      	cmp	r3, r6
 800a922:	db0b      	blt.n	800a93c <__lshift+0x38>
 800a924:	4638      	mov	r0, r7
 800a926:	f7ff fde7 	bl	800a4f8 <_Balloc>
 800a92a:	4605      	mov	r5, r0
 800a92c:	b948      	cbnz	r0, 800a942 <__lshift+0x3e>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b28      	ldr	r3, [pc, #160]	@ (800a9d4 <__lshift+0xd0>)
 800a932:	4829      	ldr	r0, [pc, #164]	@ (800a9d8 <__lshift+0xd4>)
 800a934:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a938:	f000 fb18 	bl	800af6c <__assert_func>
 800a93c:	3101      	adds	r1, #1
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	e7ee      	b.n	800a920 <__lshift+0x1c>
 800a942:	2300      	movs	r3, #0
 800a944:	f100 0114 	add.w	r1, r0, #20
 800a948:	f100 0210 	add.w	r2, r0, #16
 800a94c:	4618      	mov	r0, r3
 800a94e:	4553      	cmp	r3, sl
 800a950:	db33      	blt.n	800a9ba <__lshift+0xb6>
 800a952:	6920      	ldr	r0, [r4, #16]
 800a954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a958:	f104 0314 	add.w	r3, r4, #20
 800a95c:	f019 091f 	ands.w	r9, r9, #31
 800a960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a968:	d02b      	beq.n	800a9c2 <__lshift+0xbe>
 800a96a:	f1c9 0e20 	rsb	lr, r9, #32
 800a96e:	468a      	mov	sl, r1
 800a970:	2200      	movs	r2, #0
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	fa00 f009 	lsl.w	r0, r0, r9
 800a978:	4310      	orrs	r0, r2
 800a97a:	f84a 0b04 	str.w	r0, [sl], #4
 800a97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a982:	459c      	cmp	ip, r3
 800a984:	fa22 f20e 	lsr.w	r2, r2, lr
 800a988:	d8f3      	bhi.n	800a972 <__lshift+0x6e>
 800a98a:	ebac 0304 	sub.w	r3, ip, r4
 800a98e:	3b15      	subs	r3, #21
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	3304      	adds	r3, #4
 800a996:	f104 0015 	add.w	r0, r4, #21
 800a99a:	4560      	cmp	r0, ip
 800a99c:	bf88      	it	hi
 800a99e:	2304      	movhi	r3, #4
 800a9a0:	50ca      	str	r2, [r1, r3]
 800a9a2:	b10a      	cbz	r2, 800a9a8 <__lshift+0xa4>
 800a9a4:	f108 0602 	add.w	r6, r8, #2
 800a9a8:	3e01      	subs	r6, #1
 800a9aa:	4638      	mov	r0, r7
 800a9ac:	612e      	str	r6, [r5, #16]
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	f7ff fde2 	bl	800a578 <_Bfree>
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9be:	3301      	adds	r3, #1
 800a9c0:	e7c5      	b.n	800a94e <__lshift+0x4a>
 800a9c2:	3904      	subs	r1, #4
 800a9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9cc:	459c      	cmp	ip, r3
 800a9ce:	d8f9      	bhi.n	800a9c4 <__lshift+0xc0>
 800a9d0:	e7ea      	b.n	800a9a8 <__lshift+0xa4>
 800a9d2:	bf00      	nop
 800a9d4:	0801f304 	.word	0x0801f304
 800a9d8:	0801f326 	.word	0x0801f326

0800a9dc <__mcmp>:
 800a9dc:	690a      	ldr	r2, [r1, #16]
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6900      	ldr	r0, [r0, #16]
 800a9e2:	1a80      	subs	r0, r0, r2
 800a9e4:	b530      	push	{r4, r5, lr}
 800a9e6:	d10e      	bne.n	800aa06 <__mcmp+0x2a>
 800a9e8:	3314      	adds	r3, #20
 800a9ea:	3114      	adds	r1, #20
 800a9ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9fc:	4295      	cmp	r5, r2
 800a9fe:	d003      	beq.n	800aa08 <__mcmp+0x2c>
 800aa00:	d205      	bcs.n	800aa0e <__mcmp+0x32>
 800aa02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d3f3      	bcc.n	800a9f4 <__mcmp+0x18>
 800aa0c:	e7fb      	b.n	800aa06 <__mcmp+0x2a>
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e7f9      	b.n	800aa06 <__mcmp+0x2a>
	...

0800aa14 <__mdiff>:
 800aa14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	4689      	mov	r9, r1
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4648      	mov	r0, r9
 800aa20:	4614      	mov	r4, r2
 800aa22:	f7ff ffdb 	bl	800a9dc <__mcmp>
 800aa26:	1e05      	subs	r5, r0, #0
 800aa28:	d112      	bne.n	800aa50 <__mdiff+0x3c>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff fd63 	bl	800a4f8 <_Balloc>
 800aa32:	4602      	mov	r2, r0
 800aa34:	b928      	cbnz	r0, 800aa42 <__mdiff+0x2e>
 800aa36:	4b3f      	ldr	r3, [pc, #252]	@ (800ab34 <__mdiff+0x120>)
 800aa38:	f240 2137 	movw	r1, #567	@ 0x237
 800aa3c:	483e      	ldr	r0, [pc, #248]	@ (800ab38 <__mdiff+0x124>)
 800aa3e:	f000 fa95 	bl	800af6c <__assert_func>
 800aa42:	2301      	movs	r3, #1
 800aa44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa48:	4610      	mov	r0, r2
 800aa4a:	b003      	add	sp, #12
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	bfbc      	itt	lt
 800aa52:	464b      	movlt	r3, r9
 800aa54:	46a1      	movlt	r9, r4
 800aa56:	4630      	mov	r0, r6
 800aa58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa5c:	bfba      	itte	lt
 800aa5e:	461c      	movlt	r4, r3
 800aa60:	2501      	movlt	r5, #1
 800aa62:	2500      	movge	r5, #0
 800aa64:	f7ff fd48 	bl	800a4f8 <_Balloc>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	b918      	cbnz	r0, 800aa74 <__mdiff+0x60>
 800aa6c:	4b31      	ldr	r3, [pc, #196]	@ (800ab34 <__mdiff+0x120>)
 800aa6e:	f240 2145 	movw	r1, #581	@ 0x245
 800aa72:	e7e3      	b.n	800aa3c <__mdiff+0x28>
 800aa74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa78:	6926      	ldr	r6, [r4, #16]
 800aa7a:	60c5      	str	r5, [r0, #12]
 800aa7c:	f109 0310 	add.w	r3, r9, #16
 800aa80:	f109 0514 	add.w	r5, r9, #20
 800aa84:	f104 0e14 	add.w	lr, r4, #20
 800aa88:	f100 0b14 	add.w	fp, r0, #20
 800aa8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	46d9      	mov	r9, fp
 800aa98:	f04f 0c00 	mov.w	ip, #0
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aaa2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	fa1f f38a 	uxth.w	r3, sl
 800aaac:	4619      	mov	r1, r3
 800aaae:	b283      	uxth	r3, r0
 800aab0:	1acb      	subs	r3, r1, r3
 800aab2:	0c00      	lsrs	r0, r0, #16
 800aab4:	4463      	add	r3, ip
 800aab6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aac4:	4576      	cmp	r6, lr
 800aac6:	f849 3b04 	str.w	r3, [r9], #4
 800aaca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aace:	d8e5      	bhi.n	800aa9c <__mdiff+0x88>
 800aad0:	1b33      	subs	r3, r6, r4
 800aad2:	3b15      	subs	r3, #21
 800aad4:	f023 0303 	bic.w	r3, r3, #3
 800aad8:	3415      	adds	r4, #21
 800aada:	3304      	adds	r3, #4
 800aadc:	42a6      	cmp	r6, r4
 800aade:	bf38      	it	cc
 800aae0:	2304      	movcc	r3, #4
 800aae2:	441d      	add	r5, r3
 800aae4:	445b      	add	r3, fp
 800aae6:	461e      	mov	r6, r3
 800aae8:	462c      	mov	r4, r5
 800aaea:	4544      	cmp	r4, r8
 800aaec:	d30e      	bcc.n	800ab0c <__mdiff+0xf8>
 800aaee:	f108 0103 	add.w	r1, r8, #3
 800aaf2:	1b49      	subs	r1, r1, r5
 800aaf4:	f021 0103 	bic.w	r1, r1, #3
 800aaf8:	3d03      	subs	r5, #3
 800aafa:	45a8      	cmp	r8, r5
 800aafc:	bf38      	it	cc
 800aafe:	2100      	movcc	r1, #0
 800ab00:	440b      	add	r3, r1
 800ab02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab06:	b191      	cbz	r1, 800ab2e <__mdiff+0x11a>
 800ab08:	6117      	str	r7, [r2, #16]
 800ab0a:	e79d      	b.n	800aa48 <__mdiff+0x34>
 800ab0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab10:	46e6      	mov	lr, ip
 800ab12:	0c08      	lsrs	r0, r1, #16
 800ab14:	fa1c fc81 	uxtah	ip, ip, r1
 800ab18:	4471      	add	r1, lr
 800ab1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab1e:	b289      	uxth	r1, r1
 800ab20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab24:	f846 1b04 	str.w	r1, [r6], #4
 800ab28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab2c:	e7dd      	b.n	800aaea <__mdiff+0xd6>
 800ab2e:	3f01      	subs	r7, #1
 800ab30:	e7e7      	b.n	800ab02 <__mdiff+0xee>
 800ab32:	bf00      	nop
 800ab34:	0801f304 	.word	0x0801f304
 800ab38:	0801f326 	.word	0x0801f326

0800ab3c <__d2b>:
 800ab3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab40:	460f      	mov	r7, r1
 800ab42:	2101      	movs	r1, #1
 800ab44:	ec59 8b10 	vmov	r8, r9, d0
 800ab48:	4616      	mov	r6, r2
 800ab4a:	f7ff fcd5 	bl	800a4f8 <_Balloc>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	b930      	cbnz	r0, 800ab60 <__d2b+0x24>
 800ab52:	4602      	mov	r2, r0
 800ab54:	4b23      	ldr	r3, [pc, #140]	@ (800abe4 <__d2b+0xa8>)
 800ab56:	4824      	ldr	r0, [pc, #144]	@ (800abe8 <__d2b+0xac>)
 800ab58:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab5c:	f000 fa06 	bl	800af6c <__assert_func>
 800ab60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab68:	b10d      	cbz	r5, 800ab6e <__d2b+0x32>
 800ab6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f1b8 0300 	subs.w	r3, r8, #0
 800ab74:	d023      	beq.n	800abbe <__d2b+0x82>
 800ab76:	4668      	mov	r0, sp
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	f7ff fd84 	bl	800a686 <__lo0bits>
 800ab7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab82:	b1d0      	cbz	r0, 800abba <__d2b+0x7e>
 800ab84:	f1c0 0320 	rsb	r3, r0, #32
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	40c2      	lsrs	r2, r0
 800ab90:	6163      	str	r3, [r4, #20]
 800ab92:	9201      	str	r2, [sp, #4]
 800ab94:	9b01      	ldr	r3, [sp, #4]
 800ab96:	61a3      	str	r3, [r4, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bf0c      	ite	eq
 800ab9c:	2201      	moveq	r2, #1
 800ab9e:	2202      	movne	r2, #2
 800aba0:	6122      	str	r2, [r4, #16]
 800aba2:	b1a5      	cbz	r5, 800abce <__d2b+0x92>
 800aba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aba8:	4405      	add	r5, r0
 800abaa:	603d      	str	r5, [r7, #0]
 800abac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abb0:	6030      	str	r0, [r6, #0]
 800abb2:	4620      	mov	r0, r4
 800abb4:	b003      	add	sp, #12
 800abb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abba:	6161      	str	r1, [r4, #20]
 800abbc:	e7ea      	b.n	800ab94 <__d2b+0x58>
 800abbe:	a801      	add	r0, sp, #4
 800abc0:	f7ff fd61 	bl	800a686 <__lo0bits>
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	6163      	str	r3, [r4, #20]
 800abc8:	3020      	adds	r0, #32
 800abca:	2201      	movs	r2, #1
 800abcc:	e7e8      	b.n	800aba0 <__d2b+0x64>
 800abce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abd6:	6038      	str	r0, [r7, #0]
 800abd8:	6918      	ldr	r0, [r3, #16]
 800abda:	f7ff fd35 	bl	800a648 <__hi0bits>
 800abde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abe2:	e7e5      	b.n	800abb0 <__d2b+0x74>
 800abe4:	0801f304 	.word	0x0801f304
 800abe8:	0801f326 	.word	0x0801f326

0800abec <__sread>:
 800abec:	b510      	push	{r4, lr}
 800abee:	460c      	mov	r4, r1
 800abf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf4:	f000 f956 	bl	800aea4 <_read_r>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	bfab      	itete	ge
 800abfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ac00:	181b      	addge	r3, r3, r0
 800ac02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac06:	bfac      	ite	ge
 800ac08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac0a:	81a3      	strhlt	r3, [r4, #12]
 800ac0c:	bd10      	pop	{r4, pc}

0800ac0e <__swrite>:
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	461f      	mov	r7, r3
 800ac14:	898b      	ldrh	r3, [r1, #12]
 800ac16:	05db      	lsls	r3, r3, #23
 800ac18:	4605      	mov	r5, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	4616      	mov	r6, r2
 800ac1e:	d505      	bpl.n	800ac2c <__swrite+0x1e>
 800ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac24:	2302      	movs	r3, #2
 800ac26:	2200      	movs	r2, #0
 800ac28:	f000 f92a 	bl	800ae80 <_lseek_r>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	4632      	mov	r2, r6
 800ac3a:	463b      	mov	r3, r7
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	f000 b951 	b.w	800aee8 <_write_r>

0800ac46 <__sseek>:
 800ac46:	b510      	push	{r4, lr}
 800ac48:	460c      	mov	r4, r1
 800ac4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4e:	f000 f917 	bl	800ae80 <_lseek_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	bf15      	itete	ne
 800ac58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac62:	81a3      	strheq	r3, [r4, #12]
 800ac64:	bf18      	it	ne
 800ac66:	81a3      	strhne	r3, [r4, #12]
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <__sclose>:
 800ac6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6e:	f000 b94d 	b.w	800af0c <_close_r>

0800ac72 <__swbuf_r>:
 800ac72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac74:	460e      	mov	r6, r1
 800ac76:	4614      	mov	r4, r2
 800ac78:	4605      	mov	r5, r0
 800ac7a:	b118      	cbz	r0, 800ac84 <__swbuf_r+0x12>
 800ac7c:	6a03      	ldr	r3, [r0, #32]
 800ac7e:	b90b      	cbnz	r3, 800ac84 <__swbuf_r+0x12>
 800ac80:	f7fe fa5c 	bl	800913c <__sinit>
 800ac84:	69a3      	ldr	r3, [r4, #24]
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	071a      	lsls	r2, r3, #28
 800ac8c:	d501      	bpl.n	800ac92 <__swbuf_r+0x20>
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	b943      	cbnz	r3, 800aca4 <__swbuf_r+0x32>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4628      	mov	r0, r5
 800ac96:	f000 f82b 	bl	800acf0 <__swsetup_r>
 800ac9a:	b118      	cbz	r0, 800aca4 <__swbuf_r+0x32>
 800ac9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aca0:	4638      	mov	r0, r7
 800aca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	6922      	ldr	r2, [r4, #16]
 800aca8:	1a98      	subs	r0, r3, r2
 800acaa:	6963      	ldr	r3, [r4, #20]
 800acac:	b2f6      	uxtb	r6, r6
 800acae:	4283      	cmp	r3, r0
 800acb0:	4637      	mov	r7, r6
 800acb2:	dc05      	bgt.n	800acc0 <__swbuf_r+0x4e>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f7ff fbea 	bl	800a490 <_fflush_r>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1ed      	bne.n	800ac9c <__swbuf_r+0x2a>
 800acc0:	68a3      	ldr	r3, [r4, #8]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	60a3      	str	r3, [r4, #8]
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	6022      	str	r2, [r4, #0]
 800accc:	701e      	strb	r6, [r3, #0]
 800acce:	6962      	ldr	r2, [r4, #20]
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d004      	beq.n	800ace0 <__swbuf_r+0x6e>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	07db      	lsls	r3, r3, #31
 800acda:	d5e1      	bpl.n	800aca0 <__swbuf_r+0x2e>
 800acdc:	2e0a      	cmp	r6, #10
 800acde:	d1df      	bne.n	800aca0 <__swbuf_r+0x2e>
 800ace0:	4621      	mov	r1, r4
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7ff fbd4 	bl	800a490 <_fflush_r>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d0d9      	beq.n	800aca0 <__swbuf_r+0x2e>
 800acec:	e7d6      	b.n	800ac9c <__swbuf_r+0x2a>
	...

0800acf0 <__swsetup_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4b29      	ldr	r3, [pc, #164]	@ (800ad98 <__swsetup_r+0xa8>)
 800acf4:	4605      	mov	r5, r0
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	460c      	mov	r4, r1
 800acfa:	b118      	cbz	r0, 800ad04 <__swsetup_r+0x14>
 800acfc:	6a03      	ldr	r3, [r0, #32]
 800acfe:	b90b      	cbnz	r3, 800ad04 <__swsetup_r+0x14>
 800ad00:	f7fe fa1c 	bl	800913c <__sinit>
 800ad04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad08:	0719      	lsls	r1, r3, #28
 800ad0a:	d422      	bmi.n	800ad52 <__swsetup_r+0x62>
 800ad0c:	06da      	lsls	r2, r3, #27
 800ad0e:	d407      	bmi.n	800ad20 <__swsetup_r+0x30>
 800ad10:	2209      	movs	r2, #9
 800ad12:	602a      	str	r2, [r5, #0]
 800ad14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad1e:	e033      	b.n	800ad88 <__swsetup_r+0x98>
 800ad20:	0758      	lsls	r0, r3, #29
 800ad22:	d512      	bpl.n	800ad4a <__swsetup_r+0x5a>
 800ad24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad26:	b141      	cbz	r1, 800ad3a <__swsetup_r+0x4a>
 800ad28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <__swsetup_r+0x46>
 800ad30:	4628      	mov	r0, r5
 800ad32:	f000 f94d 	bl	800afd0 <_free_r>
 800ad36:	2300      	movs	r3, #0
 800ad38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	2300      	movs	r3, #0
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	b94b      	cbnz	r3, 800ad6a <__swsetup_r+0x7a>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad60:	d003      	beq.n	800ad6a <__swsetup_r+0x7a>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f83f 	bl	800ade8 <__smakebuf_r>
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	f013 0201 	ands.w	r2, r3, #1
 800ad72:	d00a      	beq.n	800ad8a <__swsetup_r+0x9a>
 800ad74:	2200      	movs	r2, #0
 800ad76:	60a2      	str	r2, [r4, #8]
 800ad78:	6962      	ldr	r2, [r4, #20]
 800ad7a:	4252      	negs	r2, r2
 800ad7c:	61a2      	str	r2, [r4, #24]
 800ad7e:	6922      	ldr	r2, [r4, #16]
 800ad80:	b942      	cbnz	r2, 800ad94 <__swsetup_r+0xa4>
 800ad82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad86:	d1c5      	bne.n	800ad14 <__swsetup_r+0x24>
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	0799      	lsls	r1, r3, #30
 800ad8c:	bf58      	it	pl
 800ad8e:	6962      	ldrpl	r2, [r4, #20]
 800ad90:	60a2      	str	r2, [r4, #8]
 800ad92:	e7f4      	b.n	800ad7e <__swsetup_r+0x8e>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7f7      	b.n	800ad88 <__swsetup_r+0x98>
 800ad98:	2000005c 	.word	0x2000005c

0800ad9c <__swhatbuf_r>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	2900      	cmp	r1, #0
 800ada6:	b096      	sub	sp, #88	@ 0x58
 800ada8:	4615      	mov	r5, r2
 800adaa:	461e      	mov	r6, r3
 800adac:	da0d      	bge.n	800adca <__swhatbuf_r+0x2e>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adb4:	f04f 0100 	mov.w	r1, #0
 800adb8:	bf14      	ite	ne
 800adba:	2340      	movne	r3, #64	@ 0x40
 800adbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adc0:	2000      	movs	r0, #0
 800adc2:	6031      	str	r1, [r6, #0]
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	b016      	add	sp, #88	@ 0x58
 800adc8:	bd70      	pop	{r4, r5, r6, pc}
 800adca:	466a      	mov	r2, sp
 800adcc:	f000 f8ae 	bl	800af2c <_fstat_r>
 800add0:	2800      	cmp	r0, #0
 800add2:	dbec      	blt.n	800adae <__swhatbuf_r+0x12>
 800add4:	9901      	ldr	r1, [sp, #4]
 800add6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adde:	4259      	negs	r1, r3
 800ade0:	4159      	adcs	r1, r3
 800ade2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ade6:	e7eb      	b.n	800adc0 <__swhatbuf_r+0x24>

0800ade8 <__smakebuf_r>:
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adec:	079d      	lsls	r5, r3, #30
 800adee:	4606      	mov	r6, r0
 800adf0:	460c      	mov	r4, r1
 800adf2:	d507      	bpl.n	800ae04 <__smakebuf_r+0x1c>
 800adf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	6123      	str	r3, [r4, #16]
 800adfc:	2301      	movs	r3, #1
 800adfe:	6163      	str	r3, [r4, #20]
 800ae00:	b003      	add	sp, #12
 800ae02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae04:	ab01      	add	r3, sp, #4
 800ae06:	466a      	mov	r2, sp
 800ae08:	f7ff ffc8 	bl	800ad9c <__swhatbuf_r>
 800ae0c:	9f00      	ldr	r7, [sp, #0]
 800ae0e:	4605      	mov	r5, r0
 800ae10:	4639      	mov	r1, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff fa38 	bl	800a288 <_malloc_r>
 800ae18:	b948      	cbnz	r0, 800ae2e <__smakebuf_r+0x46>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	059a      	lsls	r2, r3, #22
 800ae20:	d4ee      	bmi.n	800ae00 <__smakebuf_r+0x18>
 800ae22:	f023 0303 	bic.w	r3, r3, #3
 800ae26:	f043 0302 	orr.w	r3, r3, #2
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	e7e2      	b.n	800adf4 <__smakebuf_r+0xc>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	6020      	str	r0, [r4, #0]
 800ae32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	9b01      	ldr	r3, [sp, #4]
 800ae3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae3e:	b15b      	cbz	r3, 800ae58 <__smakebuf_r+0x70>
 800ae40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae44:	4630      	mov	r0, r6
 800ae46:	f000 f80b 	bl	800ae60 <_isatty_r>
 800ae4a:	b128      	cbz	r0, 800ae58 <__smakebuf_r+0x70>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	431d      	orrs	r5, r3
 800ae5c:	81a5      	strh	r5, [r4, #12]
 800ae5e:	e7cf      	b.n	800ae00 <__smakebuf_r+0x18>

0800ae60 <_isatty_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	@ (800ae7c <_isatty_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7fa f868 	bl	8004f40 <_isatty>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_isatty_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_isatty_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20003fa4 	.word	0x20003fa4

0800ae80 <_lseek_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d07      	ldr	r5, [pc, #28]	@ (800aea0 <_lseek_r+0x20>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f7fa f861 	bl	8004f56 <_lseek>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_lseek_r+0x1e>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_lseek_r+0x1e>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20003fa4 	.word	0x20003fa4

0800aea4 <_read_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	@ (800aec4 <_read_r+0x20>)
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f7f9 ffef 	bl	8004e96 <_read>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_read_r+0x1e>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_read_r+0x1e>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20003fa4 	.word	0x20003fa4

0800aec8 <_sbrk_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	@ (800aee4 <_sbrk_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7fa f84c 	bl	8004f70 <_sbrk>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_sbrk_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_sbrk_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20003fa4 	.word	0x20003fa4

0800aee8 <_write_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	@ (800af08 <_write_r+0x20>)
 800aeec:	4604      	mov	r4, r0
 800aeee:	4608      	mov	r0, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	2200      	movs	r2, #0
 800aef4:	602a      	str	r2, [r5, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	f7f9 ffea 	bl	8004ed0 <_write>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_write_r+0x1e>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_write_r+0x1e>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20003fa4 	.word	0x20003fa4

0800af0c <_close_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_close_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f9 fff6 	bl	8004f08 <_close>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_close_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_close_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20003fa4 	.word	0x20003fa4

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	@ (800af4c <_fstat_r+0x20>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f9 fff1 	bl	8004f20 <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	20003fa4 	.word	0x20003fa4

0800af50 <memcpy>:
 800af50:	440a      	add	r2, r1
 800af52:	4291      	cmp	r1, r2
 800af54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800af58:	d100      	bne.n	800af5c <memcpy+0xc>
 800af5a:	4770      	bx	lr
 800af5c:	b510      	push	{r4, lr}
 800af5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af66:	4291      	cmp	r1, r2
 800af68:	d1f9      	bne.n	800af5e <memcpy+0xe>
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <__assert_func>:
 800af6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af6e:	4614      	mov	r4, r2
 800af70:	461a      	mov	r2, r3
 800af72:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <__assert_func+0x2c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4605      	mov	r5, r0
 800af78:	68d8      	ldr	r0, [r3, #12]
 800af7a:	b14c      	cbz	r4, 800af90 <__assert_func+0x24>
 800af7c:	4b07      	ldr	r3, [pc, #28]	@ (800af9c <__assert_func+0x30>)
 800af7e:	9100      	str	r1, [sp, #0]
 800af80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af84:	4906      	ldr	r1, [pc, #24]	@ (800afa0 <__assert_func+0x34>)
 800af86:	462b      	mov	r3, r5
 800af88:	f000 f87e 	bl	800b088 <fiprintf>
 800af8c:	f000 f89b 	bl	800b0c6 <abort>
 800af90:	4b04      	ldr	r3, [pc, #16]	@ (800afa4 <__assert_func+0x38>)
 800af92:	461c      	mov	r4, r3
 800af94:	e7f3      	b.n	800af7e <__assert_func+0x12>
 800af96:	bf00      	nop
 800af98:	2000005c 	.word	0x2000005c
 800af9c:	0801f389 	.word	0x0801f389
 800afa0:	0801f396 	.word	0x0801f396
 800afa4:	0801f3c4 	.word	0x0801f3c4

0800afa8 <_calloc_r>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	fba1 5402 	umull	r5, r4, r1, r2
 800afae:	b934      	cbnz	r4, 800afbe <_calloc_r+0x16>
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7ff f969 	bl	800a288 <_malloc_r>
 800afb6:	4606      	mov	r6, r0
 800afb8:	b928      	cbnz	r0, 800afc6 <_calloc_r+0x1e>
 800afba:	4630      	mov	r0, r6
 800afbc:	bd70      	pop	{r4, r5, r6, pc}
 800afbe:	220c      	movs	r2, #12
 800afc0:	6002      	str	r2, [r0, #0]
 800afc2:	2600      	movs	r6, #0
 800afc4:	e7f9      	b.n	800afba <_calloc_r+0x12>
 800afc6:	462a      	mov	r2, r5
 800afc8:	4621      	mov	r1, r4
 800afca:	f7fe f95d 	bl	8009288 <memset>
 800afce:	e7f4      	b.n	800afba <_calloc_r+0x12>

0800afd0 <_free_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4605      	mov	r5, r0
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d041      	beq.n	800b05c <_free_r+0x8c>
 800afd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afdc:	1f0c      	subs	r4, r1, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	18e4      	addlt	r4, r4, r3
 800afe4:	f7ff fa7c 	bl	800a4e0 <__malloc_lock>
 800afe8:	4a1d      	ldr	r2, [pc, #116]	@ (800b060 <_free_r+0x90>)
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	b933      	cbnz	r3, 800affc <_free_r+0x2c>
 800afee:	6063      	str	r3, [r4, #4]
 800aff0:	6014      	str	r4, [r2, #0]
 800aff2:	4628      	mov	r0, r5
 800aff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff8:	f7ff ba78 	b.w	800a4ec <__malloc_unlock>
 800affc:	42a3      	cmp	r3, r4
 800affe:	d908      	bls.n	800b012 <_free_r+0x42>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	1821      	adds	r1, r4, r0
 800b004:	428b      	cmp	r3, r1
 800b006:	bf01      	itttt	eq
 800b008:	6819      	ldreq	r1, [r3, #0]
 800b00a:	685b      	ldreq	r3, [r3, #4]
 800b00c:	1809      	addeq	r1, r1, r0
 800b00e:	6021      	streq	r1, [r4, #0]
 800b010:	e7ed      	b.n	800afee <_free_r+0x1e>
 800b012:	461a      	mov	r2, r3
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	b10b      	cbz	r3, 800b01c <_free_r+0x4c>
 800b018:	42a3      	cmp	r3, r4
 800b01a:	d9fa      	bls.n	800b012 <_free_r+0x42>
 800b01c:	6811      	ldr	r1, [r2, #0]
 800b01e:	1850      	adds	r0, r2, r1
 800b020:	42a0      	cmp	r0, r4
 800b022:	d10b      	bne.n	800b03c <_free_r+0x6c>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	4401      	add	r1, r0
 800b028:	1850      	adds	r0, r2, r1
 800b02a:	4283      	cmp	r3, r0
 800b02c:	6011      	str	r1, [r2, #0]
 800b02e:	d1e0      	bne.n	800aff2 <_free_r+0x22>
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	6053      	str	r3, [r2, #4]
 800b036:	4408      	add	r0, r1
 800b038:	6010      	str	r0, [r2, #0]
 800b03a:	e7da      	b.n	800aff2 <_free_r+0x22>
 800b03c:	d902      	bls.n	800b044 <_free_r+0x74>
 800b03e:	230c      	movs	r3, #12
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	e7d6      	b.n	800aff2 <_free_r+0x22>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	1821      	adds	r1, r4, r0
 800b048:	428b      	cmp	r3, r1
 800b04a:	bf04      	itt	eq
 800b04c:	6819      	ldreq	r1, [r3, #0]
 800b04e:	685b      	ldreq	r3, [r3, #4]
 800b050:	6063      	str	r3, [r4, #4]
 800b052:	bf04      	itt	eq
 800b054:	1809      	addeq	r1, r1, r0
 800b056:	6021      	streq	r1, [r4, #0]
 800b058:	6054      	str	r4, [r2, #4]
 800b05a:	e7ca      	b.n	800aff2 <_free_r+0x22>
 800b05c:	bd38      	pop	{r3, r4, r5, pc}
 800b05e:	bf00      	nop
 800b060:	20003fa0 	.word	0x20003fa0

0800b064 <__ascii_mbtowc>:
 800b064:	b082      	sub	sp, #8
 800b066:	b901      	cbnz	r1, 800b06a <__ascii_mbtowc+0x6>
 800b068:	a901      	add	r1, sp, #4
 800b06a:	b142      	cbz	r2, 800b07e <__ascii_mbtowc+0x1a>
 800b06c:	b14b      	cbz	r3, 800b082 <__ascii_mbtowc+0x1e>
 800b06e:	7813      	ldrb	r3, [r2, #0]
 800b070:	600b      	str	r3, [r1, #0]
 800b072:	7812      	ldrb	r2, [r2, #0]
 800b074:	1e10      	subs	r0, r2, #0
 800b076:	bf18      	it	ne
 800b078:	2001      	movne	r0, #1
 800b07a:	b002      	add	sp, #8
 800b07c:	4770      	bx	lr
 800b07e:	4610      	mov	r0, r2
 800b080:	e7fb      	b.n	800b07a <__ascii_mbtowc+0x16>
 800b082:	f06f 0001 	mvn.w	r0, #1
 800b086:	e7f8      	b.n	800b07a <__ascii_mbtowc+0x16>

0800b088 <fiprintf>:
 800b088:	b40e      	push	{r1, r2, r3}
 800b08a:	b503      	push	{r0, r1, lr}
 800b08c:	4601      	mov	r1, r0
 800b08e:	ab03      	add	r3, sp, #12
 800b090:	4805      	ldr	r0, [pc, #20]	@ (800b0a8 <fiprintf+0x20>)
 800b092:	f853 2b04 	ldr.w	r2, [r3], #4
 800b096:	6800      	ldr	r0, [r0, #0]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	f7fe ffb3 	bl	800a004 <_vfiprintf_r>
 800b09e:	b002      	add	sp, #8
 800b0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a4:	b003      	add	sp, #12
 800b0a6:	4770      	bx	lr
 800b0a8:	2000005c 	.word	0x2000005c

0800b0ac <__ascii_wctomb>:
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	4608      	mov	r0, r1
 800b0b0:	b141      	cbz	r1, 800b0c4 <__ascii_wctomb+0x18>
 800b0b2:	2aff      	cmp	r2, #255	@ 0xff
 800b0b4:	d904      	bls.n	800b0c0 <__ascii_wctomb+0x14>
 800b0b6:	228a      	movs	r2, #138	@ 0x8a
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0be:	4770      	bx	lr
 800b0c0:	700a      	strb	r2, [r1, #0]
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	4770      	bx	lr

0800b0c6 <abort>:
 800b0c6:	b508      	push	{r3, lr}
 800b0c8:	2006      	movs	r0, #6
 800b0ca:	f000 f82b 	bl	800b124 <raise>
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	f7f9 fed6 	bl	8004e80 <_exit>

0800b0d4 <_raise_r>:
 800b0d4:	291f      	cmp	r1, #31
 800b0d6:	b538      	push	{r3, r4, r5, lr}
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	d904      	bls.n	800b0e8 <_raise_r+0x14>
 800b0de:	2316      	movs	r3, #22
 800b0e0:	6003      	str	r3, [r0, #0]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0ea:	b112      	cbz	r2, 800b0f2 <_raise_r+0x1e>
 800b0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0f0:	b94b      	cbnz	r3, 800b106 <_raise_r+0x32>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f000 f830 	bl	800b158 <_getpid_r>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b102:	f000 b817 	b.w	800b134 <_kill_r>
 800b106:	2b01      	cmp	r3, #1
 800b108:	d00a      	beq.n	800b120 <_raise_r+0x4c>
 800b10a:	1c59      	adds	r1, r3, #1
 800b10c:	d103      	bne.n	800b116 <_raise_r+0x42>
 800b10e:	2316      	movs	r3, #22
 800b110:	6003      	str	r3, [r0, #0]
 800b112:	2001      	movs	r0, #1
 800b114:	e7e7      	b.n	800b0e6 <_raise_r+0x12>
 800b116:	2100      	movs	r1, #0
 800b118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b11c:	4620      	mov	r0, r4
 800b11e:	4798      	blx	r3
 800b120:	2000      	movs	r0, #0
 800b122:	e7e0      	b.n	800b0e6 <_raise_r+0x12>

0800b124 <raise>:
 800b124:	4b02      	ldr	r3, [pc, #8]	@ (800b130 <raise+0xc>)
 800b126:	4601      	mov	r1, r0
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	f7ff bfd3 	b.w	800b0d4 <_raise_r>
 800b12e:	bf00      	nop
 800b130:	2000005c 	.word	0x2000005c

0800b134 <_kill_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4d07      	ldr	r5, [pc, #28]	@ (800b154 <_kill_r+0x20>)
 800b138:	2300      	movs	r3, #0
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	602b      	str	r3, [r5, #0]
 800b142:	f7f9 fe8d 	bl	8004e60 <_kill>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	d102      	bne.n	800b150 <_kill_r+0x1c>
 800b14a:	682b      	ldr	r3, [r5, #0]
 800b14c:	b103      	cbz	r3, 800b150 <_kill_r+0x1c>
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	bf00      	nop
 800b154:	20003fa4 	.word	0x20003fa4

0800b158 <_getpid_r>:
 800b158:	f7f9 be7a 	b.w	8004e50 <_getpid>

0800b15c <cosf>:
 800b15c:	ee10 3a10 	vmov	r3, s0
 800b160:	b507      	push	{r0, r1, r2, lr}
 800b162:	4a1e      	ldr	r2, [pc, #120]	@ (800b1dc <cosf+0x80>)
 800b164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b168:	4293      	cmp	r3, r2
 800b16a:	d806      	bhi.n	800b17a <cosf+0x1e>
 800b16c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b1e0 <cosf+0x84>
 800b170:	b003      	add	sp, #12
 800b172:	f85d eb04 	ldr.w	lr, [sp], #4
 800b176:	f000 b835 	b.w	800b1e4 <__kernel_cosf>
 800b17a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b17e:	d304      	bcc.n	800b18a <cosf+0x2e>
 800b180:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b184:	b003      	add	sp, #12
 800b186:	f85d fb04 	ldr.w	pc, [sp], #4
 800b18a:	4668      	mov	r0, sp
 800b18c:	f000 f97e 	bl	800b48c <__ieee754_rem_pio2f>
 800b190:	f000 0003 	and.w	r0, r0, #3
 800b194:	2801      	cmp	r0, #1
 800b196:	d009      	beq.n	800b1ac <cosf+0x50>
 800b198:	2802      	cmp	r0, #2
 800b19a:	d010      	beq.n	800b1be <cosf+0x62>
 800b19c:	b9b0      	cbnz	r0, 800b1cc <cosf+0x70>
 800b19e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1a2:	ed9d 0a00 	vldr	s0, [sp]
 800b1a6:	f000 f81d 	bl	800b1e4 <__kernel_cosf>
 800b1aa:	e7eb      	b.n	800b184 <cosf+0x28>
 800b1ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1b0:	ed9d 0a00 	vldr	s0, [sp]
 800b1b4:	f000 f86e 	bl	800b294 <__kernel_sinf>
 800b1b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b1bc:	e7e2      	b.n	800b184 <cosf+0x28>
 800b1be:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1c2:	ed9d 0a00 	vldr	s0, [sp]
 800b1c6:	f000 f80d 	bl	800b1e4 <__kernel_cosf>
 800b1ca:	e7f5      	b.n	800b1b8 <cosf+0x5c>
 800b1cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1d0:	ed9d 0a00 	vldr	s0, [sp]
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	f000 f85d 	bl	800b294 <__kernel_sinf>
 800b1da:	e7d3      	b.n	800b184 <cosf+0x28>
 800b1dc:	3f490fd8 	.word	0x3f490fd8
 800b1e0:	00000000 	.word	0x00000000

0800b1e4 <__kernel_cosf>:
 800b1e4:	ee10 3a10 	vmov	r3, s0
 800b1e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1ec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b1f0:	eef0 6a40 	vmov.f32	s13, s0
 800b1f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b1f8:	d204      	bcs.n	800b204 <__kernel_cosf+0x20>
 800b1fa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b1fe:	ee17 2a90 	vmov	r2, s15
 800b202:	b342      	cbz	r2, 800b256 <__kernel_cosf+0x72>
 800b204:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b208:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b274 <__kernel_cosf+0x90>
 800b20c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b278 <__kernel_cosf+0x94>
 800b210:	4a1a      	ldr	r2, [pc, #104]	@ (800b27c <__kernel_cosf+0x98>)
 800b212:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b216:	4293      	cmp	r3, r2
 800b218:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b280 <__kernel_cosf+0x9c>
 800b21c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b220:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b284 <__kernel_cosf+0xa0>
 800b224:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b228:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b288 <__kernel_cosf+0xa4>
 800b22c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b230:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b28c <__kernel_cosf+0xa8>
 800b234:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b238:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b23c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b240:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b244:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24c:	d804      	bhi.n	800b258 <__kernel_cosf+0x74>
 800b24e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b252:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b256:	4770      	bx	lr
 800b258:	4a0d      	ldr	r2, [pc, #52]	@ (800b290 <__kernel_cosf+0xac>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	bf9a      	itte	ls
 800b25e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b262:	ee07 3a10 	vmovls	s14, r3
 800b266:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b26a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b26e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b272:	e7ec      	b.n	800b24e <__kernel_cosf+0x6a>
 800b274:	ad47d74e 	.word	0xad47d74e
 800b278:	310f74f6 	.word	0x310f74f6
 800b27c:	3e999999 	.word	0x3e999999
 800b280:	b493f27c 	.word	0xb493f27c
 800b284:	37d00d01 	.word	0x37d00d01
 800b288:	bab60b61 	.word	0xbab60b61
 800b28c:	3d2aaaab 	.word	0x3d2aaaab
 800b290:	3f480000 	.word	0x3f480000

0800b294 <__kernel_sinf>:
 800b294:	ee10 3a10 	vmov	r3, s0
 800b298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b29c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b2a0:	d204      	bcs.n	800b2ac <__kernel_sinf+0x18>
 800b2a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b2a6:	ee17 3a90 	vmov	r3, s15
 800b2aa:	b35b      	cbz	r3, 800b304 <__kernel_sinf+0x70>
 800b2ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b2b0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b308 <__kernel_sinf+0x74>
 800b2b4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b30c <__kernel_sinf+0x78>
 800b2b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2bc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b310 <__kernel_sinf+0x7c>
 800b2c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2c4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b314 <__kernel_sinf+0x80>
 800b2c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2cc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b318 <__kernel_sinf+0x84>
 800b2d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b2d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2d8:	b930      	cbnz	r0, 800b2e8 <__kernel_sinf+0x54>
 800b2da:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b31c <__kernel_sinf+0x88>
 800b2de:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b2e6:	4770      	bx	lr
 800b2e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b2ec:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b2f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b2f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b2f8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b320 <__kernel_sinf+0x8c>
 800b2fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b300:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	2f2ec9d3 	.word	0x2f2ec9d3
 800b30c:	b2d72f34 	.word	0xb2d72f34
 800b310:	3638ef1b 	.word	0x3638ef1b
 800b314:	b9500d01 	.word	0xb9500d01
 800b318:	3c088889 	.word	0x3c088889
 800b31c:	be2aaaab 	.word	0xbe2aaaab
 800b320:	3e2aaaab 	.word	0x3e2aaaab

0800b324 <lroundf>:
 800b324:	ee10 1a10 	vmov	r1, s0
 800b328:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800b32c:	2900      	cmp	r1, #0
 800b32e:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800b332:	bfac      	ite	ge
 800b334:	2001      	movge	r0, #1
 800b336:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 800b33a:	2a1e      	cmp	r2, #30
 800b33c:	dc1a      	bgt.n	800b374 <lroundf+0x50>
 800b33e:	2a00      	cmp	r2, #0
 800b340:	da03      	bge.n	800b34a <lroundf+0x26>
 800b342:	3201      	adds	r2, #1
 800b344:	bf18      	it	ne
 800b346:	2000      	movne	r0, #0
 800b348:	4770      	bx	lr
 800b34a:	2a16      	cmp	r2, #22
 800b34c:	bfd8      	it	le
 800b34e:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800b352:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800b356:	bfd8      	it	le
 800b358:	4113      	asrle	r3, r2
 800b35a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800b35e:	bfcd      	iteet	gt
 800b360:	3b96      	subgt	r3, #150	@ 0x96
 800b362:	185b      	addle	r3, r3, r1
 800b364:	f1c2 0217 	rsble	r2, r2, #23
 800b368:	fa01 f303 	lslgt.w	r3, r1, r3
 800b36c:	bfd8      	it	le
 800b36e:	40d3      	lsrle	r3, r2
 800b370:	4358      	muls	r0, r3
 800b372:	4770      	bx	lr
 800b374:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b378:	ee17 0a90 	vmov	r0, s15
 800b37c:	4770      	bx	lr
	...

0800b380 <ceilf>:
 800b380:	ee10 3a10 	vmov	r3, s0
 800b384:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b388:	3a7f      	subs	r2, #127	@ 0x7f
 800b38a:	2a16      	cmp	r2, #22
 800b38c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b390:	dc2b      	bgt.n	800b3ea <ceilf+0x6a>
 800b392:	2a00      	cmp	r2, #0
 800b394:	da12      	bge.n	800b3bc <ceilf+0x3c>
 800b396:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b3fc <ceilf+0x7c>
 800b39a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b39e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a6:	dd06      	ble.n	800b3b6 <ceilf+0x36>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db24      	blt.n	800b3f6 <ceilf+0x76>
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	bf14      	ite	ne
 800b3b0:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 800b3b4:	2300      	moveq	r3, #0
 800b3b6:	ee00 3a10 	vmov	s0, r3
 800b3ba:	4770      	bx	lr
 800b3bc:	4910      	ldr	r1, [pc, #64]	@ (800b400 <ceilf+0x80>)
 800b3be:	4111      	asrs	r1, r2
 800b3c0:	420b      	tst	r3, r1
 800b3c2:	d0fa      	beq.n	800b3ba <ceilf+0x3a>
 800b3c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b3fc <ceilf+0x7c>
 800b3c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b3cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	ddef      	ble.n	800b3b6 <ceilf+0x36>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfc2      	ittt	gt
 800b3da:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 800b3de:	fa40 f202 	asrgt.w	r2, r0, r2
 800b3e2:	189b      	addgt	r3, r3, r2
 800b3e4:	ea23 0301 	bic.w	r3, r3, r1
 800b3e8:	e7e5      	b.n	800b3b6 <ceilf+0x36>
 800b3ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b3ee:	d3e4      	bcc.n	800b3ba <ceilf+0x3a>
 800b3f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b3f4:	4770      	bx	lr
 800b3f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3fa:	e7dc      	b.n	800b3b6 <ceilf+0x36>
 800b3fc:	7149f2ca 	.word	0x7149f2ca
 800b400:	007fffff 	.word	0x007fffff

0800b404 <floorf>:
 800b404:	ee10 3a10 	vmov	r3, s0
 800b408:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b40c:	3a7f      	subs	r2, #127	@ 0x7f
 800b40e:	2a16      	cmp	r2, #22
 800b410:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b414:	dc2b      	bgt.n	800b46e <floorf+0x6a>
 800b416:	2a00      	cmp	r2, #0
 800b418:	da12      	bge.n	800b440 <floorf+0x3c>
 800b41a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b480 <floorf+0x7c>
 800b41e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b422:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	dd06      	ble.n	800b43a <floorf+0x36>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da24      	bge.n	800b47a <floorf+0x76>
 800b430:	2900      	cmp	r1, #0
 800b432:	4b14      	ldr	r3, [pc, #80]	@ (800b484 <floorf+0x80>)
 800b434:	bf08      	it	eq
 800b436:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b43a:	ee00 3a10 	vmov	s0, r3
 800b43e:	4770      	bx	lr
 800b440:	4911      	ldr	r1, [pc, #68]	@ (800b488 <floorf+0x84>)
 800b442:	4111      	asrs	r1, r2
 800b444:	420b      	tst	r3, r1
 800b446:	d0fa      	beq.n	800b43e <floorf+0x3a>
 800b448:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b480 <floorf+0x7c>
 800b44c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b450:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b458:	ddef      	ble.n	800b43a <floorf+0x36>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bfbe      	ittt	lt
 800b45e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b462:	fa40 f202 	asrlt.w	r2, r0, r2
 800b466:	189b      	addlt	r3, r3, r2
 800b468:	ea23 0301 	bic.w	r3, r3, r1
 800b46c:	e7e5      	b.n	800b43a <floorf+0x36>
 800b46e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b472:	d3e4      	bcc.n	800b43e <floorf+0x3a>
 800b474:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b478:	4770      	bx	lr
 800b47a:	2300      	movs	r3, #0
 800b47c:	e7dd      	b.n	800b43a <floorf+0x36>
 800b47e:	bf00      	nop
 800b480:	7149f2ca 	.word	0x7149f2ca
 800b484:	bf800000 	.word	0xbf800000
 800b488:	007fffff 	.word	0x007fffff

0800b48c <__ieee754_rem_pio2f>:
 800b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48e:	ee10 6a10 	vmov	r6, s0
 800b492:	4b88      	ldr	r3, [pc, #544]	@ (800b6b4 <__ieee754_rem_pio2f+0x228>)
 800b494:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b498:	429d      	cmp	r5, r3
 800b49a:	b087      	sub	sp, #28
 800b49c:	4604      	mov	r4, r0
 800b49e:	d805      	bhi.n	800b4ac <__ieee754_rem_pio2f+0x20>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	ed80 0a00 	vstr	s0, [r0]
 800b4a6:	6043      	str	r3, [r0, #4]
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e022      	b.n	800b4f2 <__ieee754_rem_pio2f+0x66>
 800b4ac:	4b82      	ldr	r3, [pc, #520]	@ (800b6b8 <__ieee754_rem_pio2f+0x22c>)
 800b4ae:	429d      	cmp	r5, r3
 800b4b0:	d83a      	bhi.n	800b528 <__ieee754_rem_pio2f+0x9c>
 800b4b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b6bc <__ieee754_rem_pio2f+0x230>
 800b4bc:	4a80      	ldr	r2, [pc, #512]	@ (800b6c0 <__ieee754_rem_pio2f+0x234>)
 800b4be:	f023 030f 	bic.w	r3, r3, #15
 800b4c2:	dd18      	ble.n	800b4f6 <__ieee754_rem_pio2f+0x6a>
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b4ca:	bf09      	itett	eq
 800b4cc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b6c4 <__ieee754_rem_pio2f+0x238>
 800b4d0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b6c8 <__ieee754_rem_pio2f+0x23c>
 800b4d4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b6cc <__ieee754_rem_pio2f+0x240>
 800b4d8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b4dc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b4e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4e4:	ed80 7a00 	vstr	s14, [r0]
 800b4e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4ec:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	b007      	add	sp, #28
 800b4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b4fc:	bf09      	itett	eq
 800b4fe:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b6c4 <__ieee754_rem_pio2f+0x238>
 800b502:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b6c8 <__ieee754_rem_pio2f+0x23c>
 800b506:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b6cc <__ieee754_rem_pio2f+0x240>
 800b50a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b50e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b516:	ed80 7a00 	vstr	s14, [r0]
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b526:	e7e4      	b.n	800b4f2 <__ieee754_rem_pio2f+0x66>
 800b528:	4b69      	ldr	r3, [pc, #420]	@ (800b6d0 <__ieee754_rem_pio2f+0x244>)
 800b52a:	429d      	cmp	r5, r3
 800b52c:	d873      	bhi.n	800b616 <__ieee754_rem_pio2f+0x18a>
 800b52e:	f000 f8dd 	bl	800b6ec <fabsf>
 800b532:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b6d4 <__ieee754_rem_pio2f+0x248>
 800b536:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b53a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b53e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b546:	ee17 0a90 	vmov	r0, s15
 800b54a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b6bc <__ieee754_rem_pio2f+0x230>
 800b54e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b552:	281f      	cmp	r0, #31
 800b554:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b6c8 <__ieee754_rem_pio2f+0x23c>
 800b558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55c:	eeb1 6a47 	vneg.f32	s12, s14
 800b560:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b564:	ee16 1a90 	vmov	r1, s13
 800b568:	dc09      	bgt.n	800b57e <__ieee754_rem_pio2f+0xf2>
 800b56a:	4a5b      	ldr	r2, [pc, #364]	@ (800b6d8 <__ieee754_rem_pio2f+0x24c>)
 800b56c:	1e47      	subs	r7, r0, #1
 800b56e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b572:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b576:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d107      	bne.n	800b58e <__ieee754_rem_pio2f+0x102>
 800b57e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b582:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b586:	2a08      	cmp	r2, #8
 800b588:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b58c:	dc14      	bgt.n	800b5b8 <__ieee754_rem_pio2f+0x12c>
 800b58e:	6021      	str	r1, [r4, #0]
 800b590:	ed94 7a00 	vldr	s14, [r4]
 800b594:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b598:	2e00      	cmp	r6, #0
 800b59a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b59e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b5a2:	daa6      	bge.n	800b4f2 <__ieee754_rem_pio2f+0x66>
 800b5a4:	eeb1 7a47 	vneg.f32	s14, s14
 800b5a8:	eeb1 0a40 	vneg.f32	s0, s0
 800b5ac:	ed84 7a00 	vstr	s14, [r4]
 800b5b0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b5b4:	4240      	negs	r0, r0
 800b5b6:	e79c      	b.n	800b4f2 <__ieee754_rem_pio2f+0x66>
 800b5b8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b6c4 <__ieee754_rem_pio2f+0x238>
 800b5bc:	eef0 6a40 	vmov.f32	s13, s0
 800b5c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b5c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b5c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b5cc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b6cc <__ieee754_rem_pio2f+0x240>
 800b5d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b5d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b5d8:	ee15 2a90 	vmov	r2, s11
 800b5dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b5e0:	1a5b      	subs	r3, r3, r1
 800b5e2:	2b19      	cmp	r3, #25
 800b5e4:	dc04      	bgt.n	800b5f0 <__ieee754_rem_pio2f+0x164>
 800b5e6:	edc4 5a00 	vstr	s11, [r4]
 800b5ea:	eeb0 0a66 	vmov.f32	s0, s13
 800b5ee:	e7cf      	b.n	800b590 <__ieee754_rem_pio2f+0x104>
 800b5f0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b6dc <__ieee754_rem_pio2f+0x250>
 800b5f4:	eeb0 0a66 	vmov.f32	s0, s13
 800b5f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b5fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b600:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b6e0 <__ieee754_rem_pio2f+0x254>
 800b604:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b608:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b60c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b610:	ed84 7a00 	vstr	s14, [r4]
 800b614:	e7bc      	b.n	800b590 <__ieee754_rem_pio2f+0x104>
 800b616:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b61a:	d306      	bcc.n	800b62a <__ieee754_rem_pio2f+0x19e>
 800b61c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b620:	edc0 7a01 	vstr	s15, [r0, #4]
 800b624:	edc0 7a00 	vstr	s15, [r0]
 800b628:	e73e      	b.n	800b4a8 <__ieee754_rem_pio2f+0x1c>
 800b62a:	15ea      	asrs	r2, r5, #23
 800b62c:	3a86      	subs	r2, #134	@ 0x86
 800b62e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b63a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b6e4 <__ieee754_rem_pio2f+0x258>
 800b63e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b646:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b64a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b64e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b65a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b65e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b662:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b66a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b66e:	d11e      	bne.n	800b6ae <__ieee754_rem_pio2f+0x222>
 800b670:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b678:	bf0c      	ite	eq
 800b67a:	2301      	moveq	r3, #1
 800b67c:	2302      	movne	r3, #2
 800b67e:	491a      	ldr	r1, [pc, #104]	@ (800b6e8 <__ieee754_rem_pio2f+0x25c>)
 800b680:	9101      	str	r1, [sp, #4]
 800b682:	2102      	movs	r1, #2
 800b684:	9100      	str	r1, [sp, #0]
 800b686:	a803      	add	r0, sp, #12
 800b688:	4621      	mov	r1, r4
 800b68a:	f000 f837 	bl	800b6fc <__kernel_rem_pio2f>
 800b68e:	2e00      	cmp	r6, #0
 800b690:	f6bf af2f 	bge.w	800b4f2 <__ieee754_rem_pio2f+0x66>
 800b694:	edd4 7a00 	vldr	s15, [r4]
 800b698:	eef1 7a67 	vneg.f32	s15, s15
 800b69c:	edc4 7a00 	vstr	s15, [r4]
 800b6a0:	edd4 7a01 	vldr	s15, [r4, #4]
 800b6a4:	eef1 7a67 	vneg.f32	s15, s15
 800b6a8:	edc4 7a01 	vstr	s15, [r4, #4]
 800b6ac:	e782      	b.n	800b5b4 <__ieee754_rem_pio2f+0x128>
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e7e5      	b.n	800b67e <__ieee754_rem_pio2f+0x1f2>
 800b6b2:	bf00      	nop
 800b6b4:	3f490fd8 	.word	0x3f490fd8
 800b6b8:	4016cbe3 	.word	0x4016cbe3
 800b6bc:	3fc90f80 	.word	0x3fc90f80
 800b6c0:	3fc90fd0 	.word	0x3fc90fd0
 800b6c4:	37354400 	.word	0x37354400
 800b6c8:	37354443 	.word	0x37354443
 800b6cc:	2e85a308 	.word	0x2e85a308
 800b6d0:	43490f80 	.word	0x43490f80
 800b6d4:	3f22f984 	.word	0x3f22f984
 800b6d8:	0801f5cc 	.word	0x0801f5cc
 800b6dc:	2e85a300 	.word	0x2e85a300
 800b6e0:	248d3132 	.word	0x248d3132
 800b6e4:	43800000 	.word	0x43800000
 800b6e8:	0801f64c 	.word	0x0801f64c

0800b6ec <fabsf>:
 800b6ec:	ee10 3a10 	vmov	r3, s0
 800b6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6f4:	ee00 3a10 	vmov	s0, r3
 800b6f8:	4770      	bx	lr
	...

0800b6fc <__kernel_rem_pio2f>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	ed2d 8b04 	vpush	{d8-d9}
 800b704:	b0d9      	sub	sp, #356	@ 0x164
 800b706:	4690      	mov	r8, r2
 800b708:	9001      	str	r0, [sp, #4]
 800b70a:	4ab6      	ldr	r2, [pc, #728]	@ (800b9e4 <__kernel_rem_pio2f+0x2e8>)
 800b70c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b70e:	f118 0f04 	cmn.w	r8, #4
 800b712:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b716:	460f      	mov	r7, r1
 800b718:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b71c:	db26      	blt.n	800b76c <__kernel_rem_pio2f+0x70>
 800b71e:	f1b8 0203 	subs.w	r2, r8, #3
 800b722:	bf48      	it	mi
 800b724:	f108 0204 	addmi.w	r2, r8, #4
 800b728:	10d2      	asrs	r2, r2, #3
 800b72a:	1c55      	adds	r5, r2, #1
 800b72c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b72e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800b732:	00e8      	lsls	r0, r5, #3
 800b734:	eba2 060b 	sub.w	r6, r2, fp
 800b738:	9002      	str	r0, [sp, #8]
 800b73a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b73e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b742:	ac1c      	add	r4, sp, #112	@ 0x70
 800b744:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b748:	2000      	movs	r0, #0
 800b74a:	4560      	cmp	r0, ip
 800b74c:	dd10      	ble.n	800b770 <__kernel_rem_pio2f+0x74>
 800b74e:	a91c      	add	r1, sp, #112	@ 0x70
 800b750:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b754:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b758:	2600      	movs	r6, #0
 800b75a:	4556      	cmp	r6, sl
 800b75c:	dc24      	bgt.n	800b7a8 <__kernel_rem_pio2f+0xac>
 800b75e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b762:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800b766:	4684      	mov	ip, r0
 800b768:	2400      	movs	r4, #0
 800b76a:	e016      	b.n	800b79a <__kernel_rem_pio2f+0x9e>
 800b76c:	2200      	movs	r2, #0
 800b76e:	e7dc      	b.n	800b72a <__kernel_rem_pio2f+0x2e>
 800b770:	42c6      	cmn	r6, r0
 800b772:	bf5d      	ittte	pl
 800b774:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b778:	ee07 1a90 	vmovpl	s15, r1
 800b77c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b780:	eef0 7a47 	vmovmi.f32	s15, s14
 800b784:	ece4 7a01 	vstmia	r4!, {s15}
 800b788:	3001      	adds	r0, #1
 800b78a:	e7de      	b.n	800b74a <__kernel_rem_pio2f+0x4e>
 800b78c:	ecfe 6a01 	vldmia	lr!, {s13}
 800b790:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b794:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b798:	3401      	adds	r4, #1
 800b79a:	455c      	cmp	r4, fp
 800b79c:	ddf6      	ble.n	800b78c <__kernel_rem_pio2f+0x90>
 800b79e:	ece9 7a01 	vstmia	r9!, {s15}
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	3004      	adds	r0, #4
 800b7a6:	e7d8      	b.n	800b75a <__kernel_rem_pio2f+0x5e>
 800b7a8:	a908      	add	r1, sp, #32
 800b7aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ae:	9104      	str	r1, [sp, #16]
 800b7b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7b2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b9f0 <__kernel_rem_pio2f+0x2f4>
 800b7b6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b9ec <__kernel_rem_pio2f+0x2f0>
 800b7ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b7be:	9203      	str	r2, [sp, #12]
 800b7c0:	4654      	mov	r4, sl
 800b7c2:	00a2      	lsls	r2, r4, #2
 800b7c4:	9205      	str	r2, [sp, #20]
 800b7c6:	aa58      	add	r2, sp, #352	@ 0x160
 800b7c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b7cc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b7d0:	a944      	add	r1, sp, #272	@ 0x110
 800b7d2:	aa08      	add	r2, sp, #32
 800b7d4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b7d8:	4694      	mov	ip, r2
 800b7da:	4626      	mov	r6, r4
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	dc4c      	bgt.n	800b87a <__kernel_rem_pio2f+0x17e>
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7e6:	f000 f9f1 	bl	800bbcc <scalbnf>
 800b7ea:	eeb0 8a40 	vmov.f32	s16, s0
 800b7ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b7f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7f6:	f7ff fe05 	bl	800b404 <floorf>
 800b7fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b802:	2d00      	cmp	r5, #0
 800b804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b808:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b80c:	ee17 9a90 	vmov	r9, s15
 800b810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b814:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b818:	dd41      	ble.n	800b89e <__kernel_rem_pio2f+0x1a2>
 800b81a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800b81e:	a908      	add	r1, sp, #32
 800b820:	f1c5 0e08 	rsb	lr, r5, #8
 800b824:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b828:	fa46 f00e 	asr.w	r0, r6, lr
 800b82c:	4481      	add	r9, r0
 800b82e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b832:	1a36      	subs	r6, r6, r0
 800b834:	f1c5 0007 	rsb	r0, r5, #7
 800b838:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b83c:	4106      	asrs	r6, r0
 800b83e:	2e00      	cmp	r6, #0
 800b840:	dd3c      	ble.n	800b8bc <__kernel_rem_pio2f+0x1c0>
 800b842:	f04f 0e00 	mov.w	lr, #0
 800b846:	f109 0901 	add.w	r9, r9, #1
 800b84a:	4670      	mov	r0, lr
 800b84c:	4574      	cmp	r4, lr
 800b84e:	dc68      	bgt.n	800b922 <__kernel_rem_pio2f+0x226>
 800b850:	2d00      	cmp	r5, #0
 800b852:	dd03      	ble.n	800b85c <__kernel_rem_pio2f+0x160>
 800b854:	2d01      	cmp	r5, #1
 800b856:	d074      	beq.n	800b942 <__kernel_rem_pio2f+0x246>
 800b858:	2d02      	cmp	r5, #2
 800b85a:	d07d      	beq.n	800b958 <__kernel_rem_pio2f+0x25c>
 800b85c:	2e02      	cmp	r6, #2
 800b85e:	d12d      	bne.n	800b8bc <__kernel_rem_pio2f+0x1c0>
 800b860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b864:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b868:	b340      	cbz	r0, 800b8bc <__kernel_rem_pio2f+0x1c0>
 800b86a:	4628      	mov	r0, r5
 800b86c:	9306      	str	r3, [sp, #24]
 800b86e:	f000 f9ad 	bl	800bbcc <scalbnf>
 800b872:	9b06      	ldr	r3, [sp, #24]
 800b874:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b878:	e020      	b.n	800b8bc <__kernel_rem_pio2f+0x1c0>
 800b87a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b87e:	3e01      	subs	r6, #1
 800b880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b888:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b88c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b890:	ecac 0a01 	vstmia	ip!, {s0}
 800b894:	ed30 0a01 	vldmdb	r0!, {s0}
 800b898:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b89c:	e79e      	b.n	800b7dc <__kernel_rem_pio2f+0xe0>
 800b89e:	d105      	bne.n	800b8ac <__kernel_rem_pio2f+0x1b0>
 800b8a0:	1e60      	subs	r0, r4, #1
 800b8a2:	a908      	add	r1, sp, #32
 800b8a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b8a8:	11f6      	asrs	r6, r6, #7
 800b8aa:	e7c8      	b.n	800b83e <__kernel_rem_pio2f+0x142>
 800b8ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b8:	da31      	bge.n	800b91e <__kernel_rem_pio2f+0x222>
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c4:	f040 8098 	bne.w	800b9f8 <__kernel_rem_pio2f+0x2fc>
 800b8c8:	1e60      	subs	r0, r4, #1
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4550      	cmp	r0, sl
 800b8ce:	da4b      	bge.n	800b968 <__kernel_rem_pio2f+0x26c>
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	d065      	beq.n	800b9a0 <__kernel_rem_pio2f+0x2a4>
 800b8d4:	3c01      	subs	r4, #1
 800b8d6:	ab08      	add	r3, sp, #32
 800b8d8:	3d08      	subs	r5, #8
 800b8da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0f8      	beq.n	800b8d4 <__kernel_rem_pio2f+0x1d8>
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8e8:	f000 f970 	bl	800bbcc <scalbnf>
 800b8ec:	1c63      	adds	r3, r4, #1
 800b8ee:	aa44      	add	r2, sp, #272	@ 0x110
 800b8f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b9f0 <__kernel_rem_pio2f+0x2f4>
 800b8f4:	0099      	lsls	r1, r3, #2
 800b8f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8fa:	4623      	mov	r3, r4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f280 80a9 	bge.w	800ba54 <__kernel_rem_pio2f+0x358>
 800b902:	4623      	mov	r3, r4
 800b904:	2b00      	cmp	r3, #0
 800b906:	f2c0 80c7 	blt.w	800ba98 <__kernel_rem_pio2f+0x39c>
 800b90a:	aa44      	add	r2, sp, #272	@ 0x110
 800b90c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b910:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b9e8 <__kernel_rem_pio2f+0x2ec>
 800b914:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800b918:	2000      	movs	r0, #0
 800b91a:	1ae2      	subs	r2, r4, r3
 800b91c:	e0b1      	b.n	800ba82 <__kernel_rem_pio2f+0x386>
 800b91e:	2602      	movs	r6, #2
 800b920:	e78f      	b.n	800b842 <__kernel_rem_pio2f+0x146>
 800b922:	f852 1b04 	ldr.w	r1, [r2], #4
 800b926:	b948      	cbnz	r0, 800b93c <__kernel_rem_pio2f+0x240>
 800b928:	b121      	cbz	r1, 800b934 <__kernel_rem_pio2f+0x238>
 800b92a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b92e:	f842 1c04 	str.w	r1, [r2, #-4]
 800b932:	2101      	movs	r1, #1
 800b934:	f10e 0e01 	add.w	lr, lr, #1
 800b938:	4608      	mov	r0, r1
 800b93a:	e787      	b.n	800b84c <__kernel_rem_pio2f+0x150>
 800b93c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b940:	e7f5      	b.n	800b92e <__kernel_rem_pio2f+0x232>
 800b942:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800b946:	aa08      	add	r2, sp, #32
 800b948:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b94c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b950:	a908      	add	r1, sp, #32
 800b952:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b956:	e781      	b.n	800b85c <__kernel_rem_pio2f+0x160>
 800b958:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800b95c:	aa08      	add	r2, sp, #32
 800b95e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b962:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b966:	e7f3      	b.n	800b950 <__kernel_rem_pio2f+0x254>
 800b968:	a908      	add	r1, sp, #32
 800b96a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b96e:	3801      	subs	r0, #1
 800b970:	430a      	orrs	r2, r1
 800b972:	e7ab      	b.n	800b8cc <__kernel_rem_pio2f+0x1d0>
 800b974:	3201      	adds	r2, #1
 800b976:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	d0fa      	beq.n	800b974 <__kernel_rem_pio2f+0x278>
 800b97e:	9905      	ldr	r1, [sp, #20]
 800b980:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b984:	eb0d 0001 	add.w	r0, sp, r1
 800b988:	18e6      	adds	r6, r4, r3
 800b98a:	a91c      	add	r1, sp, #112	@ 0x70
 800b98c:	f104 0c01 	add.w	ip, r4, #1
 800b990:	384c      	subs	r0, #76	@ 0x4c
 800b992:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b996:	4422      	add	r2, r4
 800b998:	4562      	cmp	r2, ip
 800b99a:	da04      	bge.n	800b9a6 <__kernel_rem_pio2f+0x2aa>
 800b99c:	4614      	mov	r4, r2
 800b99e:	e710      	b.n	800b7c2 <__kernel_rem_pio2f+0xc6>
 800b9a0:	9804      	ldr	r0, [sp, #16]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	e7e7      	b.n	800b976 <__kernel_rem_pio2f+0x27a>
 800b9a6:	9903      	ldr	r1, [sp, #12]
 800b9a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b9b0:	9105      	str	r1, [sp, #20]
 800b9b2:	ee07 1a90 	vmov	s15, r1
 800b9b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	ece6 7a01 	vstmia	r6!, {s15}
 800b9c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800b9c4:	46b1      	mov	r9, r6
 800b9c6:	455c      	cmp	r4, fp
 800b9c8:	dd04      	ble.n	800b9d4 <__kernel_rem_pio2f+0x2d8>
 800b9ca:	ece0 7a01 	vstmia	r0!, {s15}
 800b9ce:	f10c 0c01 	add.w	ip, ip, #1
 800b9d2:	e7e1      	b.n	800b998 <__kernel_rem_pio2f+0x29c>
 800b9d4:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9d8:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9dc:	3401      	adds	r4, #1
 800b9de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9e2:	e7f0      	b.n	800b9c6 <__kernel_rem_pio2f+0x2ca>
 800b9e4:	0801f990 	.word	0x0801f990
 800b9e8:	0801f964 	.word	0x0801f964
 800b9ec:	43800000 	.word	0x43800000
 800b9f0:	3b800000 	.word	0x3b800000
 800b9f4:	00000000 	.word	0x00000000
 800b9f8:	9b02      	ldr	r3, [sp, #8]
 800b9fa:	eeb0 0a48 	vmov.f32	s0, s16
 800b9fe:	eba3 0008 	sub.w	r0, r3, r8
 800ba02:	f000 f8e3 	bl	800bbcc <scalbnf>
 800ba06:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b9ec <__kernel_rem_pio2f+0x2f0>
 800ba0a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba12:	db19      	blt.n	800ba48 <__kernel_rem_pio2f+0x34c>
 800ba14:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b9f0 <__kernel_rem_pio2f+0x2f4>
 800ba18:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba1c:	aa08      	add	r2, sp, #32
 800ba1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba22:	3508      	adds	r5, #8
 800ba24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba34:	ee10 3a10 	vmov	r3, s0
 800ba38:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba3c:	ee17 3a90 	vmov	r3, s15
 800ba40:	3401      	adds	r4, #1
 800ba42:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba46:	e74c      	b.n	800b8e2 <__kernel_rem_pio2f+0x1e6>
 800ba48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba4c:	aa08      	add	r2, sp, #32
 800ba4e:	ee10 3a10 	vmov	r3, s0
 800ba52:	e7f6      	b.n	800ba42 <__kernel_rem_pio2f+0x346>
 800ba54:	a808      	add	r0, sp, #32
 800ba56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba5a:	9001      	str	r0, [sp, #4]
 800ba5c:	ee07 0a90 	vmov	s15, r0
 800ba60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba64:	3b01      	subs	r3, #1
 800ba66:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba6a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba6e:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba72:	e743      	b.n	800b8fc <__kernel_rem_pio2f+0x200>
 800ba74:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba78:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba80:	3001      	adds	r0, #1
 800ba82:	4550      	cmp	r0, sl
 800ba84:	dc01      	bgt.n	800ba8a <__kernel_rem_pio2f+0x38e>
 800ba86:	4290      	cmp	r0, r2
 800ba88:	ddf4      	ble.n	800ba74 <__kernel_rem_pio2f+0x378>
 800ba8a:	a858      	add	r0, sp, #352	@ 0x160
 800ba8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba90:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba94:	3b01      	subs	r3, #1
 800ba96:	e735      	b.n	800b904 <__kernel_rem_pio2f+0x208>
 800ba98:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	dc09      	bgt.n	800bab2 <__kernel_rem_pio2f+0x3b6>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dc27      	bgt.n	800baf2 <__kernel_rem_pio2f+0x3f6>
 800baa2:	d040      	beq.n	800bb26 <__kernel_rem_pio2f+0x42a>
 800baa4:	f009 0007 	and.w	r0, r9, #7
 800baa8:	b059      	add	sp, #356	@ 0x164
 800baaa:	ecbd 8b04 	vpop	{d8-d9}
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d1f5      	bne.n	800baa4 <__kernel_rem_pio2f+0x3a8>
 800bab8:	aa30      	add	r2, sp, #192	@ 0xc0
 800baba:	1f0b      	subs	r3, r1, #4
 800babc:	4413      	add	r3, r2
 800babe:	461a      	mov	r2, r3
 800bac0:	4620      	mov	r0, r4
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dc50      	bgt.n	800bb68 <__kernel_rem_pio2f+0x46c>
 800bac6:	4622      	mov	r2, r4
 800bac8:	2a01      	cmp	r2, #1
 800baca:	dc5d      	bgt.n	800bb88 <__kernel_rem_pio2f+0x48c>
 800bacc:	ab30      	add	r3, sp, #192	@ 0xc0
 800bace:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800bad2:	440b      	add	r3, r1
 800bad4:	2c01      	cmp	r4, #1
 800bad6:	dc67      	bgt.n	800bba8 <__kernel_rem_pio2f+0x4ac>
 800bad8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800badc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bae0:	2e00      	cmp	r6, #0
 800bae2:	d167      	bne.n	800bbb4 <__kernel_rem_pio2f+0x4b8>
 800bae4:	edc7 6a00 	vstr	s13, [r7]
 800bae8:	ed87 7a01 	vstr	s14, [r7, #4]
 800baec:	edc7 7a02 	vstr	s15, [r7, #8]
 800baf0:	e7d8      	b.n	800baa4 <__kernel_rem_pio2f+0x3a8>
 800baf2:	ab30      	add	r3, sp, #192	@ 0xc0
 800baf4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800baf8:	440b      	add	r3, r1
 800bafa:	4622      	mov	r2, r4
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	da24      	bge.n	800bb4a <__kernel_rem_pio2f+0x44e>
 800bb00:	b34e      	cbz	r6, 800bb56 <__kernel_rem_pio2f+0x45a>
 800bb02:	eef1 7a47 	vneg.f32	s15, s14
 800bb06:	edc7 7a00 	vstr	s15, [r7]
 800bb0a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb12:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb14:	2301      	movs	r3, #1
 800bb16:	429c      	cmp	r4, r3
 800bb18:	da20      	bge.n	800bb5c <__kernel_rem_pio2f+0x460>
 800bb1a:	b10e      	cbz	r6, 800bb20 <__kernel_rem_pio2f+0x424>
 800bb1c:	eef1 7a67 	vneg.f32	s15, s15
 800bb20:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb24:	e7be      	b.n	800baa4 <__kernel_rem_pio2f+0x3a8>
 800bb26:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb28:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b9f4 <__kernel_rem_pio2f+0x2f8>
 800bb2c:	440b      	add	r3, r1
 800bb2e:	2c00      	cmp	r4, #0
 800bb30:	da05      	bge.n	800bb3e <__kernel_rem_pio2f+0x442>
 800bb32:	b10e      	cbz	r6, 800bb38 <__kernel_rem_pio2f+0x43c>
 800bb34:	eef1 7a67 	vneg.f32	s15, s15
 800bb38:	edc7 7a00 	vstr	s15, [r7]
 800bb3c:	e7b2      	b.n	800baa4 <__kernel_rem_pio2f+0x3a8>
 800bb3e:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb42:	3c01      	subs	r4, #1
 800bb44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb48:	e7f1      	b.n	800bb2e <__kernel_rem_pio2f+0x432>
 800bb4a:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb4e:	3a01      	subs	r2, #1
 800bb50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb54:	e7d2      	b.n	800bafc <__kernel_rem_pio2f+0x400>
 800bb56:	eef0 7a47 	vmov.f32	s15, s14
 800bb5a:	e7d4      	b.n	800bb06 <__kernel_rem_pio2f+0x40a>
 800bb5c:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb60:	3301      	adds	r3, #1
 800bb62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb66:	e7d6      	b.n	800bb16 <__kernel_rem_pio2f+0x41a>
 800bb68:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb6c:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb74:	3801      	subs	r0, #1
 800bb76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb7a:	ed82 7a00 	vstr	s14, [r2]
 800bb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb82:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb86:	e79c      	b.n	800bac2 <__kernel_rem_pio2f+0x3c6>
 800bb88:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb8c:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb94:	3a01      	subs	r2, #1
 800bb96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb9a:	ed83 7a00 	vstr	s14, [r3]
 800bb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba2:	edc3 7a01 	vstr	s15, [r3, #4]
 800bba6:	e78f      	b.n	800bac8 <__kernel_rem_pio2f+0x3cc>
 800bba8:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbac:	3c01      	subs	r4, #1
 800bbae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbb2:	e78f      	b.n	800bad4 <__kernel_rem_pio2f+0x3d8>
 800bbb4:	eef1 6a66 	vneg.f32	s13, s13
 800bbb8:	eeb1 7a47 	vneg.f32	s14, s14
 800bbbc:	edc7 6a00 	vstr	s13, [r7]
 800bbc0:	ed87 7a01 	vstr	s14, [r7, #4]
 800bbc4:	eef1 7a67 	vneg.f32	s15, s15
 800bbc8:	e790      	b.n	800baec <__kernel_rem_pio2f+0x3f0>
 800bbca:	bf00      	nop

0800bbcc <scalbnf>:
 800bbcc:	ee10 3a10 	vmov	r3, s0
 800bbd0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bbd4:	d02b      	beq.n	800bc2e <scalbnf+0x62>
 800bbd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bbda:	d302      	bcc.n	800bbe2 <scalbnf+0x16>
 800bbdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbe0:	4770      	bx	lr
 800bbe2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bbe6:	d123      	bne.n	800bc30 <scalbnf+0x64>
 800bbe8:	4b24      	ldr	r3, [pc, #144]	@ (800bc7c <scalbnf+0xb0>)
 800bbea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bc80 <scalbnf+0xb4>
 800bbee:	4298      	cmp	r0, r3
 800bbf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bbf4:	db17      	blt.n	800bc26 <scalbnf+0x5a>
 800bbf6:	ee10 3a10 	vmov	r3, s0
 800bbfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbfe:	3a19      	subs	r2, #25
 800bc00:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bc04:	4288      	cmp	r0, r1
 800bc06:	dd15      	ble.n	800bc34 <scalbnf+0x68>
 800bc08:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bc84 <scalbnf+0xb8>
 800bc0c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bc88 <scalbnf+0xbc>
 800bc10:	ee10 3a10 	vmov	r3, s0
 800bc14:	eeb0 7a67 	vmov.f32	s14, s15
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfb8      	it	lt
 800bc1c:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc20:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bc24:	4770      	bx	lr
 800bc26:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc8c <scalbnf+0xc0>
 800bc2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc2e:	4770      	bx	lr
 800bc30:	0dd2      	lsrs	r2, r2, #23
 800bc32:	e7e5      	b.n	800bc00 <scalbnf+0x34>
 800bc34:	4410      	add	r0, r2
 800bc36:	28fe      	cmp	r0, #254	@ 0xfe
 800bc38:	dce6      	bgt.n	800bc08 <scalbnf+0x3c>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	dd06      	ble.n	800bc4c <scalbnf+0x80>
 800bc3e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc42:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc46:	ee00 3a10 	vmov	s0, r3
 800bc4a:	4770      	bx	lr
 800bc4c:	f110 0f16 	cmn.w	r0, #22
 800bc50:	da09      	bge.n	800bc66 <scalbnf+0x9a>
 800bc52:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bc8c <scalbnf+0xc0>
 800bc56:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bc90 <scalbnf+0xc4>
 800bc5a:	ee10 3a10 	vmov	r3, s0
 800bc5e:	eeb0 7a67 	vmov.f32	s14, s15
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	e7d9      	b.n	800bc1a <scalbnf+0x4e>
 800bc66:	3019      	adds	r0, #25
 800bc68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc6c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc70:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bc94 <scalbnf+0xc8>
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	e7d7      	b.n	800bc2a <scalbnf+0x5e>
 800bc7a:	bf00      	nop
 800bc7c:	ffff3cb0 	.word	0xffff3cb0
 800bc80:	4c000000 	.word	0x4c000000
 800bc84:	7149f2ca 	.word	0x7149f2ca
 800bc88:	f149f2ca 	.word	0xf149f2ca
 800bc8c:	0da24260 	.word	0x0da24260
 800bc90:	8da24260 	.word	0x8da24260
 800bc94:	33000000 	.word	0x33000000

0800bc98 <_init>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	bf00      	nop
 800bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9e:	bc08      	pop	{r3}
 800bca0:	469e      	mov	lr, r3
 800bca2:	4770      	bx	lr

0800bca4 <_fini>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	bf00      	nop
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr
